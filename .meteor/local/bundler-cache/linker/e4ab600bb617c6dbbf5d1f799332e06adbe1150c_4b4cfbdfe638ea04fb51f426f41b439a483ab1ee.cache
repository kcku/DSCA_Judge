[{"type":"js","data":"/* Imports for global scope */\n\nMongoInternals = Package.mongo.MongoInternals;\nMongo = Package.mongo.Mongo;\nReactiveVar = Package['reactive-var'].ReactiveVar;\nTracker = Package.tracker.Tracker;\nDeps = Package.tracker.Deps;\nECMAScript = Package.ecmascript.ECMAScript;\nMeteorMathJax = Package['mrt:mathjax'].MeteorMathJax;\nHelpers = Package['raix:handlebar-helpers'].Helpers;\nmoment = Package['momentjs:moment'].moment;\nMeteor = Package.meteor.Meteor;\nglobal = Package.meteor.global;\nmeteorEnv = Package.meteor.meteorEnv;\nWebApp = Package.webapp.WebApp;\nWebAppInternals = Package.webapp.WebAppInternals;\nmain = Package.webapp.main;\n_ = Package.underscore._;\nDDP = Package['ddp-client'].DDP;\nDDPServer = Package['ddp-server'].DDPServer;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nBlaze = Package.ui.Blaze;\nUI = Package.ui.UI;\nHandlebars = Package.ui.Handlebars;\nSpacebars = Package.spacebars.Spacebars;\nmeteorInstall = Package.modules.meteorInstall;\nmeteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nPromise = Package.promise.Promise;\nAccounts = Package['accounts-base'].Accounts;\nAutoupdate = Package.autoupdate.Autoupdate;\nHTML = Package.htmljs.HTML;\n\n","servePath":"/packages/global-imports.js"},{"type":"js","data":"var require = meteorInstall({\"imports\":{\"api\":{\"_problem.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                           //\n// imports/api/_problem.js                                                                   //\n//                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                             //\nlet ProblemTests;\nmodule.watch(require(\"./problem.js\"), {\n\tProblemTests(v) {\n\t\tProblemTests = v;\n\t}\n\n}, 0);\nlet ps;\nmodule.watch(require(\"child_process\"), {\n\tdefault(v) {\n\t\tps = v;\n\t}\n\n}, 1);\nlet fs;\nmodule.watch(require(\"fs\"), {\n\tdefault(v) {\n\t\tfs = v;\n\t}\n\n}, 2);\nMeteor.methods({\n\t'ProblemTests.createDir'(id) {\n\t\tconst problemTest = ProblemTests.findOne({\n\t\t\t_id: id\n\t\t});\n\t\tconst dirpath = Meteor.dataPath + id;\n\t\tMeteor.wrapAsync(fs.mkdir)(dirpath);\n\t\tMeteor.call('ProblemTests.writeFile', id, 'input', problemTest.input);\n\t\tMeteor.call('ProblemTests.writeFile', id, 'output', problemTest.output);\n\t},\n\n\t'ProblemTests.writeFile'(id, field, content) {\n\t\tconst filepath = Meteor.dataPath + id + '/' + field;\n\t\tMeteor.wrapAsync(fs.writeFile)(filepath, content);\n\t},\n\n\t'ProblemTests.removeDir'(id) {\n\t\tconst dirpath = Meteor.dataPath + id;\n\t\tMeteor.wrapAsync(ps.exec)('rm -rf ' + dirpath);\n\t}\n\n});\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_student.js\":function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                           //\n// imports/api/_student.js                                                                   //\n//                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                             //\nAccounts.onCreateUser((option, user) => {\n\treturn _.extend(user, _.pick(option, 'fullname', 'year', 'isAdmin'));\n});\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_submission.js\":function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                           //\n// imports/api/_submission.js                                                                //\n//                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                             //\nthrow new Error(\"Unexpected token (82:1)\");\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"problem.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                           //\n// imports/api/problem.js                                                                    //\n//                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                             //\nmodule.export({\n\tProblems: () => Problems,\n\tProblemTests: () => ProblemTests\n});\nmodule.watch(require(\"./utility.js\"));\nconst Problems = new Mongo.Collection('Problems');\nconst ProblemTests = new Mongo.Collection('ProblemTests');\n\nif (Meteor.isServer) {\n\tMeteor.publish('Problems.findAll', function () {\n\t\tconst filter = {};\n\t\tconst option = {\n\t\t\tfields: {\n\t\t\t\t_id: 1,\n\t\t\t\ttitle: 1,\n\t\t\t\tisExam: 1,\n\t\t\t\tisPublic: 1\n\t\t\t}\n\t\t};\n\n\t\tif (!Meteor.isAdmin()) {\n\t\t\tfilter.isPublic = true;\n\t\t}\n\n\t\treturn Problems.find(filter, option);\n\t});\n\tMeteor.publish('Problems.findOne', function (id) {\n\t\tconst filter = {\n\t\t\t_id: id\n\t\t};\n\t\tconst option = {};\n\n\t\tif (!Meteor.isAdmin()) {\n\t\t\tfilter.isPublic = true;\n\t\t}\n\n\t\treturn Problems.find(filter, option);\n\t});\n\tMeteor.publish('ProblemTests.findAllByProblem', function (problemId) {\n\t\tconst filter = {\n\t\t\tproblemId: problemId\n\t\t};\n\t\tconst option = {};\n\n\t\tif (!Meteor.isAdmin()) {\n\t\t\tif (!Meteor.getValue(Problems, problemId, 'isPublic')) {\n\t\t\t\tfilter.problemId = null;\n\t\t\t}\n\n\t\t\tfilter.isPublic = true;\n\t\t}\n\n\t\treturn ProblemTests.find(filter, option);\n\t});\n}\n\nMeteor.methods({\n\t'Problems.insert'() {\n\t\tif (!Meteor.isAdmin()) return;\n\t\tProblems.insert({\n\t\t\ttitle: 'Sample Title',\n\t\t\tdescription: 'Sample Description',\n\t\t\tinputFormat: 'Sample Input Format',\n\t\t\toutputFormat: 'Sample Output Format',\n\t\t\thint: 'Sample Hint',\n\t\t\tisExam: false,\n\t\t\tisPublic: false\n\t\t});\n\t},\n\n\t'Problems.remove'(filter) {\n\t\tif (!Meteor.isAdmin()) return;\n\t\tProblems.find(filter).forEach(problem => {\n\t\t\tMeteor.call('ProblemTests.remove', {\n\t\t\t\tproblemId: problem._id\n\t\t\t});\n\t\t\tMeteor.call('Submissions.remove', {\n\t\t\t\tproblemId: problem._id\n\t\t\t});\n\t\t});\n\t\tProblems.remove(filter);\n\t},\n\n\t'Problems.update'(id, option) {\n\t\tif (!Meteor.isAdmin()) return;\n\t\tProblems.update({\n\t\t\t_id: id\n\t\t}, {\n\t\t\t$set: option\n\t\t});\n\t},\n\n\t'ProblemTests.insert'(problemId) {\n\t\tif (!Meteor.isAdmin()) return;\n\t\tconst problemTestId = ProblemTests.insert({\n\t\t\tproblemId: problemId,\n\t\t\tinput: 'Sample Input',\n\t\t\toutput: 'Sample Output',\n\t\t\ttimeLimit: 1000,\n\t\t\tmemoryLimit: 64000,\n\t\t\tscore: 5,\n\t\t\tisPublic: false\n\t\t});\n\n\t\tif (Meteor.isServer) {\n\t\t\tMeteor.call('ProblemTests.createDir', problemTestId);\n\t\t}\n\t},\n\n\t'ProblemTests.remove'(filter) {\n\t\tif (!Meteor.isAdmin()) return;\n\t\tProblemTests.find(filter).forEach(problemTest => {\n\t\t\tMeteor.call('SubmissionResults.remove', {\n\t\t\t\tproblemTestId: problemTest._id\n\t\t\t});\n\n\t\t\tif (Meteor.isServer) {\n\t\t\t\tMeteor.call('ProblemTests.removeDir', problemTest._id);\n\t\t\t}\n\t\t});\n\t\tProblemTests.remove(filter);\n\t},\n\n\t'ProblemTests.update'(id, option) {\n\t\tif (!Meteor.isAdmin()) return;\n\t\tProblemTests.update({\n\t\t\t_id: id\n\t\t}, {\n\t\t\t$set: option\n\t\t});\n\n\t\tif (Meteor.isServer) {\n\t\t\tif (option.input) Meteor.call('ProblemTests.writeFile', id, 'input', option.input);\n\t\t\tif (option.output) Meteor.call('ProblemTests.writeFile', id, 'output', option.output);\n\t\t}\n\t}\n\n});\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"student.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                           //\n// imports/api/student.js                                                                    //\n//                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                             //\nmodule.export({\n\tStudents: () => Students\n});\nlet Random;\nmodule.watch(require(\"meteor/random\"), {\n\tRandom(v) {\n\t\tRandom = v;\n\t}\n\n}, 0);\nmodule.watch(require(\"./utility.js\"));\nconst Students = Meteor.users;\n\nif (Meteor.isServer) {\n\tMeteor.publish('Students.findAll', function () {\n\t\tconst filter = {};\n\t\tconst option = {\n\t\t\tfields: {\n\t\t\t\t_id: 1,\n\t\t\t\tusername: 1,\n\t\t\t\tisAdmin: 1\n\t\t\t}\n\t\t};\n\t\treturn Students.find(filter, option);\n\t});\n\tMeteor.publish('Students.findOne', function (id) {\n\t\tconst filter = {\n\t\t\t_id: id\n\t\t};\n\t\tconst option = {\n\t\t\tfields: {\n\t\t\t\t_id: 1,\n\t\t\t\tusername: 1,\n\t\t\t\tfullname: 1,\n\t\t\t\temails: 1,\n\t\t\t\tyear: 1,\n\t\t\t\tisAdmin: 1\n\t\t\t}\n\t\t};\n\t\treturn Students.find(filter, option);\n\t});\n}\n\nMeteor.methods({\n\t'Students.insert'() {\n\t\tif (!Meteor.isAdmin()) return;\n\t\tAccounts.createUser({\n\t\t\tusername: 'Sample Username',\n\t\t\tfullname: 'Sample Fullname',\n\t\t\tpassword: Random.id(),\n\t\t\temail: 'dsca@inrg.csie.ntu.edu.tw',\n\t\t\tyear: new Date().getFullYear(),\n\t\t\tisAdmin: false\n\t\t});\n\t},\n\n\t'Students.remove'(filter) {\n\t\tif (!Meteor.isAdmin()) return;\n\t\tStudents.find(filter).forEach(student => {\n\t\t\tMeteor.call('Submissions.remove', {\n\t\t\t\tstudentId: student._id\n\t\t\t});\n\t\t});\n\t\tStudents.remove(filter);\n\t},\n\n\t'Students.update'(id, option) {\n\t\tif (!Meteor.isAdmin() || !Meteor.isServer) return;\n\n\t\tif (option.username) {\n\t\t\tAccounts.setUsername(id, option.username);\n\t\t\tdelete option.username;\n\t\t}\n\n\t\tif (option.password) {\n\t\t\tAccounts.setPassword(id, option.password);\n\t\t\tdelete option.password;\n\t\t}\n\n\t\tif (option.email) {\n\t\t\tStudents.update({\n\t\t\t\t_id: id\n\t\t\t}, {\n\t\t\t\t$set: {\n\t\t\t\t\temails: []\n\t\t\t\t}\n\t\t\t});\n\t\t\tAccounts.addEmail(id, option.email);\n\t\t\tdelete option.email;\n\t\t}\n\n\t\tif (!_.isEmpty(option)) {\n\t\t\tStudents.update({\n\t\t\t\t_id: id\n\t\t\t}, {\n\t\t\t\t$set: option\n\t\t\t});\n\t\t}\n\t},\n\n\t'Students.changePassword'(oldPassword, newPassword) {\n\t\tif (!Meteor.isServer) return;\n\t\tAccounts.changePassword(oldPassword, newPassword);\n\t}\n\n});\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"submission.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                           //\n// imports/api/submission.js                                                                 //\n//                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                             //\nmodule.export({\n\tSubmissions: () => Submissions,\n\tSubmissionResults: () => SubmissionResults\n});\nlet Problems, ProblemTests;\nmodule.watch(require(\"./problem.js\"), {\n\tProblems(v) {\n\t\tProblems = v;\n\t},\n\n\tProblemTests(v) {\n\t\tProblemTests = v;\n\t}\n\n}, 0);\nmodule.watch(require(\"./utility.js\"));\nconst Submissions = new Mongo.Collection('Submissions');\nconst SubmissionResults = new Mongo.Collection('SubmissionResults');\n\nif (Meteor.isServer) {\n\tMeteor.publish('Submissions.findAllByFilter', function (problemId, studentId) {\n\t\tconst filter = {\n\t\t\t$or: [{\n\t\t\t\tproblemId: problemId\n\t\t\t}, {\n\t\t\t\tstudentId,\n\t\t\t\tstudentId\n\t\t\t}]\n\t\t};\n\t\tconst option = {\n\t\t\tfields: {\n\t\t\t\t_id: 1,\n\t\t\t\tproblemId: 1,\n\t\t\t\tstudentId: 1,\n\t\t\t\tcreatedAt: 1,\n\t\t\t\tstatus: 1,\n\t\t\t\tisExam: 1\n\t\t\t}\n\t\t};\n\t\treturn Submissions.find(filter, option);\n\t});\n\tMeteor.publish('Submissions.findOne', function (id) {\n\t\tconst filter = {\n\t\t\t_id: id\n\t\t};\n\t\tconst option = {};\n\n\t\tif (!Meteor.isAdmin() && !Meteor.isOwner(Meteor.getValue(Submissions, id, 'studentId'))) {\n\t\t\toption.fields = {\n\t\t\t\tcode: 0,\n\t\t\t\terror: 0\n\t\t\t};\n\t\t}\n\n\t\treturn Submissions.find(filter, option);\n\t});\n\tMeteor.publish('SubmissionResults.findAllBySubmission', function (submissionId) {\n\t\tconst filter = {\n\t\t\tsubmissionId: submissionId\n\t\t};\n\t\tconst option = {};\n\n\t\tif (!Meteor.getValue(Submissions, submissionId, 'isExam')) {\n\t\t\tconst problemId = Meteor.getValue(Submissions, submissionId, 'problemId');\n\t\t\tfilter.problemTestId = {\n\t\t\t\t$in: []\n\t\t\t};\n\t\t\tProblemTests.find({\n\t\t\t\tproblemId: problemId,\n\t\t\t\tisPublic: 1\n\t\t\t}).forEach(problemTest => {\n\t\t\t\tfilter.problemTestId.$in.push(problemTest._id);\n\t\t\t});\n\t\t}\n\n\t\treturn SubmissionResults.find(filter, option);\n\t});\n}\n\nMeteor.methods({\n\t'Submissions.insert'(problemId, studentId, lang, code) {\n\t\tif (!Meteor.isOwner(studentId) || !Meteor.getValue(Problems, problemId, '_id')) return;\n\t\tconst submissionId = Submissions.insert({\n\t\t\tproblemId: problemId,\n\t\t\tstudentId: studentId,\n\t\t\tcreatedAt: new Date().getTime(),\n\t\t\tstatus: 'Pending',\n\t\t\tlang: lang,\n\t\t\tcode: code,\n\t\t\tisExam: Meteor.getValue(Problems, problemId, 'isExam')\n\t\t});\n\n\t\tif (Meteor.isServer) {\n\t\t\tMeteor.call('Submissions.createDir', submissionId);\n\t\t}\n\t},\n\n\t'Submissions.remove'(filter) {\n\t\tif (!Meteor.isAdmin()) return;\n\t\tSubmissions.find(filter).forEach(submission => {\n\t\t\tMeteor.call('SubmissionResults.remove', {\n\t\t\t\tsubmissionId: submission._id\n\t\t\t});\n\n\t\t\tif (Meteor.isServer) {\n\t\t\t\tMeteor.call('Submissions.removeDir', submission._id);\n\t\t\t}\n\t\t});\n\t\tSubmissions.remove(filter);\n\t},\n\n\t'Submissions.update'(id, option) {\n\t\tif (!Meteor.isAdmin()) return;\n\t\tSubmissions.update({\n\t\t\t_id: id\n\t\t}, {\n\t\t\t$set: option\n\t\t});\n\n\t\tif (Meteor.isServer) {\n\t\t\tif (option.lang || option.code) Meteor.call('Submissions.createDir', id);\n\t\t}\n\t}\n\n});\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"utility.js\":function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                           //\n// imports/api/utility.js                                                                    //\n//                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                             //\nMeteor.getValue = function (collection, id, field) {\n\tconst doc = collection.findOne({\n\t\t_id: id\n\t}, {\n\t\tfields: {\n\t\t\t[field]: 1\n\t\t}\n\t});\n\treturn doc ? doc[field] : null;\n};\n\nMeteor.isAdmin = function () {\n\tconst user = Meteor.user();\n\treturn user && user.isAdmin;\n};\n\nMeteor.isOwner = function (id) {\n\tconst user = Meteor.user();\n\treturn user && user._id == id;\n};\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"server\":{\"main.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                           //\n// server/main.js                                                                            //\n//                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                             //\nmodule.watch(require(\"/imports/api/_problem.js\"));\nmodule.watch(require(\"/imports/api/_student.js\"));\nmodule.watch(require(\"/imports/api/_submission.js\"));\nmodule.watch(require(\"/imports/api/problem.js\"));\nmodule.watch(require(\"/imports/api/student.js\"));\nmodule.watch(require(\"/imports/api/submission.js\"));\nlet path;\nmodule.watch(require(\"path\"), {\n    default(v) {\n        path = v;\n    }\n\n}, 0);\nMeteor.rootPath = path.resolve('.').split(path.sep + '.meteor')[0] + '/';\nMeteor.dataPath = Meteor.rootPath + '../DSCA_Data/'; /*Accounts.createUser({\n                                                     \tusername: 'R04922075',\n                                                     \tfullname: 'kcku',\n                                                     \tpassword: '123456',\n                                                     \temail: 'r04922075@csie.ntu.edu.tw',\n                                                     \tyear: 2016,\n                                                     \tisAdmin: true\n                                                     });#include <cstdio>\n                                                     int main() {\n                                                         char line[100];\n                                                         scanf(\"%s\", line);\n                                                         printf(\"%s\", line);\n                                                     }\n                                                     #include <cstdio>\n                                                     int main() {\n                                                         char line[100];\n                                                         gets(line);\n                                                         puts(line);\n                                                     }*/\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\nrequire(\"./server/main.js\");","servePath":"/app.js","sourceMap":{"version":3,"sources":["imports/api/_problem.js","imports/api/_student.js","imports/api/problem.js","imports/api/student.js","imports/api/submission.js","imports/api/utility.js","server/main.js"],"names":["ProblemTests","module","watch","require","v","ps","default","fs","Meteor","methods","id","problemTest","findOne","_id","dirpath","dataPath","wrapAsync","mkdir","call","input","output","field","content","filepath","writeFile","exec","Accounts","onCreateUser","option","user","_","extend","pick","export","Problems","Mongo","Collection","isServer","publish","filter","fields","title","isExam","isPublic","isAdmin","find","problemId","getValue","insert","description","inputFormat","outputFormat","hint","forEach","problem","remove","update","$set","problemTestId","timeLimit","memoryLimit","score","Students","Random","users","username","fullname","emails","year","createUser","password","email","Date","getFullYear","student","studentId","setUsername","setPassword","addEmail","isEmpty","oldPassword","newPassword","changePassword","Submissions","SubmissionResults","$or","createdAt","status","isOwner","code","error","submissionId","$in","push","lang","getTime","submission","collection","doc","path","rootPath","resolve","split","sep"],"mappings":"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","file":"/app.js","sourcesContent":["import { ProblemTests } from './problem.js';\nimport ps from 'child_process';\nimport fs from 'fs';\n\nMeteor.methods({\n\t'ProblemTests.createDir'(id) {\n\t\tconst problemTest = ProblemTests.findOne({ _id: id });\n\t\tconst dirpath = Meteor.dataPath+id;\n\n\t\tMeteor.wrapAsync(fs.mkdir)(dirpath);\n\t\tMeteor.call('ProblemTests.writeFile', id, 'input', problemTest.input);\n\t\tMeteor.call('ProblemTests.writeFile', id, 'output', problemTest.output);\n\t},\n\t'ProblemTests.writeFile'(id, field, content) {\n\t\tconst filepath = Meteor.dataPath+id+'/'+field;\n\t\tMeteor.wrapAsync(fs.writeFile)(filepath, content);\n\t},\n\t'ProblemTests.removeDir'(id) {\t\n\t\tconst dirpath = Meteor.dataPath+id;\n\t\tMeteor.wrapAsync(ps.exec)('rm -rf '+dirpath);\n\t}\n});","Accounts.onCreateUser((option, user) => {\n\treturn _.extend(user, _.pick(option, 'fullname', 'year', 'isAdmin'));\n});","import './utility.js';\r\n\r\nexport const Problems = new Mongo.Collection('Problems');\r\nexport const ProblemTests = new Mongo.Collection('ProblemTests');\r\n\r\nif (Meteor.isServer) {\r\n\tMeteor.publish('Problems.findAll', function() {\r\n\t\tconst filter = {};\r\n\t\tconst option = { fields: { _id: 1, title: 1, isExam: 1, isPublic: 1 }};\r\n\r\n\t\tif (!Meteor.isAdmin()) {\r\n\t\t\tfilter.isPublic = true;\r\n\t\t}\r\n\t\treturn Problems.find(filter, option);\r\n\t});\r\n\tMeteor.publish('Problems.findOne', function(id) {\r\n\t\tconst filter = { _id: id };\r\n\t\tconst option = {};\r\n\r\n\t\tif (!Meteor.isAdmin()) {\r\n\t\t\tfilter.isPublic = true;\r\n\t\t}\r\n\t\treturn Problems.find(filter, option);\r\n\t});\r\n\tMeteor.publish('ProblemTests.findAllByProblem', function(problemId) {\r\n\t\tconst filter = { problemId: problemId };\r\n\t\tconst option = {};\r\n\r\n\t\tif (!Meteor.isAdmin()) {\r\n\t\t\tif (!Meteor.getValue(Problems, problemId, 'isPublic')) {\r\n\t\t\t\tfilter.problemId = null;\r\n\t\t\t}\r\n\t\t\tfilter.isPublic = true;\r\n\t\t}\r\n\t\treturn ProblemTests.find(filter, option);\r\n\t});\r\n}\r\n\r\nMeteor.methods({\r\n\t'Problems.insert'() {\r\n\t\tif (!Meteor.isAdmin()) return;\r\n\r\n\t\tProblems.insert({\r\n\t\t\ttitle: 'Sample Title',\r\n\t\t\tdescription: 'Sample Description',\r\n\t\t\tinputFormat: 'Sample Input Format',\r\n\t\t\toutputFormat: 'Sample Output Format',\r\n\t\t\thint: 'Sample Hint',\r\n\t\t\tisExam: false,\r\n\t\t\tisPublic: false\r\n\t\t});\r\n\t},\r\n\t'Problems.remove'(filter) {\r\n\t\tif (!Meteor.isAdmin()) return;\r\n\r\n\t\tProblems.find(filter).forEach((problem) => {\r\n\t\t\tMeteor.call('ProblemTests.remove', { problemId: problem._id });\r\n\t\t\tMeteor.call('Submissions.remove', { problemId: problem._id });\t\r\n\t\t});\r\n\t\tProblems.remove(filter);\r\n\t},\r\n\t'Problems.update'(id, option) {\r\n\t\tif (!Meteor.isAdmin()) return;\r\n\r\n\t\tProblems.update({ _id: id }, { $set: option });\r\n\t},\r\n\t'ProblemTests.insert'(problemId) {\r\n\t\tif (!Meteor.isAdmin()) return;\r\n\r\n\t\tconst problemTestId = ProblemTests.insert({\r\n\t\t\tproblemId: problemId,\r\n\t\t\tinput: 'Sample Input',\r\n\t\t\toutput: 'Sample Output',\r\n\t\t\ttimeLimit: 1000,\r\n\t\t\tmemoryLimit: 64000,\r\n\t\t\tscore: 5,\r\n\t\t\tisPublic: false\r\n\t\t});\r\n\t\tif (Meteor.isServer) {\r\n\t\t\tMeteor.call('ProblemTests.createDir', problemTestId);\r\n\t\t}\r\n\t},\r\n\t'ProblemTests.remove'(filter) {\r\n\t\tif (!Meteor.isAdmin()) return;\r\n\r\n\t\tProblemTests.find(filter).forEach((problemTest) => {\r\n\t\t\tMeteor.call('SubmissionResults.remove', { problemTestId: problemTest._id });\r\n\r\n\t\t\tif (Meteor.isServer) {\r\n\t\t\t\tMeteor.call('ProblemTests.removeDir', problemTest._id);\r\n\t\t\t}\r\n\t\t});\r\n\t\tProblemTests.remove(filter);\r\n\t},\r\n\t'ProblemTests.update'(id, option) {\r\n\t\tif (!Meteor.isAdmin()) return;\r\n\r\n\t\tProblemTests.update({ _id: id }, { $set: option });\r\n\r\n\t\tif (Meteor.isServer) {\r\n\t\t\tif (option.input) Meteor.call('ProblemTests.writeFile', id, 'input', option.input);\r\n\t\t\tif (option.output) Meteor.call('ProblemTests.writeFile', id, 'output', option.output);\r\n\t\t}\r\n\t}\r\n});","import { Random } from 'meteor/random';\nimport './utility.js';\n\nexport const Students = Meteor.users;\n\nif (Meteor.isServer) {\n\tMeteor.publish('Students.findAll', function() {\n\t\tconst filter = {};\n\t\tconst option = { fields: { _id: 1, username: 1, isAdmin: 1 }};\n\n\t\treturn Students.find(filter, option);\n\t});\n\tMeteor.publish('Students.findOne', function(id) {\n\t\tconst filter = { _id: id };\n\t\tconst option = { fields: { _id: 1, username: 1, fullname: 1, emails: 1, year: 1, isAdmin: 1 }};\n\n\t\treturn Students.find(filter, option);\n\t});\n}\n\nMeteor.methods({\n\t'Students.insert'() {\n\t\tif (!Meteor.isAdmin()) return;\n\n\t\tAccounts.createUser({\n\t\t\tusername: 'Sample Username',\n\t\t\tfullname: 'Sample Fullname',\n\t\t\tpassword: Random.id(),\n\t\t\temail: 'dsca@inrg.csie.ntu.edu.tw',\t\n\t\t\tyear: new Date().getFullYear(),\n\t\t\tisAdmin: false\n\t\t});\n\t},\n\t'Students.remove'(filter) {\n\t\tif (!Meteor.isAdmin()) return;\n\n\t\tStudents.find(filter).forEach((student) => {\n\t\t\tMeteor.call('Submissions.remove', { studentId: student._id });\n\t\t});\n\t\tStudents.remove(filter);\n\t},\n\t'Students.update'(id, option) {\n\t\tif (!Meteor.isAdmin() || !Meteor.isServer) return;\n\n\t\tif (option.username) {\n\t\t\tAccounts.setUsername(id, option.username);\n\t\t\tdelete option.username;\n\t\t}\n\t\tif (option.password) {\n\t\t\tAccounts.setPassword(id, option.password);\n\t\t\tdelete option.password;\n\t\t}\n\t\tif (option.email) {\n\t\t\tStudents.update({ _id: id }, { $set: { emails: [] }});\n\t\t\tAccounts.addEmail(id, option.email);\n\t\t\tdelete option.email;\n\t\t}\n\t\tif (!_.isEmpty(option)) {\n\t\t\tStudents.update({ _id: id }, { $set: option });\n\t\t}\n\t},\n\t'Students.changePassword'(oldPassword, newPassword) {\n\t\tif (!Meteor.isServer) return;\n\n\t\tAccounts.changePassword(oldPassword, newPassword);\n\t}\n});","import { Problems, ProblemTests } from './problem.js';\r\nimport './utility.js';\r\n\r\nexport const Submissions = new Mongo.Collection('Submissions');\r\nexport const SubmissionResults = new Mongo.Collection('SubmissionResults');\r\n\r\nif (Meteor.isServer) {\r\n\tMeteor.publish('Submissions.findAllByFilter', function(problemId, studentId) {\r\n\t\tconst filter = { $or: [{ problemId: problemId }, { studentId, studentId }]};\r\n\t\tconst option = { fields: { _id: 1, problemId: 1, studentId: 1, createdAt: 1, status: 1, isExam: 1 }};\r\n\r\n\t\treturn Submissions.find(filter, option);\r\n\t});\r\n\tMeteor.publish('Submissions.findOne', function(id) {\r\n\t\tconst filter = { _id: id };\r\n\t\tconst option = {};\r\n\r\n\t\tif (!Meteor.isAdmin() && !Meteor.isOwner(Meteor.getValue(Submissions, id, 'studentId'))) {\r\n\t\t\toption.fields = { code: 0, error: 0 };\r\n\t\t}\r\n\t\treturn Submissions.find(filter, option);\r\n\t});\r\n\tMeteor.publish('SubmissionResults.findAllBySubmission', function(submissionId) {\r\n\t\tconst filter = { submissionId: submissionId };\r\n\t\tconst option = {};\r\n\r\n\t\tif (!Meteor.getValue(Submissions, submissionId, 'isExam')) {\r\n\t\t\tconst problemId = Meteor.getValue(Submissions, submissionId, 'problemId');\r\n\t\t\tfilter.problemTestId = { $in: [] };\r\n\t\t\t\r\n\t\t\tProblemTests.find({ problemId: problemId, isPublic: 1 }).forEach((problemTest) => {\r\n\t\t\t\tfilter.problemTestId.$in.push(problemTest._id);\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn SubmissionResults.find(filter, option);\r\n\t});\r\n}\r\n\r\nMeteor.methods({\r\n\t'Submissions.insert'(problemId, studentId, lang, code) {\r\n\t\tif (!Meteor.isOwner(studentId) || !Meteor.getValue(Problems, problemId, '_id')) return;\r\n\t\t\r\n\t\tconst submissionId = Submissions.insert({\r\n\t\t\tproblemId: problemId,\r\n\t\t\tstudentId: studentId,\r\n\t\t\tcreatedAt: new Date().getTime(),\r\n\t\t\tstatus: 'Pending',\r\n\t\t\tlang: lang,\r\n\t\t\tcode: code,\r\n\t\t\tisExam: Meteor.getValue(Problems, problemId, 'isExam')\r\n\t\t});\r\n\t\tif (Meteor.isServer) {\r\n\t\t\tMeteor.call('Submissions.createDir', submissionId);\r\n\t\t}\r\n\t},\r\n\t'Submissions.remove'(filter) {\r\n\t\tif (!Meteor.isAdmin()) return;\r\n\r\n\t\tSubmissions.find(filter).forEach((submission) => {\r\n\t\t\tMeteor.call('SubmissionResults.remove', { submissionId: submission._id });\r\n\r\n\t\t\tif (Meteor.isServer) {\r\n\t\t\t\tMeteor.call('Submissions.removeDir', submission._id);\r\n\t\t\t}\r\n\t\t});\r\n\t\tSubmissions.remove(filter);\r\n\t},\r\n\t'Submissions.update'(id, option) {\r\n\t\tif (!Meteor.isAdmin()) return;\r\n\r\n\t\tSubmissions.update({ _id: id }, { $set: option });\r\n\r\n\t\tif (Meteor.isServer) {\r\n\t\t\tif (option.lang || option.code)\r\n\t\t\t\tMeteor.call('Submissions.createDir', id);\r\n\t\t}\r\n\t}\r\n});","Meteor.getValue = function(collection, id, field) {\n\tconst doc = collection.findOne({ _id: id }, { fields: { [field]: 1 }});\n\treturn doc ? doc[field] : null;\n}\n\nMeteor.isAdmin = function() {\n\tconst user = Meteor.user();\n\treturn user && user.isAdmin;\n}\n\nMeteor.isOwner = function(id) {\n\tconst user = Meteor.user();\n\treturn user && user._id == id;\n}","import '/imports/api/_problem.js';\nimport '/imports/api/_student.js';\nimport '/imports/api/_submission.js';\nimport '/imports/api/problem.js';\nimport '/imports/api/student.js';\nimport '/imports/api/submission.js';\nimport path from 'path';\n\nMeteor.rootPath = path.resolve('.').split(path.sep + '.meteor')[0]+'/';\nMeteor.dataPath = Meteor.rootPath+'../DSCA_Data/';\n\n/*Accounts.createUser({\n\tusername: 'R04922075',\n\tfullname: 'kcku',\n\tpassword: '123456',\n\temail: 'r04922075@csie.ntu.edu.tw',\n\tyear: 2016,\n\tisAdmin: true\n});#include <cstdio>\nint main() {\n    char line[100];\n    scanf(\"%s\", line);\n    printf(\"%s\", line);\n}\n#include <cstdio>\nint main() {\n    char line[100];\n    gets(line);\n    puts(line);\n}*/"]}}]