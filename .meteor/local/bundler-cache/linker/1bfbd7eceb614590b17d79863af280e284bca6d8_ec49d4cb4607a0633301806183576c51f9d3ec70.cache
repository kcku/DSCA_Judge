[{"type":"js","data":"/* Imports for global scope */\n\nMongoInternals = Package.mongo.MongoInternals;\nMongo = Package.mongo.Mongo;\nReactiveVar = Package['reactive-var'].ReactiveVar;\nTracker = Package.tracker.Tracker;\nDeps = Package.tracker.Deps;\nECMAScript = Package.ecmascript.ECMAScript;\nMeteorMathJax = Package['mrt:mathjax'].MeteorMathJax;\nMeteor = Package.meteor.Meteor;\nglobal = Package.meteor.global;\nmeteorEnv = Package.meteor.meteorEnv;\nWebApp = Package.webapp.WebApp;\nWebAppInternals = Package.webapp.WebAppInternals;\nmain = Package.webapp.main;\n_ = Package.underscore._;\nDDP = Package['ddp-client'].DDP;\nDDPServer = Package['ddp-server'].DDPServer;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nBlaze = Package.ui.Blaze;\nUI = Package.ui.UI;\nHandlebars = Package.ui.Handlebars;\nSpacebars = Package.spacebars.Spacebars;\nmeteorInstall = Package.modules.meteorInstall;\nmeteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nPromise = Package.promise.Promise;\nAccounts = Package['accounts-base'].Accounts;\nAutoupdate = Package.autoupdate.Autoupdate;\nHTML = Package.htmljs.HTML;\n\n","servePath":"/packages/global-imports.js"},{"type":"js","data":"var require = meteorInstall({\"imports\":{\"api\":{\"_problem.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                     //\n// imports/api/_problem.js                                                                             //\n//                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                       //\nlet ProblemTests;\nmodule.watch(require(\"./problem.js\"), {\n\tProblemTests(v) {\n\t\tProblemTests = v;\n\t}\n\n}, 0);\nlet ps;\nmodule.watch(require(\"child_process\"), {\n\tdefault(v) {\n\t\tps = v;\n\t}\n\n}, 1);\nlet fs;\nmodule.watch(require(\"fs\"), {\n\tdefault(v) {\n\t\tfs = v;\n\t}\n\n}, 2);\nMeteor.methods({\n\t'ProblemTests.createDir'(id) {\n\t\tconst problemTest = ProblemTests.findOne({\n\t\t\t_id: id\n\t\t});\n\t\tconst dirpath = Meteor.dataPath + id;\n\t\tMeteor.wrapAsync(fs.mkdir)(dirpath);\n\t\tMeteor.call('ProblemTests.writeFile', id, 'input', problemTest.input);\n\t\tMeteor.call('ProblemTests.writeFile', id, 'output', problemTest.output);\n\t},\n\n\t'ProblemTests.writeFile'(id, field, content) {\n\t\tconst filepath = Meteor.dataPath + id + '/' + field;\n\t\tMeteor.wrapAsync(fs.writeFile)(filepath, content);\n\t},\n\n\t'ProblemTests.removeDir'(id) {\n\t\tconst dirpath = Meteor.dataPath + id;\n\t\tMeteor.wrapAsync(ps.exec)('rm -rf ' + dirpath);\n\t}\n\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_student.js\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                     //\n// imports/api/_student.js                                                                             //\n//                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                       //\nAccounts.onCreateUser((option, user) => {\n\treturn _.extend(user, _.pick(option, 'fullname', 'year', 'isAdmin'));\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_submission.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                     //\n// imports/api/_submission.js                                                                          //\n//                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                       //\nlet Submissions, SubmissionResults;\nmodule.watch(require(\"./submission.js\"), {\n\tSubmissions(v) {\n\t\tSubmissions = v;\n\t},\n\n\tSubmissionResults(v) {\n\t\tSubmissionResults = v;\n\t}\n\n}, 0);\nlet ProblemTests;\nmodule.watch(require(\"./problem.js\"), {\n\tProblemTests(v) {\n\t\tProblemTests = v;\n\t}\n\n}, 1);\nlet ps;\nmodule.watch(require(\"child_process\"), {\n\tdefault(v) {\n\t\tps = v;\n\t}\n\n}, 2);\nlet fs;\nmodule.watch(require(\"fs\"), {\n\tdefault(v) {\n\t\tfs = v;\n\t}\n\n}, 3);\nMeteor.methods({\n\t'Submissions.createDir'(id) {\n\t\tSubmissions.update({\n\t\t\t_id: id\n\t\t}, {\n\t\t\t$set: {\n\t\t\t\tstatus: 'Initializing'\n\t\t\t}\n\t\t});\n\t\tconst submission = Submissions.findOne({\n\t\t\t_id: id\n\t\t});\n\t\tconst dirpath = Meteor.dataPath + id;\n\t\tconst filepath = Meteor.dataPath + id + '/code.' + submission.lang;\n\t\tconst execpath = Meteor.dataPath + id + '/exec';\n\t\tMeteor.wrapAsync(fs.mkdir)(dirpath);\n\t\tMeteor.wrapAsync(fs.writeFile)(filepath, submission.code);\n\t\tSubmissions.update({\n\t\t\t_id: id\n\t\t}, {\n\t\t\t$set: {\n\t\t\t\tstatus: 'Compiling'\n\t\t\t}\n\t\t});\n\t\tlet compile = null;\n\n\t\tif (submission.lang == 'c') {\n\t\t\tcompile = Meteor.wrapAsync(ps.spawn)('gcc', [filepath, '-o' + execpath, '-O2', '-std=c99', '-lm']);\n\t\t} else if (submission.lang == 'cpp') {\n\t\t\tcompile = Meteor.wrapAsync(ps.spawn)('g++', [filepath, '-o' + execpath, '-O2', '-std=c++11'], {});\n\t\t}\n\n\t\tif (!compile) {\n\t\t\tSubmissions.update({\n\t\t\t\t_id: id\n\t\t\t}, {\n\t\t\t\t$set: {\n\t\t\t\t\tstatus: 'Language Error'\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\n\t\tif (compile.status) {\n\t\t\tSubmissions.update({\n\t\t\t\t_id: id\n\t\t\t}, {\n\t\t\t\t$set: {\n\t\t\t\t\tstatus: 'Compile Error'\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\n\t\tSubmissions.update({\n\t\t\t_id: id\n\t\t}, {\n\t\t\t$set: {\n\t\t\t\tstatus: 'Running'\n\t\t\t}\n\t\t});\n\t\tProblemTests.find({\n\t\t\tproblemId: submission.problemId\n\t\t}).forEach(problemTest => {\n\t\t\tMeteor.call('SubmissionResults.insert', problemTest._id, id);\n\t\t});\n\t\tSubmissions.update({\n\t\t\t_id: id\n\t\t}, {\n\t\t\t$set: {\n\t\t\t\tstatus: 'Finished'\n\t\t\t}\n\t\t});\n\t},\n\n\t'Submissions.removeDir'(id) {\n\t\tconst dirpath = Meteor.dataPath + id;\n\t\tMeteor.wrapAsync(ps.exec)('rm -rf ' + dirpath);\n\t},\n\n\t'SubmissionResults.createDir'(id) {\n\t\tSubmissionResults.update({\n\t\t\t_id: id\n\t\t}, {\n\t\t\t$set: {\n\t\t\t\tstatus: 'Initializing'\n\t\t\t}\n\t\t});\n\t\tconst submissionResult = SubmissionResults.findOne({\n\t\t\t_id: id\n\t\t});\n\t\tconst problemTest = ProblemTests.findOne({\n\t\t\t_id: submissionResult.problemTestId\n\t\t}, {\n\t\t\tfields: {\n\t\t\t\ttimeLimit: 1,\n\t\t\t\tmemoryLimit: 1\n\t\t\t}\n\t\t});\n\t\tconst execpath = Meteor.dataPath + submissionResult.submissionId + '/exec';\n\t\tconst inpath = Meteor.dataPath + submissionResult.problemTestId + '/input';\n\t\tconst anspath = Meteor.dataPath + submissionResult.problemTestId + '/output';\n\t\tconst dirpath = Meteor.dataPath + id;\n\t\tconst outpath = Meteor.dataPath + id + '/output';\n\t\tconst respath = Meteor.dataPath + id + '/result';\n\t\tconst execcmd = Meteor.rootPath + 'sandbox/runner ' + problemTest.timeLimit + ' ' + problemTest.memoryLimit + ' ' + execpath + ' < ' + inpath + ' > ' + outpath + ' 2>' + respath;\n\t\tMeteor.wrapAsync(fs.mkdir)(dirpath);\n\t\tSubmissionResults.update({\n\t\t\t_id: id\n\t\t}, {\n\t\t\t$set: {\n\t\t\t\tstatus: 'Running'\n\t\t\t}\n\t\t});\n\t\tMeteor.wrapAsync(ps.exec)(execcmd, {\n\t\t\tstdio: 'inherit'\n\t\t});\n\t\tSubmissionResults.update({\n\t\t\t_id: id\n\t\t}, {\n\t\t\t$set: {\n\t\t\t\tstatus: 'Judging'\n\t\t\t}\n\t\t});\n\t\tconst result = JSON.parse(Meteor.wrapAsync(fs.readFile)(respath));\n\n\t\tif (result.status == 'OK') {\n\t\t\tconst diff = Meteor.wrapAsync(ps.spawn)('diff', ['-w', outpath, anspath]);\n\t\t\tresult.status = diff.status ? 'Wrong Answer' : 'Accepted';\n\t\t}\n\n\t\tSubmissionResults.update({\n\t\t\t_id: id\n\t\t}, {\n\t\t\t$set: result\n\t\t});\n\t},\n\n\t'SubmissionResults.removeDir'(id) {\n\t\tconst dirpath = Meteor.dataPath + id;\n\t\tMeteor.wrapAsync(ps.exec)('rm -rf ' + dirpath);\n\t}\n\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"problem.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                     //\n// imports/api/problem.js                                                                              //\n//                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                       //\nmodule.export({\n\tProblems: () => Problems,\n\tProblemTests: () => ProblemTests\n});\nmodule.watch(require(\"./utility.js\"));\nconst Problems = new Mongo.Collection('Problems');\nconst ProblemTests = new Mongo.Collection('ProblemTests');\n\nif (Meteor.isServer) {\n\tMeteor.publish('Problems.findAll', function () {\n\t\tconst filter = {};\n\t\tconst option = {\n\t\t\tfields: {\n\t\t\t\t_id: 1,\n\t\t\t\ttitle: 1,\n\t\t\t\tisExam: 1,\n\t\t\t\tisPublic: 1\n\t\t\t}\n\t\t};\n\n\t\tif (!Meteor.isAdmin()) {\n\t\t\tfilter.isPublic = true;\n\t\t}\n\n\t\treturn Problems.find(filter, option);\n\t});\n\tMeteor.publish('Problems.findOne', function (id) {\n\t\tconst filter = {\n\t\t\t_id: id\n\t\t};\n\t\tconst option = {};\n\n\t\tif (!Meteor.isAdmin()) {\n\t\t\tfilter.isPublic = true;\n\t\t}\n\n\t\treturn Problems.find(filter, option);\n\t});\n\tMeteor.publish('ProblemTests.findAllByProblem', function (problemId) {\n\t\tconst filter = {\n\t\t\tproblemId: problemId\n\t\t};\n\t\tconst option = {};\n\n\t\tif (!Meteor.isAdmin()) {\n\t\t\tif (!Meteor.getValue(Problems, problemId, 'isPublic')) {\n\t\t\t\tfilter.problemId = null;\n\t\t\t}\n\n\t\t\tfilter.isPublic = true;\n\t\t}\n\n\t\treturn ProblemTests.find(filter, option);\n\t});\n}\n\nMeteor.methods({\n\t'Problems.insert'() {\n\t\tif (!Meteor.isAdmin()) return;\n\t\tProblems.insert({\n\t\t\ttitle: 'Sample Title',\n\t\t\tdescription: 'Sample Description',\n\t\t\tinputFormat: 'Sample Input Format',\n\t\t\toutputFormat: 'Sample Output Format',\n\t\t\thint: 'Sample Hint',\n\t\t\tisExam: false,\n\t\t\tisPublic: false\n\t\t});\n\t},\n\n\t'Problems.remove'(filter) {\n\t\tif (!Meteor.isAdmin()) return;\n\t\tProblems.find(filter).forEach(problem => {\n\t\t\tMeteor.call('ProblemTests.remove', {\n\t\t\t\tproblemId: problem._id\n\t\t\t});\n\t\t\tMeteor.call('Submissions.remove', {\n\t\t\t\tproblemId: problem._id\n\t\t\t});\n\t\t});\n\t\tProblems.remove(filter);\n\t},\n\n\t'Problems.update'(id, option) {\n\t\tif (!Meteor.isAdmin()) return;\n\t\tProblems.update({\n\t\t\t_id: id\n\t\t}, {\n\t\t\t$set: option\n\t\t});\n\t},\n\n\t'ProblemTests.insert'(problemId) {\n\t\tif (!Meteor.isAdmin()) return;\n\t\tconst problemTestId = ProblemTests.insert({\n\t\t\tproblemId: problemId,\n\t\t\tinput: 'Sample Input',\n\t\t\toutput: 'Sample Output',\n\t\t\ttimeLimit: 1000,\n\t\t\tmemoryLimit: 64000,\n\t\t\tscore: 5,\n\t\t\tisPublic: false\n\t\t});\n\n\t\tif (Meteor.isServer) {\n\t\t\tMeteor.call('ProblemTests.createDir', problemTestId);\n\t\t}\n\t},\n\n\t'ProblemTests.remove'(filter) {\n\t\tif (!Meteor.isAdmin()) return;\n\t\tProblemTests.find(filter).forEach(problemTest => {\n\t\t\tMeteor.call('SubmissionResults.remove', {\n\t\t\t\tproblemTestId: problemTest._id\n\t\t\t});\n\n\t\t\tif (Meteor.isServer) {\n\t\t\t\tMeteor.call('ProblemTests.removeDir', problemTest._id);\n\t\t\t}\n\t\t});\n\t\tProblemTests.remove(filter);\n\t},\n\n\t'ProblemTests.update'(id, option) {\n\t\tif (!Meteor.isAdmin()) return;\n\t\tProblemTests.update({\n\t\t\t_id: id\n\t\t}, {\n\t\t\t$set: option\n\t\t});\n\n\t\tif (Meteor.isServer) {\n\t\t\tif (option.input) Meteor.call('ProblemTests.writeFile', id, 'input', option.input);\n\t\t\tif (option.output) Meteor.call('ProblemTests.writeFile', id, 'output', option.output);\n\t\t}\n\t}\n\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"student.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                     //\n// imports/api/student.js                                                                              //\n//                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                       //\nmodule.export({\n\tStudents: () => Students\n});\nlet Random;\nmodule.watch(require(\"meteor/random\"), {\n\tRandom(v) {\n\t\tRandom = v;\n\t}\n\n}, 0);\nmodule.watch(require(\"./utility.js\"));\nconst Students = Meteor.users;\n\nif (Meteor.isServer) {\n\tMeteor.publish('Students.findAll', function () {\n\t\tconst filter = {};\n\t\tconst option = {\n\t\t\tfields: {\n\t\t\t\t_id: 1,\n\t\t\t\tusername: 1,\n\t\t\t\tisAdmin: 1\n\t\t\t}\n\t\t};\n\t\treturn Students.find(filter, option);\n\t});\n\tMeteor.publish('Students.findOne', function (id) {\n\t\tconst filter = {\n\t\t\t_id: id\n\t\t};\n\t\tconst option = {\n\t\t\tfields: {\n\t\t\t\t_id: 1,\n\t\t\t\tusername: 1,\n\t\t\t\tfullname: 1,\n\t\t\t\temails: 1,\n\t\t\t\tyear: 1,\n\t\t\t\tisAdmin: 1\n\t\t\t}\n\t\t};\n\t\treturn Students.find(filter, option);\n\t});\n}\n\nMeteor.methods({\n\t'Students.insert'() {\n\t\tif (!Meteor.isAdmin()) return;\n\t\tAccounts.createUser({\n\t\t\tusername: 'Sample Username',\n\t\t\tfullname: 'Sample Fullname',\n\t\t\tpassword: Random.id(),\n\t\t\temail: 'dsca@inrg.csie.ntu.edu.tw',\n\t\t\tyear: new Date().getFullYear(),\n\t\t\tisAdmin: false\n\t\t});\n\t},\n\n\t'Students.remove'(filter) {\n\t\tif (!Meteor.isAdmin()) return;\n\t\tStudents.find(filter).forEach(student => {\n\t\t\tMeteor.call('Submissions.remove', {\n\t\t\t\tstudentId: student._id\n\t\t\t});\n\t\t});\n\t\tStudents.remove(filter);\n\t},\n\n\t'Students.update'(id, option) {\n\t\tif (!Meteor.isAdmin() || !Meteor.isServer) return;\n\n\t\tif (option.username) {\n\t\t\tAccounts.setUsername(id, option.username);\n\t\t\tdelete option.username;\n\t\t}\n\n\t\tif (option.password) {\n\t\t\tAccounts.setPassword(id, option.password);\n\t\t\tdelete option.password;\n\t\t}\n\n\t\tif (option.email) {\n\t\t\tStudents.update({\n\t\t\t\t_id: id\n\t\t\t}, {\n\t\t\t\t$set: {\n\t\t\t\t\temails: []\n\t\t\t\t}\n\t\t\t});\n\t\t\tAccounts.addEmail(id, option.email);\n\t\t\tdelete option.email;\n\t\t}\n\n\t\tif (!_.isEmpty(option)) {\n\t\t\tStudents.update({\n\t\t\t\t_id: id\n\t\t\t}, {\n\t\t\t\t$set: option\n\t\t\t});\n\t\t}\n\t},\n\n\t'Students.changePassword'(oldPassword, newPassword) {\n\t\tif (!Meteor.isServer) return;\n\t\tAccounts.changePassword(oldPassword, newPassword);\n\t}\n\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"submission.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                     //\n// imports/api/submission.js                                                                           //\n//                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                       //\nmodule.export({\n\tSubmissions: () => Submissions,\n\tSubmissionResults: () => SubmissionResults\n});\nlet Problems, ProblemTests;\nmodule.watch(require(\"./problem.js\"), {\n\tProblems(v) {\n\t\tProblems = v;\n\t},\n\n\tProblemTests(v) {\n\t\tProblemTests = v;\n\t}\n\n}, 0);\nmodule.watch(require(\"./utility.js\"));\nconst Submissions = new Mongo.Collection('Submissions');\nconst SubmissionResults = new Mongo.Collection('SubmissionResults');\n\nif (Meteor.isServer) {\n\tMeteor.publish('Submissions.findAllByFilter', function (filter) {\n\t\tconst option = {\n\t\t\tfields: {\n\t\t\t\t_id: 1,\n\t\t\t\tproblemId: 1,\n\t\t\t\tstudentId: 1,\n\t\t\t\tcreatedAt: 1,\n\t\t\t\tstatus: 1,\n\t\t\t\tisExam: 1\n\t\t\t}\n\t\t};\n\t\treturn Submissions.find(filter, option);\n\t});\n\tMeteor.publish('Submissions.findOne', function (id) {\n\t\tconst filter = {\n\t\t\t_id: id\n\t\t};\n\t\tconst option = {};\n\n\t\tif (!Meteor.isAdmin() && !Meteor.isOwner(Meteor.getValue(Submissions, id, 'studentId'))) {\n\t\t\toption.fields = {\n\t\t\t\tcode: 0\n\t\t\t};\n\t\t}\n\n\t\treturn Submissions.find(filter, option);\n\t});\n\tMeteor.publish('SubmissionResults.findAllBySubmission', function (submissionId) {\n\t\tconst filter = {\n\t\t\tsubmissionId: submissionId\n\t\t};\n\t\tconst option = {};\n\n\t\tif (!Meteor.getValue(Submissions, submissionId, 'isExam')) {\n\t\t\tconst problemId = Meteor.getValue(Submissions, submissionId, 'problemId');\n\t\t\tfilter.problemTestId = {\n\t\t\t\t$in: []\n\t\t\t};\n\t\t\tProblemTests.find({\n\t\t\t\tproblemId: problemId,\n\t\t\t\tisPublic: 1\n\t\t\t}).forEach(problemTest => {\n\t\t\t\tfilter.problemTestId.$in.push(problemTest._id);\n\t\t\t});\n\t\t}\n\n\t\treturn SubmissionResults.find(filter, option);\n\t});\n}\n\nMeteor.methods({\n\t'Submissions.insert'(problemId, studentId, lang, code) {\n\t\tif (!Meteor.isOwner(studentId) || !Meteor.getValue(Problems, problemId, '_id')) return;\n\t\tconst submissionId = Submissions.insert({\n\t\t\tproblemId: problemId,\n\t\t\tstudentId: studentId,\n\t\t\tcreatedAt: new Date().getTime(),\n\t\t\tstatus: 'Pending',\n\t\t\tlang: lang,\n\t\t\tcode: code,\n\t\t\tisExam: Meteor.getValue(Problems, problemId, 'isExam')\n\t\t});\n\n\t\tif (Meteor.isServer) {\n\t\t\tMeteor.call('Submissions.createDir', submissionId);\n\t\t}\n\t},\n\n\t'Submissions.remove'(filter) {\n\t\tif (!Meteor.isAdmin()) return;\n\t\tSubmissions.find(filter).forEach(submission => {\n\t\t\tMeteor.call('SubmissionResults.remove', {\n\t\t\t\tsubmissionId: submission._id\n\t\t\t});\n\n\t\t\tif (Meteor.isServer) {\n\t\t\t\tMeteor.call('Submissions.removeDir', submission._id);\n\t\t\t}\n\t\t});\n\t\tSubmissions.remove(filter);\n\t},\n\n\t'Submissions.update'(id, option) {\n\t\tif (!Meteor.isAdmin()) return;\n\t\tSubmissions.update({\n\t\t\t_id: id\n\t\t}, {\n\t\t\t$set: option\n\t\t});\n\n\t\tif (Meteor.isServer) {\n\t\t\tif (option.lang || option.code) Meteor.call('Submissions.createDir', id);\n\t\t}\n\t},\n\n\t'SubmissionResults.insert'(problemTestId, submissionId) {\n\t\t//if (!Meteor.isAdmin()) return;\n\t\tconst submissionResultId = SubmissionResults.insert({\n\t\t\tproblemTestId: problemTestId,\n\t\t\tsubmissionId: submissionId,\n\t\t\ttimeUsed: null,\n\t\t\tmemoryUsed: null,\n\t\t\tstatus: 'Pending'\n\t\t});\n\n\t\tif (Meteor.isServer) {\n\t\t\tMeteor.call('SubmissionResults.createDir', submissionResultId);\n\t\t}\n\t},\n\n\t'SubmissionResults.remove'(filter) {\n\t\tif (!Meteor.isAdmin()) return;\n\t\tSubmissionResults.find(filter).forEach(submissionResult => {\n\t\t\tif (Meteor.isServer) {\n\t\t\t\tMeteor.call('SubmissionResults.removeDir', submissionResult._id);\n\t\t\t}\n\t\t});\n\t\tSubmissionResults.remove(filter);\n\t},\n\n\t'SubmissionResults.update'(id) {\n\t\tif (!Meteor.isAdmin()) return;\n\n\t\tif (Meteor.isServer) {\n\t\t\tMeteor.call('SubmissionResults.createDir', id);\n\t\t}\n\t}\n\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"utility.js\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                     //\n// imports/api/utility.js                                                                              //\n//                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                       //\nMeteor.getValue = function (collection, id, field) {\n\tconst doc = collection.findOne({\n\t\t_id: id\n\t}, {\n\t\tfields: {\n\t\t\t[field]: 1\n\t\t}\n\t});\n\treturn doc ? doc[field] : null;\n};\n\nMeteor.isAdmin = function () {\n\tconst user = Meteor.user();\n\treturn user && user.isAdmin;\n};\n\nMeteor.isOwner = function (id) {\n\tconst user = Meteor.user();\n\treturn user && user._id == id;\n};\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"server\":{\"main.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                     //\n// server/main.js                                                                                      //\n//                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                       //\nmodule.watch(require(\"/imports/api/_problem.js\"));\nmodule.watch(require(\"/imports/api/_student.js\"));\nmodule.watch(require(\"/imports/api/_submission.js\"));\nmodule.watch(require(\"/imports/api/problem.js\"));\nmodule.watch(require(\"/imports/api/student.js\"));\nmodule.watch(require(\"/imports/api/submission.js\"));\nlet path;\nmodule.watch(require(\"path\"), {\n\tdefault(v) {\n\t\tpath = v;\n\t}\n\n}, 0);\nMeteor.rootPath = path.resolve('.').split(path.sep + '.meteor')[0] + '/';\nMeteor.dataPath = Meteor.rootPath + '../DSCA_Data/'; /*Accounts.createUser({\n                                                     \tusername: 'R04922075',\n                                                     \tfullname: 'kcku',\n                                                     \tpassword: '123456',\n                                                     \temail: 'r04922075@csie.ntu.edu.tw',\n                                                     \tyear: 2016,\n                                                     \tisAdmin: true\n                                                     });*/\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\nrequire(\"./server/main.js\");","servePath":"/app.js","sourceMap":{"version":3,"sources":["imports/api/_problem.js","imports/api/_student.js","imports/api/_submission.js","imports/api/problem.js","imports/api/student.js","imports/api/submission.js","imports/api/utility.js","server/main.js"],"names":["ProblemTests","module","watch","require","v","ps","default","fs","Meteor","methods","id","problemTest","findOne","_id","dirpath","dataPath","wrapAsync","mkdir","call","input","output","field","content","filepath","writeFile","exec","Accounts","onCreateUser","option","user","_","extend","pick","Submissions","SubmissionResults","update","$set","status","submission","lang","execpath","code","compile","spawn","find","problemId","forEach","submissionResult","problemTestId","fields","timeLimit","memoryLimit","submissionId","inpath","anspath","outpath","respath","execcmd","rootPath","stdio","result","JSON","parse","readFile","diff","export","Problems","Mongo","Collection","isServer","publish","filter","title","isExam","isPublic","isAdmin","getValue","insert","description","inputFormat","outputFormat","hint","problem","remove","score","Students","Random","users","username","fullname","emails","year","createUser","password","email","Date","getFullYear","student","studentId","setUsername","setPassword","addEmail","isEmpty","oldPassword","newPassword","changePassword","createdAt","isOwner","$in","push","getTime","submissionResultId","timeUsed","memoryUsed","collection","doc","path","resolve","split","sep"],"mappings":"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","file":"/app.js","sourcesContent":["import { ProblemTests } from './problem.js';\nimport ps from 'child_process';\nimport fs from 'fs';\n\nMeteor.methods({\n\t'ProblemTests.createDir'(id) {\n\t\tconst problemTest = ProblemTests.findOne({ _id: id });\n\t\tconst dirpath = Meteor.dataPath+id;\n\n\t\tMeteor.wrapAsync(fs.mkdir)(dirpath);\n\t\tMeteor.call('ProblemTests.writeFile', id, 'input', problemTest.input);\n\t\tMeteor.call('ProblemTests.writeFile', id, 'output', problemTest.output);\n\t},\n\t'ProblemTests.writeFile'(id, field, content) {\n\t\tconst filepath = Meteor.dataPath+id+'/'+field;\n\t\tMeteor.wrapAsync(fs.writeFile)(filepath, content);\n\t},\n\t'ProblemTests.removeDir'(id) {\t\n\t\tconst dirpath = Meteor.dataPath+id;\n\t\tMeteor.wrapAsync(ps.exec)('rm -rf '+dirpath);\n\t}\n});","Accounts.onCreateUser((option, user) => {\n\treturn _.extend(user, _.pick(option, 'fullname', 'year', 'isAdmin'));\n});","import { Submissions, SubmissionResults } from './submission.js';\nimport { ProblemTests } from './problem.js';\nimport ps from 'child_process';\nimport fs from 'fs';\n\nMeteor.methods({\n\t'Submissions.createDir'(id) {\n\t\tSubmissions.update({ _id: id }, { $set: { status: 'Initializing' }});\n\t\t\n\t\tconst submission = Submissions.findOne({ _id: id });\n\t\tconst dirpath  = Meteor.dataPath+id;\n\t\tconst filepath = Meteor.dataPath+id+'/code.'+submission.lang;\n\t\tconst execpath = Meteor.dataPath+id+'/exec';\n\t\t\n\t\tMeteor.wrapAsync(fs.mkdir)(dirpath);\n\t\tMeteor.wrapAsync(fs.writeFile)(filepath, submission.code);\n\t\t\n\t\tSubmissions.update({ _id: id }, { $set: { status: 'Compiling' }});\n\n\t\tlet compile = null;\n\t\t\n\t\tif (submission.lang == 'c') {\n\t\t\tcompile = Meteor.wrapAsync(ps.spawn)('gcc', [filepath, '-o'+execpath, '-O2', '-std=c99', '-lm']);\n\t\t}\n\t\telse if (submission.lang == 'cpp') {\n\t\t\tcompile = Meteor.wrapAsync(ps.spawn)('g++', [filepath, '-o'+execpath, '-O2', '-std=c++11'], {});\n\t\t}\n\t\tif (!compile) {\n\t\t\tSubmissions.update({ _id: id }, { $set: { status: 'Language Error' }});\n\t\t\treturn;\n\t\t}\n\t\tif (compile.status) {\n\t\t\tSubmissions.update({ _id: id }, { $set: { status: 'Compile Error' }});\n\t\t\treturn;\n\t\t}\n\t\tSubmissions.update({ _id: id }, { $set: { status: 'Running' }});\n\n\t\tProblemTests.find({ problemId: submission.problemId }).forEach((problemTest) => {\n\t\t\tMeteor.call('SubmissionResults.insert', problemTest._id, id);\n\t\t});\n\t\tSubmissions.update({ _id: id }, { $set: { status: 'Finished' }});\n\t},\n\t'Submissions.removeDir'(id) {\n\t\tconst dirpath = Meteor.dataPath+id;\n\t\tMeteor.wrapAsync(ps.exec)('rm -rf '+dirpath);\n\t},\n\t'SubmissionResults.createDir'(id) {\n\t\tSubmissionResults.update({ _id: id }, { $set: { status: 'Initializing' }});\n\n\t\tconst submissionResult = SubmissionResults.findOne({ _id: id });\n\t\tconst problemTest = ProblemTests.findOne({ _id: submissionResult.problemTestId }, { fields: { timeLimit: 1, memoryLimit: 1 }});\n\t\tconst execpath = Meteor.dataPath+submissionResult.submissionId+'/exec';\n\t\tconst inpath  = Meteor.dataPath+submissionResult.problemTestId+'/input';\n\t\tconst anspath = Meteor.dataPath+submissionResult.problemTestId+'/output';\n\t\tconst dirpath = Meteor.dataPath+id;\n\t\tconst outpath = Meteor.dataPath+id+'/output';\n\t\tconst respath = Meteor.dataPath+id+'/result';\n\t\tconst execcmd = Meteor.rootPath+'sandbox/runner '+problemTest.timeLimit+' '+problemTest.memoryLimit+' '+execpath+' < '+inpath+' > '+outpath+' 2>'+respath;\n\n\t\tMeteor.wrapAsync(fs.mkdir)(dirpath);\n\n\t\tSubmissionResults.update({ _id: id }, { $set: { status: 'Running' }});\n\n\t\tMeteor.wrapAsync(ps.exec)(execcmd, { stdio: 'inherit' });\n\n\t\tSubmissionResults.update({ _id: id }, { $set: { status: 'Judging' }});\n\n\t\tconst result = JSON.parse(Meteor.wrapAsync(fs.readFile)(respath));\n\t\t\n\t\tif (result.status == 'OK') {\n\t\t\tconst diff = Meteor.wrapAsync(ps.spawn)('diff', ['-w', outpath, anspath]);\n            result.status = diff.status ? 'Wrong Answer' : 'Accepted';\n\t\t}\n\t\tSubmissionResults.update({ _id: id }, { $set: result });\n\t},\n\t'SubmissionResults.removeDir'(id) {\n\t\tconst dirpath = Meteor.dataPath+id;\n\t\tMeteor.wrapAsync(ps.exec)('rm -rf '+dirpath);\n\t},\n});","import './utility.js';\r\n\r\nexport const Problems = new Mongo.Collection('Problems');\r\nexport const ProblemTests = new Mongo.Collection('ProblemTests');\r\n\r\nif (Meteor.isServer) {\r\n\tMeteor.publish('Problems.findAll', function() {\r\n\t\tconst filter = {};\r\n\t\tconst option = { fields: { _id: 1, title: 1, isExam: 1, isPublic: 1 }};\r\n\r\n\t\tif (!Meteor.isAdmin()) {\r\n\t\t\tfilter.isPublic = true;\r\n\t\t}\r\n\t\treturn Problems.find(filter, option);\r\n\t});\r\n\tMeteor.publish('Problems.findOne', function(id) {\r\n\t\tconst filter = { _id: id };\r\n\t\tconst option = {};\r\n\r\n\t\tif (!Meteor.isAdmin()) {\r\n\t\t\tfilter.isPublic = true;\r\n\t\t}\r\n\t\treturn Problems.find(filter, option);\r\n\t});\r\n\tMeteor.publish('ProblemTests.findAllByProblem', function(problemId) {\r\n\t\tconst filter = { problemId: problemId };\r\n\t\tconst option = {};\r\n\r\n\t\tif (!Meteor.isAdmin()) {\r\n\t\t\tif (!Meteor.getValue(Problems, problemId, 'isPublic')) {\r\n\t\t\t\tfilter.problemId = null;\r\n\t\t\t}\r\n\t\t\tfilter.isPublic = true;\r\n\t\t}\r\n\t\treturn ProblemTests.find(filter, option);\r\n\t});\r\n}\r\n\r\nMeteor.methods({\r\n\t'Problems.insert'() {\r\n\t\tif (!Meteor.isAdmin()) return;\r\n\r\n\t\tProblems.insert({\r\n\t\t\ttitle: 'Sample Title',\r\n\t\t\tdescription: 'Sample Description',\r\n\t\t\tinputFormat: 'Sample Input Format',\r\n\t\t\toutputFormat: 'Sample Output Format',\r\n\t\t\thint: 'Sample Hint',\r\n\t\t\tisExam: false,\r\n\t\t\tisPublic: false\r\n\t\t});\r\n\t},\r\n\t'Problems.remove'(filter) {\r\n\t\tif (!Meteor.isAdmin()) return;\r\n\r\n\t\tProblems.find(filter).forEach((problem) => {\r\n\t\t\tMeteor.call('ProblemTests.remove', { problemId: problem._id });\r\n\t\t\tMeteor.call('Submissions.remove', { problemId: problem._id });\t\r\n\t\t});\r\n\t\tProblems.remove(filter);\r\n\t},\r\n\t'Problems.update'(id, option) {\r\n\t\tif (!Meteor.isAdmin()) return;\r\n\r\n\t\tProblems.update({ _id: id }, { $set: option });\r\n\t},\r\n\t'ProblemTests.insert'(problemId) {\r\n\t\tif (!Meteor.isAdmin()) return;\r\n\r\n\t\tconst problemTestId = ProblemTests.insert({\r\n\t\t\tproblemId: problemId,\r\n\t\t\tinput: 'Sample Input',\r\n\t\t\toutput: 'Sample Output',\r\n\t\t\ttimeLimit: 1000,\r\n\t\t\tmemoryLimit: 64000,\r\n\t\t\tscore: 5,\r\n\t\t\tisPublic: false\r\n\t\t});\r\n\t\tif (Meteor.isServer) {\r\n\t\t\tMeteor.call('ProblemTests.createDir', problemTestId);\r\n\t\t}\r\n\t},\r\n\t'ProblemTests.remove'(filter) {\r\n\t\tif (!Meteor.isAdmin()) return;\r\n\r\n\t\tProblemTests.find(filter).forEach((problemTest) => {\r\n\t\t\tMeteor.call('SubmissionResults.remove', { problemTestId: problemTest._id });\r\n\r\n\t\t\tif (Meteor.isServer) {\r\n\t\t\t\tMeteor.call('ProblemTests.removeDir', problemTest._id);\r\n\t\t\t}\r\n\t\t});\r\n\t\tProblemTests.remove(filter);\r\n\t},\r\n\t'ProblemTests.update'(id, option) {\r\n\t\tif (!Meteor.isAdmin()) return;\r\n\r\n\t\tProblemTests.update({ _id: id }, { $set: option });\r\n\r\n\t\tif (Meteor.isServer) {\r\n\t\t\tif (option.input) Meteor.call('ProblemTests.writeFile', id, 'input', option.input);\r\n\t\t\tif (option.output) Meteor.call('ProblemTests.writeFile', id, 'output', option.output);\r\n\t\t}\r\n\t}\r\n});","import { Random } from 'meteor/random';\nimport './utility.js';\n\nexport const Students = Meteor.users;\n\nif (Meteor.isServer) {\n\tMeteor.publish('Students.findAll', function() {\n\t\tconst filter = {};\n\t\tconst option = { fields: { _id: 1, username: 1, isAdmin: 1 }};\n\n\t\treturn Students.find(filter, option);\n\t});\n\tMeteor.publish('Students.findOne', function(id) {\n\t\tconst filter = { _id: id };\n\t\tconst option = { fields: { _id: 1, username: 1, fullname: 1, emails: 1, year: 1, isAdmin: 1 }};\n\n\t\treturn Students.find(filter, option);\n\t});\n}\n\nMeteor.methods({\n\t'Students.insert'() {\n\t\tif (!Meteor.isAdmin()) return;\n\n\t\tAccounts.createUser({\n\t\t\tusername: 'Sample Username',\n\t\t\tfullname: 'Sample Fullname',\n\t\t\tpassword: Random.id(),\n\t\t\temail: 'dsca@inrg.csie.ntu.edu.tw',\t\n\t\t\tyear: new Date().getFullYear(),\n\t\t\tisAdmin: false\n\t\t});\n\t},\n\t'Students.remove'(filter) {\n\t\tif (!Meteor.isAdmin()) return;\n\n\t\tStudents.find(filter).forEach((student) => {\n\t\t\tMeteor.call('Submissions.remove', { studentId: student._id });\n\t\t});\n\t\tStudents.remove(filter);\n\t},\n\t'Students.update'(id, option) {\n\t\tif (!Meteor.isAdmin() || !Meteor.isServer) return;\n\n\t\tif (option.username) {\n\t\t\tAccounts.setUsername(id, option.username);\n\t\t\tdelete option.username;\n\t\t}\n\t\tif (option.password) {\n\t\t\tAccounts.setPassword(id, option.password);\n\t\t\tdelete option.password;\n\t\t}\n\t\tif (option.email) {\n\t\t\tStudents.update({ _id: id }, { $set: { emails: [] }});\n\t\t\tAccounts.addEmail(id, option.email);\n\t\t\tdelete option.email;\n\t\t}\n\t\tif (!_.isEmpty(option)) {\n\t\t\tStudents.update({ _id: id }, { $set: option });\n\t\t}\n\t},\n\t'Students.changePassword'(oldPassword, newPassword) {\n\t\tif (!Meteor.isServer) return;\n\n\t\tAccounts.changePassword(oldPassword, newPassword);\n\t}\n});","import { Problems, ProblemTests } from './problem.js';\r\nimport './utility.js';\r\n\r\nexport const Submissions = new Mongo.Collection('Submissions');\r\nexport const SubmissionResults = new Mongo.Collection('SubmissionResults');\r\n\r\nif (Meteor.isServer) {\r\n\tMeteor.publish('Submissions.findAllByFilter', function(filter) {\r\n\t\tconst option = { fields: { _id: 1, problemId: 1, studentId: 1, createdAt: 1, status: 1, isExam: 1 }};\r\n\r\n\t\treturn Submissions.find(filter, option);\r\n\t});\r\n\tMeteor.publish('Submissions.findOne', function(id) {\r\n\t\tconst filter = { _id: id };\r\n\t\tconst option = {};\r\n\r\n\t\tif (!Meteor.isAdmin() && !Meteor.isOwner(Meteor.getValue(Submissions, id, 'studentId'))) {\r\n\t\t\toption.fields = { code: 0 };\r\n\t\t}\r\n\t\treturn Submissions.find(filter, option);\r\n\t});\r\n\tMeteor.publish('SubmissionResults.findAllBySubmission', function(submissionId) {\r\n\t\tconst filter = { submissionId: submissionId };\r\n\t\tconst option = {};\r\n\r\n\t\tif (!Meteor.getValue(Submissions, submissionId, 'isExam')) {\r\n\t\t\tconst problemId = Meteor.getValue(Submissions, submissionId, 'problemId');\r\n\t\t\tfilter.problemTestId = { $in: [] };\r\n\t\t\t\r\n\t\t\tProblemTests.find({ problemId: problemId, isPublic: 1 }).forEach((problemTest) => {\r\n\t\t\t\tfilter.problemTestId.$in.push(problemTest._id);\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn SubmissionResults.find(filter, option);\r\n\t});\r\n}\r\n\r\nMeteor.methods({\r\n\t'Submissions.insert'(problemId, studentId, lang, code) {\r\n\t\tif (!Meteor.isOwner(studentId) || !Meteor.getValue(Problems, problemId, '_id')) return;\r\n\t\t\r\n\t\tconst submissionId = Submissions.insert({\r\n\t\t\tproblemId: problemId,\r\n\t\t\tstudentId: studentId,\r\n\t\t\tcreatedAt: new Date().getTime(),\r\n\t\t\tstatus: 'Pending',\r\n\t\t\tlang: lang,\r\n\t\t\tcode: code,\r\n\t\t\tisExam: Meteor.getValue(Problems, problemId, 'isExam')\r\n\t\t});\r\n\t\tif (Meteor.isServer) {\r\n\t\t\tMeteor.call('Submissions.createDir', submissionId);\r\n\t\t}\r\n\t},\r\n\t'Submissions.remove'(filter) {\r\n\t\tif (!Meteor.isAdmin()) return;\r\n\r\n\t\tSubmissions.find(filter).forEach((submission) => {\r\n\t\t\tMeteor.call('SubmissionResults.remove', { submissionId: submission._id });\r\n\r\n\t\t\tif (Meteor.isServer) {\r\n\t\t\t\tMeteor.call('Submissions.removeDir', submission._id);\r\n\t\t\t}\r\n\t\t});\r\n\t\tSubmissions.remove(filter);\r\n\t},\r\n\t'Submissions.update'(id, option) {\r\n\t\tif (!Meteor.isAdmin()) return;\r\n\t\t\r\n\t\tSubmissions.update({ _id: id }, { $set: option });\r\n\r\n\t\tif (Meteor.isServer) {\r\n\t\t\tif (option.lang || option.code)\r\n\t\t\t\tMeteor.call('Submissions.createDir', id);\r\n\t\t}\r\n\t},\r\n\t'SubmissionResults.insert'(problemTestId, submissionId) {\r\n\t\t//if (!Meteor.isAdmin()) return;\r\n\r\n\t\tconst submissionResultId = SubmissionResults.insert({\r\n\t\t\tproblemTestId: problemTestId,\r\n\t\t\tsubmissionId: submissionId,\r\n\t\t\ttimeUsed: null,\r\n\t\t\tmemoryUsed: null,\r\n\t\t\tstatus: 'Pending'\r\n\t\t});\r\n\t\tif (Meteor.isServer) {\r\n\t\t\tMeteor.call('SubmissionResults.createDir', submissionResultId);\r\n\t\t}\r\n\t},\r\n\t'SubmissionResults.remove'(filter) {\r\n\t\tif (!Meteor.isAdmin()) return;\r\n\r\n\t\tSubmissionResults.find(filter).forEach((submissionResult) => {\r\n\t\t\tif (Meteor.isServer) {\r\n\t\t\t\tMeteor.call('SubmissionResults.removeDir', submissionResult._id);\r\n\t\t\t}\r\n\t\t});\r\n\t\tSubmissionResults.remove(filter);\r\n\t},\r\n\t'SubmissionResults.update'(id) {\r\n\t\tif (!Meteor.isAdmin()) return;\r\n\r\n\t\tif (Meteor.isServer) {\r\n\t\t\tMeteor.call('SubmissionResults.createDir', id);\r\n\t\t}\r\n\t}\r\n});","Meteor.getValue = function(collection, id, field) {\n\tconst doc = collection.findOne({ _id: id }, { fields: { [field]: 1 }});\n\treturn doc ? doc[field] : null;\n}\n\nMeteor.isAdmin = function() {\n\tconst user = Meteor.user();\n\treturn user && user.isAdmin;\n}\n\nMeteor.isOwner = function(id) {\n\tconst user = Meteor.user();\n\treturn user && user._id == id;\n}","import '/imports/api/_problem.js';\nimport '/imports/api/_student.js';\nimport '/imports/api/_submission.js';\nimport '/imports/api/problem.js';\nimport '/imports/api/student.js';\nimport '/imports/api/submission.js';\nimport path from 'path';\n\nMeteor.rootPath = path.resolve('.').split(path.sep + '.meteor')[0]+'/';\nMeteor.dataPath = Meteor.rootPath+'../DSCA_Data/';\n\n/*Accounts.createUser({\n\tusername: 'R04922075',\n\tfullname: 'kcku',\n\tpassword: '123456',\n\temail: 'r04922075@csie.ntu.edu.tw',\n\tyear: 2016,\n\tisAdmin: true\n});*/"]}}]