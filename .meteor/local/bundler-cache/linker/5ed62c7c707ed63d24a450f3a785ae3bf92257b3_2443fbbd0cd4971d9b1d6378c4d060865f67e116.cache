[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar EJSON = Package.ejson.EJSON;\nvar _ = Package.underscore._;\nvar Blaze = Package.blaze.Blaze;\nvar UI = Package.blaze.UI;\nvar Handlebars = Package.blaze.Handlebars;\nvar LocalCollection = Package.minimongo.LocalCollection;\nvar Minimongo = Package.minimongo.Minimongo;\nvar HTML = Package.htmljs.HTML;\n\n/* Package-scope variables */\nvar left, right;\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                //\n// packages/mrt_reactive-extra/packages/mrt_reactive-extra.js                                                     //\n//                                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                  //\n(function () {                                                                                                    // 1\n                                                                                                                  // 2\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 3\n//                                                                                                         //     // 4\n// packages/mrt:reactive-extra/lib/reactive-object.js                                                      //     // 5\n//                                                                                                         //     // 6\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 7\n                                                                                                           //     // 8\n// Generated by CoffeeScript 1.7.1                                                                         // 1   // 9\n(function() {                                                                                              // 2   // 10\n  this.ReactiveObject = (function() {                                                                      // 3   // 11\n    function ReactiveObject(properties) {                                                                  // 4   // 12\n      var self;                                                                                            // 5   // 13\n      this._definePrivateProperty('_items', {});                                                           // 6   // 14\n      this._definePrivateProperty('_itemsDeps', {});                                                       // 7   // 15\n      self = this;                                                                                         // 8   // 16\n      if (_.isArray(properties)) {                                                                         // 9   // 17\n        _.each(properties, function(prop) {                                                                // 10  // 18\n          return self.defineProperty(prop, void 0);                                                        // 11  // 19\n        });                                                                                                // 12  // 20\n      }                                                                                                    // 13  // 21\n      if (_.isObject(properties)) {                                                                        // 14  // 22\n        _.each(properties, function(value, prop) {                                                         // 15  // 23\n          return self.defineProperty(prop, value);                                                         // 16  // 24\n        });                                                                                                // 17  // 25\n      }                                                                                                    // 18  // 26\n    }                                                                                                      // 19  // 27\n                                                                                                           // 20  // 28\n    ReactiveObject.prototype.defineProperty = function(name, value) {                                      // 21  // 29\n      Object.defineProperty(this, name, {                                                                  // 22  // 30\n        configurable: true,                                                                                // 23  // 31\n        enumerable: true,                                                                                  // 24  // 32\n        get: _.bind(this._propertyGet, this, name),                                                        // 25  // 33\n        set: _.bind(this._propertySet, this, name)                                                         // 26  // 34\n      });                                                                                                  // 27  // 35\n      this[name] = value;                                                                                  // 28  // 36\n      return this;                                                                                         // 29  // 37\n    };                                                                                                     // 30  // 38\n                                                                                                           // 31  // 39\n    ReactiveObject.prototype.undefineProperty = function(name) {                                           // 32  // 40\n      var dep;                                                                                             // 33  // 41\n      dep = this._itemsDeps[name];                                                                         // 34  // 42\n      delete this[name];                                                                                   // 35  // 43\n      delete this._items[name];                                                                            // 36  // 44\n      delete this._itemsDeps[name];                                                                        // 37  // 45\n      if (dep) {                                                                                           // 38  // 46\n        dep.changed();                                                                                     // 39  // 47\n      }                                                                                                    // 40  // 48\n      return this;                                                                                         // 41  // 49\n    };                                                                                                     // 42  // 50\n                                                                                                           // 43  // 51\n    ReactiveObject.prototype.clone = function() {                                                          // 44  // 52\n      return new ReactiveObject(_.clone(this._items));                                                     // 45  // 53\n    };                                                                                                     // 46  // 54\n                                                                                                           // 47  // 55\n    ReactiveObject.prototype.equals = function(obj) {                                                      // 48  // 56\n      return (obj != null) && obj instanceof ReactiveObject && _.isEqual(obj._items, this._items);         // 49  // 57\n    };                                                                                                     // 50  // 58\n                                                                                                           // 51  // 59\n    ReactiveObject.prototype.typeName = function() {                                                       // 52  // 60\n      return 'reactive-object';                                                                            // 53  // 61\n    };                                                                                                     // 54  // 62\n                                                                                                           // 55  // 63\n    ReactiveObject.prototype.toJSONValue = function() {                                                    // 56  // 64\n      return EJSON.toJSONValue(this._items);                                                               // 57  // 65\n    };                                                                                                     // 58  // 66\n                                                                                                           // 59  // 67\n    ReactiveObject.prototype._propertySet = function(name, value) {                                        // 60  // 68\n      var _ref;                                                                                            // 61  // 69\n      this._items[name] = value;                                                                           // 62  // 70\n      if ((_ref = this._itemsDeps[name]) != null) {                                                        // 63  // 71\n        _ref.changed();                                                                                    // 64  // 72\n      }                                                                                                    // 65  // 73\n      return this._items[name];                                                                            // 66  // 74\n    };                                                                                                     // 67  // 75\n                                                                                                           // 68  // 76\n    ReactiveObject.prototype._propertyGet = function(name) {                                               // 69  // 77\n      var _base;                                                                                           // 70  // 78\n      if ((_base = this._itemsDeps)[name] == null) {                                                       // 71  // 79\n        _base[name] = new Deps.Dependency();                                                               // 72  // 80\n      }                                                                                                    // 73  // 81\n      this._itemsDeps[name].depend();                                                                      // 74  // 82\n      return this._items[name];                                                                            // 75  // 83\n    };                                                                                                     // 76  // 84\n                                                                                                           // 77  // 85\n    ReactiveObject.prototype._definePrivateProperty = function(name, value) {                              // 78  // 86\n      return Object.defineProperty(this, name, {                                                           // 79  // 87\n        configurable: true,                                                                                // 80  // 88\n        enumerable: false,                                                                                 // 81  // 89\n        writable: true,                                                                                    // 82  // 90\n        value: value                                                                                       // 83  // 91\n      });                                                                                                  // 84  // 92\n    };                                                                                                     // 85  // 93\n                                                                                                           // 86  // 94\n    return ReactiveObject;                                                                                 // 87  // 95\n                                                                                                           // 88  // 96\n  })();                                                                                                    // 89  // 97\n                                                                                                           // 90  // 98\n  EJSON.addType('reactive-object', function(jsonObj) {                                                     // 91  // 99\n    return new ReactiveObject(jsonObj);                                                                    // 92  // 100\n  });                                                                                                      // 93  // 101\n                                                                                                           // 94  // 102\n}).call(this);                                                                                             // 95  // 103\n                                                                                                           // 96  // 104\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 105\n                                                                                                                  // 106\n}).call(this);                                                                                                    // 107\n                                                                                                                  // 108\n                                                                                                                  // 109\n                                                                                                                  // 110\n                                                                                                                  // 111\n                                                                                                                  // 112\n                                                                                                                  // 113\n(function () {                                                                                                    // 114\n                                                                                                                  // 115\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 116\n//                                                                                                         //     // 117\n// packages/mrt:reactive-extra/lib/reactive-dictionary.js                                                  //     // 118\n//                                                                                                         //     // 119\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 120\n                                                                                                           //     // 121\n// Generated by CoffeeScript 1.7.1                                                                         // 1   // 122\n(function() {                                                                                              // 2   // 123\n  var __hasProp = {}.hasOwnProperty,                                                                       // 3   // 124\n    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };\n                                                                                                           // 6   // 127\n  this.ReactiveDictionary = (function(_super) {                                                            // 7   // 128\n    __extends(ReactiveDictionary, _super);                                                                 // 8   // 129\n                                                                                                           // 9   // 130\n    function ReactiveDictionary() {                                                                        // 10  // 131\n      this._definePrivateProperty('_itemsKeyDep', new Deps.Dependency());                                  // 11  // 132\n      this._definePrivateProperty('_itemsValueDep', new Deps.Dependency());                                // 12  // 133\n      ReactiveDictionary.__super__.constructor.apply(this, arguments);                                     // 13  // 134\n    }                                                                                                      // 14  // 135\n                                                                                                           // 15  // 136\n    ReactiveDictionary.prototype.add = function(key, value) {                                              // 16  // 137\n      if (__indexOf.call(this, key) >= 0) {                                                                // 17  // 138\n        throw 'An element with Key ' + key + ' already exists.';                                           // 18  // 139\n      }                                                                                                    // 19  // 140\n      return this.defineProperty(key, value);                                                              // 20  // 141\n    };                                                                                                     // 21  // 142\n                                                                                                           // 22  // 143\n    ReactiveDictionary.prototype.remove = function(key) {                                                  // 23  // 144\n      return this.undefineProperty(key);                                                                   // 24  // 145\n    };                                                                                                     // 25  // 146\n                                                                                                           // 26  // 147\n    ReactiveDictionary.prototype.clear = function() {                                                      // 27  // 148\n      var deps, self;                                                                                      // 28  // 149\n      self = this;                                                                                         // 29  // 150\n      deps = this._itemsDeps;                                                                              // 30  // 151\n      _.each(this._items, function(v, prop) {                                                              // 31  // 152\n        return delete self[prop];                                                                          // 32  // 153\n      });                                                                                                  // 33  // 154\n      this._items = {};                                                                                    // 34  // 155\n      this._itemsDeps = {};                                                                                // 35  // 156\n      _.invoke(deps, 'changed');                                                                           // 36  // 157\n      this._itemsKeyDep.changed();                                                                         // 37  // 158\n      return this._itemsValueDep.changed();                                                                // 38  // 159\n    };                                                                                                     // 39  // 160\n                                                                                                           // 40  // 161\n    ReactiveDictionary.prototype.count = function() {                                                      // 41  // 162\n      this._itemsKeyDep.depend();                                                                          // 42  // 163\n      return _.size(this._items);                                                                          // 43  // 164\n    };                                                                                                     // 44  // 165\n                                                                                                           // 45  // 166\n    ReactiveDictionary.prototype.keys = function() {                                                       // 46  // 167\n      this._itemsKeyDep.depend();                                                                          // 47  // 168\n      return _.keys(this._items);                                                                          // 48  // 169\n    };                                                                                                     // 49  // 170\n                                                                                                           // 50  // 171\n    ReactiveDictionary.prototype.values = function() {                                                     // 51  // 172\n      this._itemsValueDep.depend();                                                                        // 52  // 173\n      return _.values(this._items);                                                                        // 53  // 174\n    };                                                                                                     // 54  // 175\n                                                                                                           // 55  // 176\n    ReactiveDictionary.prototype.contains = function(key) {                                                // 56  // 177\n      if (_.has(this._items, key)) {                                                                       // 57  // 178\n        this._propertyGet(key);                                                                            // 58  // 179\n        return true;                                                                                       // 59  // 180\n      }                                                                                                    // 60  // 181\n      this._itemsKeyDep.depend();                                                                          // 61  // 182\n      return false;                                                                                        // 62  // 183\n    };                                                                                                     // 63  // 184\n                                                                                                           // 64  // 185\n    ReactiveDictionary.prototype.containsValue = function(value) {                                         // 65  // 186\n      var key, val, _ref;                                                                                  // 66  // 187\n      _ref = this._items;                                                                                  // 67  // 188\n      for (key in _ref) {                                                                                  // 68  // 189\n        val = _ref[key];                                                                                   // 69  // 190\n        if (!(_.has(this._items, key) && _.isEqual(val, value))) {                                         // 70  // 191\n          continue;                                                                                        // 71  // 192\n        }                                                                                                  // 72  // 193\n        this._propertyGet(key);                                                                            // 73  // 194\n        return true;                                                                                       // 74  // 195\n      }                                                                                                    // 75  // 196\n      this._itemsValueDep.depend();                                                                        // 76  // 197\n      return false;                                                                                        // 77  // 198\n    };                                                                                                     // 78  // 199\n                                                                                                           // 79  // 200\n    ReactiveDictionary.prototype.defineProperty = function() {                                             // 80  // 201\n      var rtn;                                                                                             // 81  // 202\n      rtn = ReactiveDictionary.__super__.defineProperty.apply(this, arguments);                            // 82  // 203\n      this._itemsKeyDep.changed();                                                                         // 83  // 204\n      this._itemsValueDep.changed();                                                                       // 84  // 205\n      return rtn;                                                                                          // 85  // 206\n    };                                                                                                     // 86  // 207\n                                                                                                           // 87  // 208\n    ReactiveDictionary.prototype.undefineProperty = function() {                                           // 88  // 209\n      var rtn;                                                                                             // 89  // 210\n      rtn = ReactiveDictionary.__super__.undefineProperty.apply(this, arguments);                          // 90  // 211\n      this._itemsKeyDep.changed();                                                                         // 91  // 212\n      this._itemsValueDep.changed();                                                                       // 92  // 213\n      return rtn;                                                                                          // 93  // 214\n    };                                                                                                     // 94  // 215\n                                                                                                           // 95  // 216\n    ReactiveDictionary.prototype._propertySet = function() {                                               // 96  // 217\n      var rtn;                                                                                             // 97  // 218\n      rtn = ReactiveDictionary.__super__._propertySet.apply(this, arguments);                              // 98  // 219\n      this._itemsValueDep.changed();                                                                       // 99  // 220\n      return rtn;                                                                                          // 100\n    };                                                                                                     // 101\n                                                                                                           // 102\n    ReactiveDictionary.prototype.clone = function() {                                                      // 103\n      return new ReactiveDictionary(_.clone(this._items));                                                 // 104\n    };                                                                                                     // 105\n                                                                                                           // 106\n    ReactiveDictionary.prototype.equals = function(obj) {                                                  // 107\n      return (obj != null) && obj instanceof ReactiveDictionary && _.isEqual(obj._items, this._items);     // 108\n    };                                                                                                     // 109\n                                                                                                           // 110\n    ReactiveDictionary.prototype.typeName = function() {                                                   // 111\n      return 'reactive-dictionary';                                                                        // 112\n    };                                                                                                     // 113\n                                                                                                           // 114\n    return ReactiveDictionary;                                                                             // 115\n                                                                                                           // 116\n  })(ReactiveObject);                                                                                      // 117\n                                                                                                           // 118\n  EJSON.addType('reactive-dictionary', function(jsonObj) {                                                 // 119\n    return new ReactiveDictionary(jsonObj);                                                                // 120\n  });                                                                                                      // 121\n                                                                                                           // 122\n}).call(this);                                                                                             // 123\n                                                                                                           // 124\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 246\n                                                                                                                  // 247\n}).call(this);                                                                                                    // 248\n                                                                                                                  // 249\n                                                                                                                  // 250\n                                                                                                                  // 251\n                                                                                                                  // 252\n                                                                                                                  // 253\n                                                                                                                  // 254\n(function () {                                                                                                    // 255\n                                                                                                                  // 256\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 257\n//                                                                                                         //     // 258\n// packages/mrt:reactive-extra/lib/reactive-array.js                                                       //     // 259\n//                                                                                                         //     // 260\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 261\n                                                                                                           //     // 262\n// Generated by CoffeeScript 1.7.1                                                                         // 1   // 263\n(function() {                                                                                              // 2   // 264\n  this.ReactiveArray = (function() {                                                                       // 3   // 265\n    function ReactiveArray() {                                                                             // 4   // 266\n      this._definePrivateProperty('_list', []);                                                            // 5   // 267\n      this._definePrivateProperty('_listDeps', []);                                                        // 6   // 268\n      this._definePrivateProperty('_listLengthDep', new Deps.Dependency());                                // 7   // 269\n      this._definePrivateProperty('_listValueDep', new Deps.Dependency());                                 // 8   // 270\n      this._definePrivateProperty('_listPropertyLengh', 0);                                                // 9   // 271\n      Object.defineProperty(this, 'length', {                                                              // 10  // 272\n        configurable: false,                                                                               // 11  // 273\n        enumerable: false,                                                                                 // 12  // 274\n        get: function() {                                                                                  // 13  // 275\n          this._listLengthDep.depend();                                                                    // 14  // 276\n          return this._list.length;                                                                        // 15  // 277\n        },                                                                                                 // 16  // 278\n        set: function(length) {                                                                            // 17  // 279\n          this._list.length = length;                                                                      // 18  // 280\n          this._syncIndexProxies();                                                                        // 19  // 281\n          return this._list.length;                                                                        // 20  // 282\n        }                                                                                                  // 21  // 283\n      });                                                                                                  // 22  // 284\n      if (arguments.length > 0) {                                                                          // 23  // 285\n        this._list = _.toArray(arguments);                                                                 // 24  // 286\n        this._syncIndexProxies(true);                                                                      // 25  // 287\n      }                                                                                                    // 26  // 288\n    }                                                                                                      // 27  // 289\n                                                                                                           // 28  // 290\n    ReactiveArray.prototype.toArray = function() {                                                         // 29  // 291\n      this._listLengthDep.depend();                                                                        // 30  // 292\n      this._listValueDep.depend();                                                                         // 31  // 293\n      return this._list.slice();                                                                           // 32  // 294\n    };                                                                                                     // 33  // 295\n                                                                                                           // 34  // 296\n    ReactiveArray.prototype.reverse = function() {                                                         // 35  // 297\n      Array.prototype.reverse.apply(this._list);                                                           // 36  // 298\n      for (left = 0, right = this._list.length - 1; left < right; left += 1, right -= 1) {                 // 37  // 299\n      if (left === right) { continue; }                                                                    // 38  // 300\n      if (this._listDeps[left]) { this._listDeps[left].changed(); }                                        // 39  // 301\n      if (this._listDeps[right]) { this._listDeps[right].changed(); }                                      // 40  // 302\n    };                                                                                                     // 41  // 303\n      this._listValueDep.changed();                                                                        // 42  // 304\n      return this;                                                                                         // 43  // 305\n    };                                                                                                     // 44  // 306\n                                                                                                           // 45  // 307\n    ReactiveArray.prototype.sort = function() {                                                            // 46  // 308\n      var dep, i, orgList, _i, _len, _ref;                                                                 // 47  // 309\n      orgList = this._list.slice();                                                                        // 48  // 310\n      Array.prototype.sort.apply(this._list, arguments);                                                   // 49  // 311\n      _ref = this._listDeps;                                                                               // 50  // 312\n      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {                                          // 51  // 313\n        dep = _ref[i];                                                                                     // 52  // 314\n        if (dep && orgList[i] !== this._list[i]) {                                                         // 53  // 315\n          dep.changed();                                                                                   // 54  // 316\n        }                                                                                                  // 55  // 317\n      }                                                                                                    // 56  // 318\n      this._listValueDep.changed();                                                                        // 57  // 319\n      return this;                                                                                         // 58  // 320\n    };                                                                                                     // 59  // 321\n                                                                                                           // 60  // 322\n    ReactiveArray.prototype.indexOf = function(searchElement, fromIndex) {                                 // 61  // 323\n      var i, idx, _base, _i, _ref;                                                                         // 62  // 324\n      fromIndex = typeof isSorted == 'number' ? fromIndex : 0;                                             // 63  // 325\n      idx = _.indexOf(this._list, searchElement, fromIndex);                                               // 64  // 326\n      if (idx === -1) {                                                                                    // 65  // 327\n        this._listLengthDep.depend();                                                                      // 66  // 328\n        this._listValueDep.depend();                                                                       // 67  // 329\n      } else {                                                                                             // 68  // 330\n        for (i = _i = fromIndex, _ref = idx + 1; _i < _ref; i = _i += 1) {                                 // 69  // 331\n          if ((_base = this._listDeps)[i] == null) {                                                       // 70  // 332\n            _base[i] = new Deps.Dependency();                                                              // 71  // 333\n          }                                                                                                // 72  // 334\n          this._listDeps[i].depend();                                                                      // 73  // 335\n        }                                                                                                  // 74  // 336\n      }                                                                                                    // 75  // 337\n      return idx;                                                                                          // 76  // 338\n    };                                                                                                     // 77  // 339\n                                                                                                           // 78  // 340\n    ReactiveArray.prototype.lastIndexOf = function(searchElement, fromIndex) {                             // 79  // 341\n      var i, idx, _base, _i;                                                                               // 80  // 342\n      fromIndex = typeof isSorted == 'number' ? fromIndex : this.length;                                   // 81  // 343\n      idx = _.lastIndexOf(this._list, searchElement, fromIndex);                                           // 82  // 344\n      if (idx === -1) {                                                                                    // 83  // 345\n        this._listValueDep.depend();                                                                       // 84  // 346\n      } else {                                                                                             // 85  // 347\n        for (i = _i = idx; _i < fromIndex; i = _i += 1) {                                                  // 86  // 348\n          if ((_base = this._listDeps)[i] == null) {                                                       // 87  // 349\n            _base[i] = new Deps.Dependency();                                                              // 88  // 350\n          }                                                                                                // 89  // 351\n          this._listDeps[i].depend();                                                                      // 90  // 352\n        }                                                                                                  // 91  // 353\n      }                                                                                                    // 92  // 354\n      return idx;                                                                                          // 93  // 355\n    };                                                                                                     // 94  // 356\n                                                                                                           // 95  // 357\n    ReactiveArray.prototype.forEach = function(iterator, thisArg) {                                        // 96  // 358\n      var i, _i, _ref;                                                                                     // 97  // 359\n      for (i = _i = 0, _ref = this.length; _i < _ref; i = _i += 1) {                                       // 98  // 360\n        iterator.call(thisArg, this[i], i, this);                                                          // 99  // 361\n      }                                                                                                    // 100\n    };                                                                                                     // 101\n                                                                                                           // 102\n    ReactiveArray.prototype.every = function(iterator, thisArg) {                                          // 103\n      var i, _base, _i, _ref;                                                                              // 104\n      for (i = _i = 0, _ref = this._list.length; _i < _ref; i = _i += 1) {                                 // 105\n        if (!iterator.call(thisArg, this._list[i], i, this)) {                                             // 106\n          if ((_base = this._listDeps)[i] == null) {                                                       // 107\n            _base[i] = new Deps.Dependency();                                                              // 108\n          }                                                                                                // 109\n          this._listDeps[i].depend();                                                                      // 110\n          return false;                                                                                    // 111\n        }                                                                                                  // 112\n      }                                                                                                    // 113\n      this._listLengthDep.depend();                                                                        // 114\n      this._listValueDep.depend();                                                                         // 115\n      return true;                                                                                         // 116\n    };                                                                                                     // 117\n                                                                                                           // 118\n    ReactiveArray.prototype.some = function(iterator, thisArg) {                                           // 119\n      var i, _base, _i, _ref;                                                                              // 120\n      for (i = _i = 0, _ref = this._list.length; _i < _ref; i = _i += 1) {                                 // 121\n        if (!!iterator.call(thisArg, this._list[i], i, this)) {                                            // 122\n          if ((_base = this._listDeps)[i] == null) {                                                       // 123\n            _base[i] = new Deps.Dependency();                                                              // 124\n          }                                                                                                // 125\n          this._listDeps[i].depend();                                                                      // 126\n          return true;                                                                                     // 127\n        }                                                                                                  // 128\n      }                                                                                                    // 129\n      this._listLengthDep.depend();                                                                        // 130\n      this._listValueDep.depend();                                                                         // 131\n      return false;                                                                                        // 132\n    };                                                                                                     // 133\n                                                                                                           // 134\n    ReactiveArray.prototype.clone = function() {                                                           // 135\n      return this.constructor.wrap(this._list);                                                            // 136\n    };                                                                                                     // 137\n                                                                                                           // 138\n    ReactiveArray.prototype.equals = function(obj) {                                                       // 139\n      return (obj != null) && obj instanceof ReactiveArray && _.isEqual(obj._list, this._list);            // 140\n    };                                                                                                     // 141\n                                                                                                           // 142\n    ReactiveArray.prototype.typeName = function() {                                                        // 143\n      return 'reactive-array';                                                                             // 144\n    };                                                                                                     // 145\n                                                                                                           // 146\n    ReactiveArray.prototype.toJSONValue = function() {                                                     // 147\n      return EJSON.toJSONValue(this._list);                                                                // 148\n    };                                                                                                     // 149\n                                                                                                           // 150\n    ReactiveArray.prototype._syncIndexProxies = function(suppress) {                                       // 151\n      var dep, i, length, _i, _j, _ref, _ref1;                                                             // 152\n      length = this._list.length;                                                                          // 153\n      if (length > this._listPropertyLengh) {                                                              // 154\n        for (i = _i = _ref = this._listPropertyLengh; _i < length; i = _i += 1) {                          // 155\n          this._defineIndexProperty(i);                                                                    // 156\n        }                                                                                                  // 157\n      } else if (this._listPropertyLengh > length) {                                                       // 158\n        for (i = _j = length, _ref1 = this._listPropertyLengh; _j < _ref1; i = _j += 1) {                  // 159\n          dep = this._listDeps[i];                                                                         // 160\n          delete this[i];                                                                                  // 161\n          delete this._list[i];                                                                            // 162\n          delete this._listDeps[i];                                                                        // 163\n          if (dep) {                                                                                       // 164\n            dep.changed();                                                                                 // 165\n          }                                                                                                // 166\n        }                                                                                                  // 167\n      }                                                                                                    // 168\n      if (!suppress && this._listPropertyLengh !== length) {                                               // 169\n        this._listLengthDep.changed();                                                                     // 170\n        this._listValueDep.changed();                                                                      // 171\n      }                                                                                                    // 172\n      return this._listPropertyLengh = this._list.length;                                                  // 173\n    };                                                                                                     // 174\n                                                                                                           // 175\n    ReactiveArray.prototype._defineIndexProperty = function(i) {                                           // 176\n      return Object.defineProperty(this, i, {                                                              // 177\n        configurable: true,                                                                                // 178\n        enumerable: true,                                                                                  // 179\n        set: _.bind(this._indexSet, this, i),                                                              // 180\n        get: _.bind(this._indexGet, this, i)                                                               // 181\n      });                                                                                                  // 182\n    };                                                                                                     // 183\n                                                                                                           // 184\n    ReactiveArray.prototype._indexGet = function(i) {                                                      // 185\n      var _base;                                                                                           // 186\n      if ((_base = this._listDeps)[i] == null) {                                                           // 187\n        _base[i] = new Deps.Dependency();                                                                  // 188\n      }                                                                                                    // 189\n      this._listDeps[i].depend();                                                                          // 190\n      return this._list[i];                                                                                // 191\n    };                                                                                                     // 192\n                                                                                                           // 193\n    ReactiveArray.prototype._indexSet = function(i, val) {                                                 // 194\n      var _ref;                                                                                            // 195\n      if (this._list[i] !== val) {                                                                         // 196\n        this._list[i] = val;                                                                               // 197\n        if ((_ref = this._listDeps[i]) != null) {                                                          // 198\n          _ref.changed();                                                                                  // 199\n        }                                                                                                  // 200\n        this._listValueDep.changed();                                                                      // 201\n      }                                                                                                    // 202\n      return val;                                                                                          // 203\n    };                                                                                                     // 204\n                                                                                                           // 205\n    ReactiveArray.prototype._definePrivateProperty = function(name, value) {                               // 206\n      return Object.defineProperty(this, name, {                                                           // 207\n        configurable: true,                                                                                // 208\n        enumerable: false,                                                                                 // 209\n        writable: true,                                                                                    // 210\n        value: value                                                                                       // 211\n      });                                                                                                  // 212\n    };                                                                                                     // 213\n                                                                                                           // 214\n    return ReactiveArray;                                                                                  // 215\n                                                                                                           // 216\n  })();                                                                                                    // 217\n                                                                                                           // 218\n  _.each(['pop', 'push'], function(m) {                                                                    // 219\n    return ReactiveArray.prototype[m] = function() {                                                       // 220\n      var rtn;                                                                                             // 221\n      rtn = Array.prototype[m].apply(this._list, arguments);                                               // 222\n      this._syncIndexProxies();                                                                            // 223\n      return rtn;                                                                                          // 224\n    };                                                                                                     // 225\n  });                                                                                                      // 226\n                                                                                                           // 227\n  _.each(['shift', 'splice', 'unshift'], function(m) {                                                     // 228\n    return ReactiveArray.prototype[m] = function() {                                                       // 229\n      var dep, i, orgList, rtn, _i, _len, _ref;                                                            // 230\n      orgList = this._list.slice();                                                                        // 231\n      rtn = Array.prototype[m].apply(this._list, arguments);                                               // 232\n      this._syncIndexProxies();                                                                            // 233\n      _ref = this._listDeps;                                                                               // 234\n      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {                                          // 235\n        dep = _ref[i];                                                                                     // 236\n        if (dep && orgList[i] !== this._list[i]) {                                                         // 237\n          dep.changed();                                                                                   // 238\n        }                                                                                                  // 239\n      }                                                                                                    // 240\n      return rtn;                                                                                          // 241\n    };                                                                                                     // 242\n  });                                                                                                      // 243\n                                                                                                           // 244\n  _.each(['concat', 'slice'], function(m) {                                                                // 245\n    return ReactiveArray.prototype[m] = function() {                                                       // 246\n      var rtn;                                                                                             // 247\n      rtn = Array.prototype[m].apply(this._list, arguments);                                               // 248\n      this._listLengthDep.depend();                                                                        // 249\n      this._listValueDep.depend();                                                                         // 250\n      return this.constructor.wrap(rtn);                                                                   // 251\n    };                                                                                                     // 252\n  });                                                                                                      // 253\n                                                                                                           // 254\n  _.each(['join', 'toString'], function(m) {                                                               // 255\n    return ReactiveArray.prototype[m] = function() {                                                       // 256\n      var rtn;                                                                                             // 257\n      rtn = Array.prototype[m].apply(this._list, arguments);                                               // 258\n      this._listLengthDep.depend();                                                                        // 259\n      this._listValueDep.depend();                                                                         // 260\n      return rtn;                                                                                          // 261\n    };                                                                                                     // 262\n  });                                                                                                      // 263\n                                                                                                           // 264\n  _.each(['filter', 'map'], function(m) {                                                                  // 265\n    return ReactiveArray.prototype[m] = function(iterator, thisArg) {                                      // 266\n      var iteratorProxy, rtn, self;                                                                        // 267\n      self = this;                                                                                         // 268\n      iteratorProxy = function(value, index) {                                                             // 269\n        return iterator.call(this, value, index, self);                                                    // 270\n      };                                                                                                   // 271\n      rtn = _[m].call(null, this._list, iteratorProxy, thisArg);                                           // 272\n      this._listLengthDep.depend();                                                                        // 273\n      this._listValueDep.depend();                                                                         // 274\n      return this.constructor.wrap(rtn);                                                                   // 275\n    };                                                                                                     // 276\n  });                                                                                                      // 277\n                                                                                                           // 278\n  _.each(['reduce', 'reduceRight'], function(m) {                                                          // 279\n    return ReactiveArray.prototype[m] = function(iterator, initialValue, thisArg) {                        // 280\n      var iteratorProxy, rtn, self;                                                                        // 281\n      self = this;                                                                                         // 282\n      iteratorProxy = function(previousValue, currentValue, index) {                                       // 283\n        return iterator.call(this, previousValue, currentValue, index, self);                              // 284\n      };                                                                                                   // 285\n      if (arguments.length > 1) {                                                                          // 286\n        rtn = _[m].call(null, this._list, iteratorProxy, initialValue, thisArg);                           // 287\n      } else {                                                                                             // 288\n        rtn = _[m].call(null, this._list, iteratorProxy);                                                  // 289\n      }                                                                                                    // 290\n      this._listLengthDep.depend();                                                                        // 291\n      this._listValueDep.depend();                                                                         // 292\n      return rtn;                                                                                          // 293\n    };                                                                                                     // 294\n  });                                                                                                      // 295\n                                                                                                           // 296\n  ReactiveArray.wrap = function(arr) {                                                                     // 297\n    var obj;                                                                                               // 298\n    obj = new ReactiveArray;                                                                               // 299\n    obj._list = _.toArray(arr);                                                                            // 300\n    obj._syncIndexProxies(true);                                                                           // 301\n    return obj;                                                                                            // 302\n  };                                                                                                       // 303\n                                                                                                           // 304\n  EJSON.addType('reactive-array', function(jsonObj) {                                                      // 305\n    return ReactiveArray.wrap(jsonObj);                                                                    // 306\n  });                                                                                                      // 307\n                                                                                                           // 308\n}).call(this);                                                                                             // 309\n                                                                                                           // 310\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 573\n                                                                                                                  // 574\n}).call(this);                                                                                                    // 575\n                                                                                                                  // 576\n                                                                                                                  // 577\n                                                                                                                  // 578\n                                                                                                                  // 579\n                                                                                                                  // 580\n                                                                                                                  // 581\n(function () {                                                                                                    // 582\n                                                                                                                  // 583\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 584\n//                                                                                                         //     // 585\n// packages/mrt:reactive-extra/lib/reactive-list.js                                                        //     // 586\n//                                                                                                         //     // 587\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 588\n                                                                                                           //     // 589\n// Generated by CoffeeScript 1.7.1                                                                         // 1   // 590\n(function() {                                                                                              // 2   // 591\n  var LiveHandler,                                                                                         // 3   // 592\n    __hasProp = {}.hasOwnProperty,                                                                         // 4   // 593\n    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n                                                                                                           // 6   // 595\n  this.ReactiveList = (function(_super) {                                                                  // 7   // 596\n    __extends(ReactiveList, _super);                                                                       // 8   // 597\n                                                                                                           // 9   // 598\n    function ReactiveList() {                                                                              // 10  // 599\n      this._definePrivateProperty('_handlers', []);                                                        // 11  // 600\n      ReactiveList.__super__.constructor.apply(this, arguments);                                           // 12  // 601\n    }                                                                                                      // 13  // 602\n                                                                                                           // 14  // 603\n    ReactiveList.prototype.observe = function(callbacks) {                                                 // 15  // 604\n      var handle, i, _i, _ref;                                                                             // 16  // 605\n      handle = new LiveHandler(callbacks);                                                                 // 17  // 606\n      this._handlers.push(handle);                                                                         // 18  // 607\n      for (i = _i = 0, _ref = this._list.length; _i < _ref; i = _i += 1) {                                 // 19  // 608\n        this._trigger('added', this._list[i], i);                                                          // 20  // 609\n      }                                                                                                    // 21  // 610\n      return handle;                                                                                       // 22  // 611\n    };                                                                                                     // 23  // 612\n                                                                                                           // 24  // 613\n    ReactiveList.prototype.pop = function() {                                                              // 25  // 614\n      var rtn;                                                                                             // 26  // 615\n      rtn = ReactiveList.__super__.pop.apply(this, arguments);                                             // 27  // 616\n      this._trigger('removed', rtn, this._list.length);                                                    // 28  // 617\n      return rtn;                                                                                          // 29  // 618\n    };                                                                                                     // 30  // 619\n                                                                                                           // 31  // 620\n    ReactiveList.prototype.push = function() {                                                             // 32  // 621\n      var i, orgLength, rtn, _i, _ref;                                                                     // 33  // 622\n      orgLength = this._list.length;                                                                       // 34  // 623\n      rtn = ReactiveList.__super__.push.apply(this, arguments);                                            // 35  // 624\n      for (i = _i = orgLength, _ref = this._list.length; _i < _ref; i = _i += 1) {                         // 36  // 625\n        this._trigger('added', this._list[i], i);                                                          // 37  // 626\n      }                                                                                                    // 38  // 627\n      return rtn;                                                                                          // 39  // 628\n    };                                                                                                     // 40  // 629\n                                                                                                           // 41  // 630\n    ReactiveList.prototype.shift = function() {                                                            // 42  // 631\n      var rtn;                                                                                             // 43  // 632\n      rtn = ReactiveList.__super__.shift.apply(this, arguments);                                           // 44  // 633\n      this._trigger('removed', rtn, 0);                                                                    // 45  // 634\n      return rtn;                                                                                          // 46  // 635\n    };                                                                                                     // 47  // 636\n                                                                                                           // 48  // 637\n    ReactiveList.prototype.unshift = function() {                                                          // 49  // 638\n      var i, orgLength, rtn, _i, _ref;                                                                     // 50  // 639\n      orgLength = this._list.length;                                                                       // 51  // 640\n      rtn = ReactiveList.__super__.unshift.apply(this, arguments);                                         // 52  // 641\n      for (i = _i = 0, _ref = this._list.length - orgLength; _i < _ref; i = _i += 1) {                     // 53  // 642\n        this._trigger('added', this._list[i], i);                                                          // 54  // 643\n      }                                                                                                    // 55  // 644\n      return rtn;                                                                                          // 56  // 645\n    };                                                                                                     // 57  // 646\n                                                                                                           // 58  // 647\n    ReactiveList.prototype.splice = function() {                                                           // 59  // 648\n      var addAmount, changedAmount, i, idx, orgList, rmAmount, rtn, _i, _j, _k, _l, _ref, _ref1;           // 60  // 649\n      orgList = this._list.slice();                                                                        // 61  // 650\n      rtn = ReactiveList.__super__.splice.apply(this, arguments);                                          // 62  // 651\n      idx = arguments[0];                                                                                  // 63  // 652\n      if (idx < 0) {                                                                                       // 64  // 653\n        idx = orgList.length + idx;                                                                        // 65  // 654\n      }                                                                                                    // 66  // 655\n      rmAmount = arguments.length > 1 ? arguments[1] : orgList.length - idx;                               // 67  // 656\n      if (arguments.length > 2) {                                                                          // 68  // 657\n        addAmount = arguments.length - 2;                                                                  // 69  // 658\n        if (rmAmount > 0) {                                                                                // 70  // 659\n          changedAmount = rmAmount > addAmount ? addAmount : rmAmount;                                     // 71  // 660\n          for (i = _i = 0; _i < changedAmount; i = _i += 1) {                                              // 72  // 661\n            this._trigger('changed', this._list[idx], orgList[idx], idx);                                  // 73  // 662\n            idx++;                                                                                         // 74  // 663\n          }                                                                                                // 75  // 664\n          addAmount = addAmount - changedAmount;                                                           // 76  // 665\n          rmAmount = rmAmount - changedAmount;                                                             // 77  // 666\n        }                                                                                                  // 78  // 667\n        if ((rmAmount - addAmount) > 0) {                                                                  // 79  // 668\n          for (i = _j = 0, _ref = rmAmount - addAmount; _j < _ref; i = _j += 1) {                          // 80  // 669\n            this._trigger('removed', orgList[idx + i], idx + i);                                           // 81  // 670\n          }                                                                                                // 82  // 671\n        } else if ((rmAmount - addAmount) < 0) {                                                           // 83  // 672\n          for (i = _k = 0, _ref1 = addAmount - rmAmount; _k < _ref1; i = _k += 1) {                        // 84  // 673\n            this._trigger('added', this._list[idx + i], idx + i);                                          // 85  // 674\n          }                                                                                                // 86  // 675\n        }                                                                                                  // 87  // 676\n      } else if (rmAmount > 0) {                                                                           // 88  // 677\n        for (i = _l = 0; _l < rmAmount; i = _l += 1) {                                                     // 89  // 678\n          this._trigger('removed', orgList[idx + i], idx + i);                                             // 90  // 679\n        }                                                                                                  // 91  // 680\n      }                                                                                                    // 92  // 681\n      return rtn;                                                                                          // 93  // 682\n    };                                                                                                     // 94  // 683\n                                                                                                           // 95  // 684\n    ReactiveList.prototype.reverse = function() {                                                          // 96  // 685\n      var array, length;                                                                                   // 97  // 686\n      ReactiveList.__super__.reverse.apply(this, arguments);                                               // 98  // 687\n      array = this._list;                                                                                  // 99  // 688\n      length = this._list.length;                                                                          // 100\n      for (left = 0, right = length - 1; left < right; left += 1, right -= 1) {                            // 101\n      if (right === left) { continue; }                                                                    // 102\n      this._trigger('movedTo', array[left], right, left);                                                  // 103\n      this._trigger('movedTo', array[right], left+1, right);                                               // 104\n    };                                                                                                     // 105\n      return this;                                                                                         // 106\n    };                                                                                                     // 107\n                                                                                                           // 108\n    ReactiveList.prototype.sort = function() {                                                             // 109\n      var currentPosition, finalPosition, lastMove, length, move, moves, org, skip, _i, _len;              // 110\n      org = this._list.slice();                                                                            // 111\n      ReactiveList.__super__.sort.apply(this, arguments);                                                  // 112\n      if (!this._hasActiveTrigger('movedTo')) {                                                            // 113\n        return this;                                                                                       // 114\n      }                                                                                                    // 115\n      length = this._list.length;                                                                          // 116\n      moves = [];                                                                                          // 117\n      currentPosition = 0;                                                                                 // 118\n      while (currentPosition < length) {                                                                   // 119\n        finalPosition = this._list.indexOf(org[currentPosition]);                                          // 120\n        if (currentPosition + 1 === finalPosition) {                                                       // 121\n          while (org[currentPosition + 1] === this._list[finalPosition + 1]) {                             // 122\n            finalPosition++;                                                                               // 123\n            currentPosition++;                                                                             // 124\n          }                                                                                                // 125\n          if (org[currentPosition] === this._list[finalPosition]) {                                        // 126\n            finalPosition++;                                                                               // 127\n            currentPosition++;                                                                             // 128\n          }                                                                                                // 129\n          finalPosition = this._list.indexOf(org[currentPosition]);                                        // 130\n        }                                                                                                  // 131\n        if (org[currentPosition] === org[currentPosition + 1]) {                                           // 132\n          while (org[currentPosition - 1] === this._list[finalPosition]) {                                 // 133\n            finalPosition++;                                                                               // 134\n          }                                                                                                // 135\n          if (org[currentPosition] === this._list[finalPosition]) {                                        // 136\n            finalPosition++;                                                                               // 137\n          }                                                                                                // 138\n          finalPosition = this._list.indexOf(org[currentPosition], finalPosition);                         // 139\n        }                                                                                                  // 140\n        move = {                                                                                           // 141\n          from: currentPosition,                                                                           // 142\n          to: finalPosition                                                                                // 143\n        };                                                                                                 // 144\n        skip = finalPosition === -1 || lastMove && lastMove.to === move.to && lastMove.from === move.from; // 145\n        if (!skip && finalPosition !== currentPosition) {                                                  // 146\n          moves.push(move);                                                                                // 147\n          lastMove = move;                                                                                 // 148\n          org.splice(move.to, 0, (org.splice(move.from, 1))[0]);                                           // 149\n          if (finalPosition < currentPosition) {                                                           // 150\n            currentPosition = finalPosition;                                                               // 151\n          } else {                                                                                         // 152\n            currentPosition--;                                                                             // 153\n          }                                                                                                // 154\n        }                                                                                                  // 155\n        currentPosition++;                                                                                 // 156\n      }                                                                                                    // 157\n      for (_i = 0, _len = moves.length; _i < _len; _i++) {                                                 // 158\n        move = moves[_i];                                                                                  // 159\n        this._trigger('movedTo', this._list[move.to], move.from, move.to);                                 // 160\n      }                                                                                                    // 161\n      return this;                                                                                         // 162\n    };                                                                                                     // 163\n                                                                                                           // 164\n    ReactiveList.prototype.typeName = function() {                                                         // 165\n      return 'reactive-list';                                                                              // 166\n    };                                                                                                     // 167\n                                                                                                           // 168\n    ReactiveList.prototype.equals = function(obj) {                                                        // 169\n      return (obj != null) && obj instanceof ReactiveList && _.isEqual(obj._list, this._list);             // 170\n    };                                                                                                     // 171\n                                                                                                           // 172\n    ReactiveList.prototype._trigger = function(evt) {                                                      // 173\n      var args, evtArgs, evtAt, evtAtArgs, handler, i, self, trigger, _ref;                                // 174\n      self = this;                                                                                         // 175\n      args = _.toArray(arguments).slice(1);                                                                // 176\n      if (evt === 'movedTo') {                                                                             // 177\n        trigger = function(callbacks) {                                                                    // 178\n          if (evt in callbacks) {                                                                          // 179\n            return callbacks[evt].apply(self, args);                                                       // 180\n          }                                                                                                // 181\n        };                                                                                                 // 182\n      } else {                                                                                             // 183\n        evtArgs = args.slice(0, -1);                                                                       // 184\n        evtAt = evt + 'At';                                                                                // 185\n        evtAtArgs = args;                                                                                  // 186\n        trigger = function(callbacks) {                                                                    // 187\n          if (evt in callbacks) {                                                                          // 188\n            callbacks[evt].apply(self, evtArgs);                                                           // 189\n          }                                                                                                // 190\n          if (evtAt in callbacks) {                                                                        // 191\n            return callbacks[evtAt].apply(self, evtAtArgs);                                                // 192\n          }                                                                                                // 193\n        };                                                                                                 // 194\n      }                                                                                                    // 195\n      _ref = this._handlers;                                                                               // 196\n      for (i in _ref) {                                                                                    // 197\n        handler = _ref[i];                                                                                 // 198\n        if (!(i in this._handlers)) {                                                                      // 199\n          continue;                                                                                        // 200\n        }                                                                                                  // 201\n        if (handler.stopped) {                                                                             // 202\n          delete this._handlers[i];                                                                        // 203\n          continue;                                                                                        // 204\n        }                                                                                                  // 205\n        trigger(handler.callbacks);                                                                        // 206\n      }                                                                                                    // 207\n    };                                                                                                     // 208\n                                                                                                           // 209\n    ReactiveList.prototype._hasActiveTrigger = function(evt) {                                             // 210\n      return _.any(this._handlers, function(handler) {                                                     // 211\n        return !handler.stopped && evt in handler.callbacks;                                               // 212\n      });                                                                                                  // 213\n    };                                                                                                     // 214\n                                                                                                           // 215\n    ReactiveList.prototype._indexSet = function(idx, val) {                                                // 216\n      var org, rtn;                                                                                        // 217\n      rtn = val;                                                                                           // 218\n      if (this._list[idx] !== val) {                                                                       // 219\n        org = list[idx];                                                                                   // 220\n        rtn = ReactiveList.__super__._indexSet.apply(this, arguments);                                     // 221\n        this._trigger('changed', this._list[idx], org, idx);                                               // 222\n      }                                                                                                    // 223\n      return rtn;                                                                                          // 224\n    };                                                                                                     // 225\n                                                                                                           // 226\n    return ReactiveList;                                                                                   // 227\n                                                                                                           // 228\n  })(ReactiveArray);                                                                                       // 229\n                                                                                                           // 230\n  ReactiveList.wrap = function(arr) {                                                                      // 231\n    var obj;                                                                                               // 232\n    obj = new ReactiveList;                                                                                // 233\n    obj._list = _.toArray(arr);                                                                            // 234\n    obj._syncIndexProxies(true);                                                                           // 235\n    return obj;                                                                                            // 236\n  };                                                                                                       // 237\n                                                                                                           // 238\n  EJSON.addType('reactive-list', function(jsonObj) {                                                       // 239\n    return ReactiveList.wrap(jsonObj);                                                                     // 240\n  });                                                                                                      // 241\n                                                                                                           // 242\n  LiveHandler = (function() {                                                                              // 243\n    function LiveHandler(callbacks) {                                                                      // 244\n      var self;                                                                                            // 245\n      self = this;                                                                                         // 246\n      this.stopped = false;                                                                                // 247\n      this.callbacks = callbacks;                                                                          // 248\n      if (Deps.active) {                                                                                   // 249\n        Deps.onInvalidate(function() {                                                                     // 250\n          return self.stop();                                                                              // 251\n        });                                                                                                // 252\n      }                                                                                                    // 253\n    }                                                                                                      // 254\n                                                                                                           // 255\n    LiveHandler.prototype.stop = function() {                                                              // 256\n      return this.stopped = true;                                                                          // 257\n    };                                                                                                     // 258\n                                                                                                           // 259\n    return LiveHandler;                                                                                    // 260\n                                                                                                           // 261\n  })();                                                                                                    // 262\n                                                                                                           // 263\n}).call(this);                                                                                             // 264\n                                                                                                           // 265\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 855\n                                                                                                                  // 856\n}).call(this);                                                                                                    // 857\n                                                                                                                  // 858\n                                                                                                                  // 859\n                                                                                                                  // 860\n                                                                                                                  // 861\n                                                                                                                  // 862\n                                                                                                                  // 863\n(function () {                                                                                                    // 864\n                                                                                                                  // 865\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 866\n//                                                                                                         //     // 867\n// packages/mrt:reactive-extra/lib/observe-sequence.js                                                     //     // 868\n//                                                                                                         //     // 869\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 870\n                                                                                                           //     // 871\n// Generated by CoffeeScript 1.7.1                                                                         // 1   // 872\n(function() {                                                                                              // 2   // 873\n  var ObserveSequence, ObserveSequenceFetch, ObserveSequenceObserve, diffArray, idParse, idStringify;      // 3   // 874\n                                                                                                           // 4   // 875\n  ObserveSequence = Package['observe-sequence'].ObserveSequence;                                           // 5   // 876\n                                                                                                           // 6   // 877\n  idStringify = LocalCollection._idStringify;                                                              // 7   // 878\n                                                                                                           // 8   // 879\n  idParse = LocalCollection._idParse;                                                                      // 9   // 880\n                                                                                                           // 10  // 881\n  ObserveSequenceFetch = ObserveSequence.fetch;                                                            // 11  // 882\n                                                                                                           // 12  // 883\n  ObserveSequence.fetch = function(seq) {                                                                  // 13  // 884\n    if (seq && seq instanceof ReactiveList) {                                                              // 14  // 885\n      return seq;                                                                                          // 15  // 886\n    }                                                                                                      // 16  // 887\n    return ObserveSequenceFetch.call(this, seq);                                                           // 17  // 888\n  };                                                                                                       // 18  // 889\n                                                                                                           // 19  // 890\n  ObserveSequenceObserve = ObserveSequence.observe;                                                        // 20  // 891\n                                                                                                           // 21  // 892\n  ObserveSequence.observe = function(sequenceFunc, callbacks) {                                            // 22  // 893\n    var computation, lastSeq, lastSeqArray, observe;                                                       // 23  // 894\n    observe = false;                                                                                       // 24  // 895\n    Deps.nonreactive(function() {                                                                          // 25  // 896\n      return observe = sequenceFunc() instanceof ReactiveList;                                             // 26  // 897\n    });                                                                                                    // 27  // 898\n    if (!observe) {                                                                                        // 28  // 899\n      return ObserveSequenceObserve.call(this, sequenceFunc, callbacks);                                   // 29  // 900\n    }                                                                                                      // 30  // 901\n    lastSeq = null;                                                                                        // 31  // 902\n    lastSeqArray = [];                                                                                     // 32  // 903\n    computation = Deps.autorun(function() {                                                                // 33  // 904\n      var activeObserveHandle, idsUsed, seq, seqArray;                                                     // 34  // 905\n      seq = sequenceFunc();                                                                                // 35  // 906\n      if (activeObserveHandle) {                                                                           // 36  // 907\n        lastSeqArray = _.map(activeObserveHandle._fetch(), function(doc) {                                 // 37  // 908\n          return {                                                                                         // 38  // 909\n            _id: doc._id,                                                                                  // 39  // 910\n            item: doc                                                                                      // 40  // 911\n          };                                                                                               // 41  // 912\n        });                                                                                                // 42  // 913\n        activeObserveHandle.stop();                                                                        // 43  // 914\n        activeObserveHandle = null;                                                                        // 44  // 915\n      }                                                                                                    // 45  // 916\n      idsUsed = {};                                                                                        // 46  // 917\n      seqArray = _.map(seq, function(item, index) {                                                        // 47  // 918\n        var id, idString;                                                                                  // 48  // 919\n        id = void 0;                                                                                       // 49  // 920\n        if (typeof item === \"string\") {                                                                    // 50  // 921\n          id = \"-\" + item;                                                                                 // 51  // 922\n        } else if (typeof item === \"number\" || typeof item === \"boolean\" || item === undefined) {          // 52  // 923\n          id = item;                                                                                       // 53  // 924\n        } else if (typeof item === \"object\") {                                                             // 54  // 925\n          id = (item && item._id) || index;                                                                // 55  // 926\n        } else {                                                                                           // 56  // 927\n          throw new Error(\"{{#each}} doesn't support arrays with \" + \"elements of type \" + typeof item);   // 57  // 928\n        }                                                                                                  // 58  // 929\n        idString = idStringify(id);                                                                        // 59  // 930\n        if (idsUsed[idString]) {                                                                           // 60  // 931\n          if (typeof item === \"object\" && \"_id\" in item) {                                                 // 61  // 932\n            warn(\"duplicate id \" + id + \" in\", seq);                                                       // 62  // 933\n          }                                                                                                // 63  // 934\n          id = Random.id();                                                                                // 64  // 935\n        } else {                                                                                           // 65  // 936\n          idsUsed[idString] = true;                                                                        // 66  // 937\n        }                                                                                                  // 67  // 938\n        return {                                                                                           // 68  // 939\n          _id: id,                                                                                         // 69  // 940\n          item: item                                                                                       // 70  // 941\n        };                                                                                                 // 71  // 942\n      });                                                                                                  // 72  // 943\n      diffArray(lastSeqArray, seqArray, callbacks);                                                        // 73  // 944\n      lastSeq = seq;                                                                                       // 74  // 945\n      return lastSeqArray = seqArray;                                                                      // 75  // 946\n    });                                                                                                    // 76  // 947\n    return {                                                                                               // 77  // 948\n      stop: function() {                                                                                   // 78  // 949\n        computation.stop();                                                                                // 79  // 950\n      }                                                                                                    // 80  // 951\n    };                                                                                                     // 81  // 952\n  };                                                                                                       // 82  // 953\n                                                                                                           // 83  // 954\n  diffArray = function(lastSeqArray, seqArray, callbacks) {                                                // 84  // 955\n    var diffFn, lengthCur, newIdObjects, oldIdObjects, posCur, posNew, posOld;                             // 85  // 956\n    diffFn = Package.minimongo.LocalCollection._diffQueryOrderedChanges;                                   // 86  // 957\n    oldIdObjects = [];                                                                                     // 87  // 958\n    newIdObjects = [];                                                                                     // 88  // 959\n    posOld = {};                                                                                           // 89  // 960\n    posNew = {};                                                                                           // 90  // 961\n    posCur = {};                                                                                           // 91  // 962\n    lengthCur = lastSeqArray.length;                                                                       // 92  // 963\n    _.each(seqArray, function(doc, i) {                                                                    // 93  // 964\n      newIdObjects.push({                                                                                  // 94  // 965\n        _id: doc._id                                                                                       // 95  // 966\n      });                                                                                                  // 96  // 967\n      posNew[idStringify(doc._id)] = i;                                                                    // 97  // 968\n    });                                                                                                    // 98  // 969\n    _.each(lastSeqArray, function(doc, i) {                                                                // 99  // 970\n      oldIdObjects.push({                                                                                  // 100\n        _id: doc._id                                                                                       // 101\n      });                                                                                                  // 102\n      posOld[idStringify(doc._id)] = i;                                                                    // 103\n      posCur[idStringify(doc._id)] = i;                                                                    // 104\n    });                                                                                                    // 105\n    diffFn(oldIdObjects, newIdObjects, {                                                                   // 106\n      addedBefore: function(id, doc, before) {                                                             // 107\n        var position;                                                                                      // 108\n        position = (before ? posCur[idStringify(before)] : lengthCur);                                     // 109\n        _.each(posCur, function(pos, id) {                                                                 // 110\n          if (pos >= position) {                                                                           // 111\n            posCur[id]++;                                                                                  // 112\n          }                                                                                                // 113\n        });                                                                                                // 114\n        lengthCur++;                                                                                       // 115\n        posCur[idStringify(id)] = position;                                                                // 116\n        callbacks.addedAt(id, seqArray[posNew[idStringify(id)]].item, position, before);                   // 117\n      },                                                                                                   // 118\n      movedBefore: function(id, before) {                                                                  // 119\n        var position, prevPosition;                                                                        // 120\n        prevPosition = posCur[idStringify(id)];                                                            // 121\n        position = (before ? posCur[idStringify(before)] : lengthCur - 1);                                 // 122\n        _.each(posCur, function(pos, id) {                                                                 // 123\n          if (pos >= prevPosition && pos <= position) {                                                    // 124\n            posCur[id]--;                                                                                  // 125\n          } else {                                                                                         // 126\n            if (pos <= prevPosition && pos >= position) {                                                  // 127\n              posCur[id]++;                                                                                // 128\n            }                                                                                              // 129\n          }                                                                                                // 130\n        });                                                                                                // 131\n        posCur[idStringify(id)] = position;                                                                // 132\n        callbacks.movedTo(id, seqArray[posNew[idStringify(id)]].item, prevPosition, position, before);     // 133\n      },                                                                                                   // 134\n      removed: function(id) {                                                                              // 135\n        var prevPosition;                                                                                  // 136\n        prevPosition = posCur[idStringify(id)];                                                            // 137\n        _.each(posCur, function(pos, id) {                                                                 // 138\n          if (pos >= prevPosition) {                                                                       // 139\n            posCur[id]--;                                                                                  // 140\n          }                                                                                                // 141\n        });                                                                                                // 142\n        delete posCur[idStringify(id)];                                                                    // 143\n        lengthCur--;                                                                                       // 144\n        callbacks.removedAt(id, lastSeqArray[posOld[idStringify(id)]].item, prevPosition);                 // 145\n      }                                                                                                    // 146\n    });                                                                                                    // 147\n    _.each(posNew, function(pos, idString) {                                                               // 148\n      var id, newItem, oldItem;                                                                            // 149\n      id = idParse(idString);                                                                              // 150\n      if (_.has(posOld, idString)) {                                                                       // 151\n        newItem = seqArray[pos].item;                                                                      // 152\n        oldItem = lastSeqArray[posOld[idString]].item;                                                     // 153\n        if (typeof newItem === \"object\" || newItem !== oldItem) {                                          // 154\n          callbacks.changedAt(id, newItem, oldItem, pos);                                                  // 155\n        }                                                                                                  // 156\n      }                                                                                                    // 157\n    });                                                                                                    // 158\n  };                                                                                                       // 159\n                                                                                                           // 160\n}).call(this);                                                                                             // 161\n                                                                                                           // 162\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 1034\n                                                                                                                  // 1035\n}).call(this);                                                                                                    // 1036\n                                                                                                                  // 1037\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['mrt:reactive-extra'] = {};\n\n})();\n","servePath":"/packages/mrt_reactive-extra.js"}]