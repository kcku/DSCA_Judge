[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar EJSON = Package.ejson.EJSON;\nvar _ = Package.underscore._;\n\n/* Package-scope variables */\nvar left, right;\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                //\n// packages/mrt_reactive-extra/packages/mrt_reactive-extra.js                                                     //\n//                                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                  //\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                         //\n// packages/mrt:reactive-extra/lib/reactive-object.js                                                      //\n//                                                                                                         //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                           //\n// Generated by CoffeeScript 1.7.1                                                                         // 1\n(function() {                                                                                              // 2\n  this.ReactiveObject = (function() {                                                                      // 3\n    function ReactiveObject(properties) {                                                                  // 4\n      var self;                                                                                            // 5\n      this._definePrivateProperty('_items', {});                                                           // 6\n      this._definePrivateProperty('_itemsDeps', {});                                                       // 7\n      self = this;                                                                                         // 8\n      if (_.isArray(properties)) {                                                                         // 9\n        _.each(properties, function(prop) {                                                                // 10\n          return self.defineProperty(prop, void 0);                                                        // 11\n        });                                                                                                // 12\n      }                                                                                                    // 13\n      if (_.isObject(properties)) {                                                                        // 14\n        _.each(properties, function(value, prop) {                                                         // 15\n          return self.defineProperty(prop, value);                                                         // 16\n        });                                                                                                // 17\n      }                                                                                                    // 18\n    }                                                                                                      // 19\n                                                                                                           // 20\n    ReactiveObject.prototype.defineProperty = function(name, value) {                                      // 21\n      Object.defineProperty(this, name, {                                                                  // 22\n        configurable: true,                                                                                // 23\n        enumerable: true,                                                                                  // 24\n        get: _.bind(this._propertyGet, this, name),                                                        // 25\n        set: _.bind(this._propertySet, this, name)                                                         // 26\n      });                                                                                                  // 27\n      this[name] = value;                                                                                  // 28\n      return this;                                                                                         // 29\n    };                                                                                                     // 30\n                                                                                                           // 31\n    ReactiveObject.prototype.undefineProperty = function(name) {                                           // 32\n      var dep;                                                                                             // 33\n      dep = this._itemsDeps[name];                                                                         // 34\n      delete this[name];                                                                                   // 35\n      delete this._items[name];                                                                            // 36\n      delete this._itemsDeps[name];                                                                        // 37\n      if (dep) {                                                                                           // 38\n        dep.changed();                                                                                     // 39\n      }                                                                                                    // 40\n      return this;                                                                                         // 41\n    };                                                                                                     // 42\n                                                                                                           // 43\n    ReactiveObject.prototype.clone = function() {                                                          // 44\n      return new ReactiveObject(_.clone(this._items));                                                     // 45\n    };                                                                                                     // 46\n                                                                                                           // 47\n    ReactiveObject.prototype.equals = function(obj) {                                                      // 48\n      return (obj != null) && obj instanceof ReactiveObject && _.isEqual(obj._items, this._items);         // 49\n    };                                                                                                     // 50\n                                                                                                           // 51\n    ReactiveObject.prototype.typeName = function() {                                                       // 52\n      return 'reactive-object';                                                                            // 53\n    };                                                                                                     // 54\n                                                                                                           // 55\n    ReactiveObject.prototype.toJSONValue = function() {                                                    // 56\n      return EJSON.toJSONValue(this._items);                                                               // 57\n    };                                                                                                     // 58\n                                                                                                           // 59\n    ReactiveObject.prototype._propertySet = function(name, value) {                                        // 60\n      var _ref;                                                                                            // 61\n      this._items[name] = value;                                                                           // 62\n      if ((_ref = this._itemsDeps[name]) != null) {                                                        // 63\n        _ref.changed();                                                                                    // 64\n      }                                                                                                    // 65\n      return this._items[name];                                                                            // 66\n    };                                                                                                     // 67\n                                                                                                           // 68\n    ReactiveObject.prototype._propertyGet = function(name) {                                               // 69\n      var _base;                                                                                           // 70\n      if ((_base = this._itemsDeps)[name] == null) {                                                       // 71\n        _base[name] = new Deps.Dependency();                                                               // 72\n      }                                                                                                    // 73\n      this._itemsDeps[name].depend();                                                                      // 74\n      return this._items[name];                                                                            // 75\n    };                                                                                                     // 76\n                                                                                                           // 77\n    ReactiveObject.prototype._definePrivateProperty = function(name, value) {                              // 78\n      return Object.defineProperty(this, name, {                                                           // 79\n        configurable: true,                                                                                // 80\n        enumerable: false,                                                                                 // 81\n        writable: true,                                                                                    // 82\n        value: value                                                                                       // 83\n      });                                                                                                  // 84\n    };                                                                                                     // 85\n                                                                                                           // 86\n    return ReactiveObject;                                                                                 // 87\n                                                                                                           // 88\n  })();                                                                                                    // 89\n                                                                                                           // 90\n  EJSON.addType('reactive-object', function(jsonObj) {                                                     // 91\n    return new ReactiveObject(jsonObj);                                                                    // 92\n  });                                                                                                      // 93\n                                                                                                           // 94\n}).call(this);                                                                                             // 95\n                                                                                                           // 96\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                         //\n// packages/mrt:reactive-extra/lib/reactive-dictionary.js                                                  //\n//                                                                                                         //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                           //\n// Generated by CoffeeScript 1.7.1                                                                         // 1\n(function() {                                                                                              // 2\n  var __hasProp = {}.hasOwnProperty,                                                                       // 3\n    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };\n                                                                                                           // 6\n  this.ReactiveDictionary = (function(_super) {                                                            // 7\n    __extends(ReactiveDictionary, _super);                                                                 // 8\n                                                                                                           // 9\n    function ReactiveDictionary() {                                                                        // 10\n      this._definePrivateProperty('_itemsKeyDep', new Deps.Dependency());                                  // 11\n      this._definePrivateProperty('_itemsValueDep', new Deps.Dependency());                                // 12\n      ReactiveDictionary.__super__.constructor.apply(this, arguments);                                     // 13\n    }                                                                                                      // 14\n                                                                                                           // 15\n    ReactiveDictionary.prototype.add = function(key, value) {                                              // 16\n      if (__indexOf.call(this, key) >= 0) {                                                                // 17\n        throw 'An element with Key ' + key + ' already exists.';                                           // 18\n      }                                                                                                    // 19\n      return this.defineProperty(key, value);                                                              // 20\n    };                                                                                                     // 21\n                                                                                                           // 22\n    ReactiveDictionary.prototype.remove = function(key) {                                                  // 23\n      return this.undefineProperty(key);                                                                   // 24\n    };                                                                                                     // 25\n                                                                                                           // 26\n    ReactiveDictionary.prototype.clear = function() {                                                      // 27\n      var deps, self;                                                                                      // 28\n      self = this;                                                                                         // 29\n      deps = this._itemsDeps;                                                                              // 30\n      _.each(this._items, function(v, prop) {                                                              // 31\n        return delete self[prop];                                                                          // 32\n      });                                                                                                  // 33\n      this._items = {};                                                                                    // 34\n      this._itemsDeps = {};                                                                                // 35\n      _.invoke(deps, 'changed');                                                                           // 36\n      this._itemsKeyDep.changed();                                                                         // 37\n      return this._itemsValueDep.changed();                                                                // 38\n    };                                                                                                     // 39\n                                                                                                           // 40\n    ReactiveDictionary.prototype.count = function() {                                                      // 41\n      this._itemsKeyDep.depend();                                                                          // 42\n      return _.size(this._items);                                                                          // 43\n    };                                                                                                     // 44\n                                                                                                           // 45\n    ReactiveDictionary.prototype.keys = function() {                                                       // 46\n      this._itemsKeyDep.depend();                                                                          // 47\n      return _.keys(this._items);                                                                          // 48\n    };                                                                                                     // 49\n                                                                                                           // 50\n    ReactiveDictionary.prototype.values = function() {                                                     // 51\n      this._itemsValueDep.depend();                                                                        // 52\n      return _.values(this._items);                                                                        // 53\n    };                                                                                                     // 54\n                                                                                                           // 55\n    ReactiveDictionary.prototype.contains = function(key) {                                                // 56\n      if (_.has(this._items, key)) {                                                                       // 57\n        this._propertyGet(key);                                                                            // 58\n        return true;                                                                                       // 59\n      }                                                                                                    // 60\n      this._itemsKeyDep.depend();                                                                          // 61\n      return false;                                                                                        // 62\n    };                                                                                                     // 63\n                                                                                                           // 64\n    ReactiveDictionary.prototype.containsValue = function(value) {                                         // 65\n      var key, val, _ref;                                                                                  // 66\n      _ref = this._items;                                                                                  // 67\n      for (key in _ref) {                                                                                  // 68\n        val = _ref[key];                                                                                   // 69\n        if (!(_.has(this._items, key) && _.isEqual(val, value))) {                                         // 70\n          continue;                                                                                        // 71\n        }                                                                                                  // 72\n        this._propertyGet(key);                                                                            // 73\n        return true;                                                                                       // 74\n      }                                                                                                    // 75\n      this._itemsValueDep.depend();                                                                        // 76\n      return false;                                                                                        // 77\n    };                                                                                                     // 78\n                                                                                                           // 79\n    ReactiveDictionary.prototype.defineProperty = function() {                                             // 80\n      var rtn;                                                                                             // 81\n      rtn = ReactiveDictionary.__super__.defineProperty.apply(this, arguments);                            // 82\n      this._itemsKeyDep.changed();                                                                         // 83\n      this._itemsValueDep.changed();                                                                       // 84\n      return rtn;                                                                                          // 85\n    };                                                                                                     // 86\n                                                                                                           // 87\n    ReactiveDictionary.prototype.undefineProperty = function() {                                           // 88\n      var rtn;                                                                                             // 89\n      rtn = ReactiveDictionary.__super__.undefineProperty.apply(this, arguments);                          // 90\n      this._itemsKeyDep.changed();                                                                         // 91\n      this._itemsValueDep.changed();                                                                       // 92\n      return rtn;                                                                                          // 93\n    };                                                                                                     // 94\n                                                                                                           // 95\n    ReactiveDictionary.prototype._propertySet = function() {                                               // 96\n      var rtn;                                                                                             // 97\n      rtn = ReactiveDictionary.__super__._propertySet.apply(this, arguments);                              // 98\n      this._itemsValueDep.changed();                                                                       // 99\n      return rtn;                                                                                          // 100\n    };                                                                                                     // 101\n                                                                                                           // 102\n    ReactiveDictionary.prototype.clone = function() {                                                      // 103\n      return new ReactiveDictionary(_.clone(this._items));                                                 // 104\n    };                                                                                                     // 105\n                                                                                                           // 106\n    ReactiveDictionary.prototype.equals = function(obj) {                                                  // 107\n      return (obj != null) && obj instanceof ReactiveDictionary && _.isEqual(obj._items, this._items);     // 108\n    };                                                                                                     // 109\n                                                                                                           // 110\n    ReactiveDictionary.prototype.typeName = function() {                                                   // 111\n      return 'reactive-dictionary';                                                                        // 112\n    };                                                                                                     // 113\n                                                                                                           // 114\n    return ReactiveDictionary;                                                                             // 115\n                                                                                                           // 116\n  })(ReactiveObject);                                                                                      // 117\n                                                                                                           // 118\n  EJSON.addType('reactive-dictionary', function(jsonObj) {                                                 // 119\n    return new ReactiveDictionary(jsonObj);                                                                // 120\n  });                                                                                                      // 121\n                                                                                                           // 122\n}).call(this);                                                                                             // 123\n                                                                                                           // 124\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                         //\n// packages/mrt:reactive-extra/lib/reactive-array.js                                                       //\n//                                                                                                         //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                           //\n// Generated by CoffeeScript 1.7.1                                                                         // 1\n(function() {                                                                                              // 2\n  this.ReactiveArray = (function() {                                                                       // 3\n    function ReactiveArray() {                                                                             // 4\n      this._definePrivateProperty('_list', []);                                                            // 5\n      this._definePrivateProperty('_listDeps', []);                                                        // 6\n      this._definePrivateProperty('_listLengthDep', new Deps.Dependency());                                // 7\n      this._definePrivateProperty('_listValueDep', new Deps.Dependency());                                 // 8\n      this._definePrivateProperty('_listPropertyLengh', 0);                                                // 9\n      Object.defineProperty(this, 'length', {                                                              // 10\n        configurable: false,                                                                               // 11\n        enumerable: false,                                                                                 // 12\n        get: function() {                                                                                  // 13\n          this._listLengthDep.depend();                                                                    // 14\n          return this._list.length;                                                                        // 15\n        },                                                                                                 // 16\n        set: function(length) {                                                                            // 17\n          this._list.length = length;                                                                      // 18\n          this._syncIndexProxies();                                                                        // 19\n          return this._list.length;                                                                        // 20\n        }                                                                                                  // 21\n      });                                                                                                  // 22\n      if (arguments.length > 0) {                                                                          // 23\n        this._list = _.toArray(arguments);                                                                 // 24\n        this._syncIndexProxies(true);                                                                      // 25\n      }                                                                                                    // 26\n    }                                                                                                      // 27\n                                                                                                           // 28\n    ReactiveArray.prototype.toArray = function() {                                                         // 29\n      this._listLengthDep.depend();                                                                        // 30\n      this._listValueDep.depend();                                                                         // 31\n      return this._list.slice();                                                                           // 32\n    };                                                                                                     // 33\n                                                                                                           // 34\n    ReactiveArray.prototype.reverse = function() {                                                         // 35\n      Array.prototype.reverse.apply(this._list);                                                           // 36\n      for (left = 0, right = this._list.length - 1; left < right; left += 1, right -= 1) {                 // 37\n      if (left === right) { continue; }                                                                    // 38\n      if (this._listDeps[left]) { this._listDeps[left].changed(); }                                        // 39\n      if (this._listDeps[right]) { this._listDeps[right].changed(); }                                      // 40\n    };                                                                                                     // 41\n      this._listValueDep.changed();                                                                        // 42\n      return this;                                                                                         // 43\n    };                                                                                                     // 44\n                                                                                                           // 45\n    ReactiveArray.prototype.sort = function() {                                                            // 46\n      var dep, i, orgList, _i, _len, _ref;                                                                 // 47\n      orgList = this._list.slice();                                                                        // 48\n      Array.prototype.sort.apply(this._list, arguments);                                                   // 49\n      _ref = this._listDeps;                                                                               // 50\n      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {                                          // 51\n        dep = _ref[i];                                                                                     // 52\n        if (dep && orgList[i] !== this._list[i]) {                                                         // 53\n          dep.changed();                                                                                   // 54\n        }                                                                                                  // 55\n      }                                                                                                    // 56\n      this._listValueDep.changed();                                                                        // 57\n      return this;                                                                                         // 58\n    };                                                                                                     // 59\n                                                                                                           // 60\n    ReactiveArray.prototype.indexOf = function(searchElement, fromIndex) {                                 // 61\n      var i, idx, _base, _i, _ref;                                                                         // 62\n      fromIndex = typeof isSorted == 'number' ? fromIndex : 0;                                             // 63\n      idx = _.indexOf(this._list, searchElement, fromIndex);                                               // 64\n      if (idx === -1) {                                                                                    // 65\n        this._listLengthDep.depend();                                                                      // 66\n        this._listValueDep.depend();                                                                       // 67\n      } else {                                                                                             // 68\n        for (i = _i = fromIndex, _ref = idx + 1; _i < _ref; i = _i += 1) {                                 // 69\n          if ((_base = this._listDeps)[i] == null) {                                                       // 70\n            _base[i] = new Deps.Dependency();                                                              // 71\n          }                                                                                                // 72\n          this._listDeps[i].depend();                                                                      // 73\n        }                                                                                                  // 74\n      }                                                                                                    // 75\n      return idx;                                                                                          // 76\n    };                                                                                                     // 77\n                                                                                                           // 78\n    ReactiveArray.prototype.lastIndexOf = function(searchElement, fromIndex) {                             // 79\n      var i, idx, _base, _i;                                                                               // 80\n      fromIndex = typeof isSorted == 'number' ? fromIndex : this.length;                                   // 81\n      idx = _.lastIndexOf(this._list, searchElement, fromIndex);                                           // 82\n      if (idx === -1) {                                                                                    // 83\n        this._listValueDep.depend();                                                                       // 84\n      } else {                                                                                             // 85\n        for (i = _i = idx; _i < fromIndex; i = _i += 1) {                                                  // 86\n          if ((_base = this._listDeps)[i] == null) {                                                       // 87\n            _base[i] = new Deps.Dependency();                                                              // 88\n          }                                                                                                // 89\n          this._listDeps[i].depend();                                                                      // 90\n        }                                                                                                  // 91\n      }                                                                                                    // 92\n      return idx;                                                                                          // 93\n    };                                                                                                     // 94\n                                                                                                           // 95\n    ReactiveArray.prototype.forEach = function(iterator, thisArg) {                                        // 96\n      var i, _i, _ref;                                                                                     // 97\n      for (i = _i = 0, _ref = this.length; _i < _ref; i = _i += 1) {                                       // 98\n        iterator.call(thisArg, this[i], i, this);                                                          // 99\n      }                                                                                                    // 100\n    };                                                                                                     // 101\n                                                                                                           // 102\n    ReactiveArray.prototype.every = function(iterator, thisArg) {                                          // 103\n      var i, _base, _i, _ref;                                                                              // 104\n      for (i = _i = 0, _ref = this._list.length; _i < _ref; i = _i += 1) {                                 // 105\n        if (!iterator.call(thisArg, this._list[i], i, this)) {                                             // 106\n          if ((_base = this._listDeps)[i] == null) {                                                       // 107\n            _base[i] = new Deps.Dependency();                                                              // 108\n          }                                                                                                // 109\n          this._listDeps[i].depend();                                                                      // 110\n          return false;                                                                                    // 111\n        }                                                                                                  // 112\n      }                                                                                                    // 113\n      this._listLengthDep.depend();                                                                        // 114\n      this._listValueDep.depend();                                                                         // 115\n      return true;                                                                                         // 116\n    };                                                                                                     // 117\n                                                                                                           // 118\n    ReactiveArray.prototype.some = function(iterator, thisArg) {                                           // 119\n      var i, _base, _i, _ref;                                                                              // 120\n      for (i = _i = 0, _ref = this._list.length; _i < _ref; i = _i += 1) {                                 // 121\n        if (!!iterator.call(thisArg, this._list[i], i, this)) {                                            // 122\n          if ((_base = this._listDeps)[i] == null) {                                                       // 123\n            _base[i] = new Deps.Dependency();                                                              // 124\n          }                                                                                                // 125\n          this._listDeps[i].depend();                                                                      // 126\n          return true;                                                                                     // 127\n        }                                                                                                  // 128\n      }                                                                                                    // 129\n      this._listLengthDep.depend();                                                                        // 130\n      this._listValueDep.depend();                                                                         // 131\n      return false;                                                                                        // 132\n    };                                                                                                     // 133\n                                                                                                           // 134\n    ReactiveArray.prototype.clone = function() {                                                           // 135\n      return this.constructor.wrap(this._list);                                                            // 136\n    };                                                                                                     // 137\n                                                                                                           // 138\n    ReactiveArray.prototype.equals = function(obj) {                                                       // 139\n      return (obj != null) && obj instanceof ReactiveArray && _.isEqual(obj._list, this._list);            // 140\n    };                                                                                                     // 141\n                                                                                                           // 142\n    ReactiveArray.prototype.typeName = function() {                                                        // 143\n      return 'reactive-array';                                                                             // 144\n    };                                                                                                     // 145\n                                                                                                           // 146\n    ReactiveArray.prototype.toJSONValue = function() {                                                     // 147\n      return EJSON.toJSONValue(this._list);                                                                // 148\n    };                                                                                                     // 149\n                                                                                                           // 150\n    ReactiveArray.prototype._syncIndexProxies = function(suppress) {                                       // 151\n      var dep, i, length, _i, _j, _ref, _ref1;                                                             // 152\n      length = this._list.length;                                                                          // 153\n      if (length > this._listPropertyLengh) {                                                              // 154\n        for (i = _i = _ref = this._listPropertyLengh; _i < length; i = _i += 1) {                          // 155\n          this._defineIndexProperty(i);                                                                    // 156\n        }                                                                                                  // 157\n      } else if (this._listPropertyLengh > length) {                                                       // 158\n        for (i = _j = length, _ref1 = this._listPropertyLengh; _j < _ref1; i = _j += 1) {                  // 159\n          dep = this._listDeps[i];                                                                         // 160\n          delete this[i];                                                                                  // 161\n          delete this._list[i];                                                                            // 162\n          delete this._listDeps[i];                                                                        // 163\n          if (dep) {                                                                                       // 164\n            dep.changed();                                                                                 // 165\n          }                                                                                                // 166\n        }                                                                                                  // 167\n      }                                                                                                    // 168\n      if (!suppress && this._listPropertyLengh !== length) {                                               // 169\n        this._listLengthDep.changed();                                                                     // 170\n        this._listValueDep.changed();                                                                      // 171\n      }                                                                                                    // 172\n      return this._listPropertyLengh = this._list.length;                                                  // 173\n    };                                                                                                     // 174\n                                                                                                           // 175\n    ReactiveArray.prototype._defineIndexProperty = function(i) {                                           // 176\n      return Object.defineProperty(this, i, {                                                              // 177\n        configurable: true,                                                                                // 178\n        enumerable: true,                                                                                  // 179\n        set: _.bind(this._indexSet, this, i),                                                              // 180\n        get: _.bind(this._indexGet, this, i)                                                               // 181\n      });                                                                                                  // 182\n    };                                                                                                     // 183\n                                                                                                           // 184\n    ReactiveArray.prototype._indexGet = function(i) {                                                      // 185\n      var _base;                                                                                           // 186\n      if ((_base = this._listDeps)[i] == null) {                                                           // 187\n        _base[i] = new Deps.Dependency();                                                                  // 188\n      }                                                                                                    // 189\n      this._listDeps[i].depend();                                                                          // 190\n      return this._list[i];                                                                                // 191\n    };                                                                                                     // 192\n                                                                                                           // 193\n    ReactiveArray.prototype._indexSet = function(i, val) {                                                 // 194\n      var _ref;                                                                                            // 195\n      if (this._list[i] !== val) {                                                                         // 196\n        this._list[i] = val;                                                                               // 197\n        if ((_ref = this._listDeps[i]) != null) {                                                          // 198\n          _ref.changed();                                                                                  // 199\n        }                                                                                                  // 200\n        this._listValueDep.changed();                                                                      // 201\n      }                                                                                                    // 202\n      return val;                                                                                          // 203\n    };                                                                                                     // 204\n                                                                                                           // 205\n    ReactiveArray.prototype._definePrivateProperty = function(name, value) {                               // 206\n      return Object.defineProperty(this, name, {                                                           // 207\n        configurable: true,                                                                                // 208\n        enumerable: false,                                                                                 // 209\n        writable: true,                                                                                    // 210\n        value: value                                                                                       // 211\n      });                                                                                                  // 212\n    };                                                                                                     // 213\n                                                                                                           // 214\n    return ReactiveArray;                                                                                  // 215\n                                                                                                           // 216\n  })();                                                                                                    // 217\n                                                                                                           // 218\n  _.each(['pop', 'push'], function(m) {                                                                    // 219\n    return ReactiveArray.prototype[m] = function() {                                                       // 220\n      var rtn;                                                                                             // 221\n      rtn = Array.prototype[m].apply(this._list, arguments);                                               // 222\n      this._syncIndexProxies();                                                                            // 223\n      return rtn;                                                                                          // 224\n    };                                                                                                     // 225\n  });                                                                                                      // 226\n                                                                                                           // 227\n  _.each(['shift', 'splice', 'unshift'], function(m) {                                                     // 228\n    return ReactiveArray.prototype[m] = function() {                                                       // 229\n      var dep, i, orgList, rtn, _i, _len, _ref;                                                            // 230\n      orgList = this._list.slice();                                                                        // 231\n      rtn = Array.prototype[m].apply(this._list, arguments);                                               // 232\n      this._syncIndexProxies();                                                                            // 233\n      _ref = this._listDeps;                                                                               // 234\n      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {                                          // 235\n        dep = _ref[i];                                                                                     // 236\n        if (dep && orgList[i] !== this._list[i]) {                                                         // 237\n          dep.changed();                                                                                   // 238\n        }                                                                                                  // 239\n      }                                                                                                    // 240\n      return rtn;                                                                                          // 241\n    };                                                                                                     // 242\n  });                                                                                                      // 243\n                                                                                                           // 244\n  _.each(['concat', 'slice'], function(m) {                                                                // 245\n    return ReactiveArray.prototype[m] = function() {                                                       // 246\n      var rtn;                                                                                             // 247\n      rtn = Array.prototype[m].apply(this._list, arguments);                                               // 248\n      this._listLengthDep.depend();                                                                        // 249\n      this._listValueDep.depend();                                                                         // 250\n      return this.constructor.wrap(rtn);                                                                   // 251\n    };                                                                                                     // 252\n  });                                                                                                      // 253\n                                                                                                           // 254\n  _.each(['join', 'toString'], function(m) {                                                               // 255\n    return ReactiveArray.prototype[m] = function() {                                                       // 256\n      var rtn;                                                                                             // 257\n      rtn = Array.prototype[m].apply(this._list, arguments);                                               // 258\n      this._listLengthDep.depend();                                                                        // 259\n      this._listValueDep.depend();                                                                         // 260\n      return rtn;                                                                                          // 261\n    };                                                                                                     // 262\n  });                                                                                                      // 263\n                                                                                                           // 264\n  _.each(['filter', 'map'], function(m) {                                                                  // 265\n    return ReactiveArray.prototype[m] = function(iterator, thisArg) {                                      // 266\n      var iteratorProxy, rtn, self;                                                                        // 267\n      self = this;                                                                                         // 268\n      iteratorProxy = function(value, index) {                                                             // 269\n        return iterator.call(this, value, index, self);                                                    // 270\n      };                                                                                                   // 271\n      rtn = _[m].call(null, this._list, iteratorProxy, thisArg);                                           // 272\n      this._listLengthDep.depend();                                                                        // 273\n      this._listValueDep.depend();                                                                         // 274\n      return this.constructor.wrap(rtn);                                                                   // 275\n    };                                                                                                     // 276\n  });                                                                                                      // 277\n                                                                                                           // 278\n  _.each(['reduce', 'reduceRight'], function(m) {                                                          // 279\n    return ReactiveArray.prototype[m] = function(iterator, initialValue, thisArg) {                        // 280\n      var iteratorProxy, rtn, self;                                                                        // 281\n      self = this;                                                                                         // 282\n      iteratorProxy = function(previousValue, currentValue, index) {                                       // 283\n        return iterator.call(this, previousValue, currentValue, index, self);                              // 284\n      };                                                                                                   // 285\n      if (arguments.length > 1) {                                                                          // 286\n        rtn = _[m].call(null, this._list, iteratorProxy, initialValue, thisArg);                           // 287\n      } else {                                                                                             // 288\n        rtn = _[m].call(null, this._list, iteratorProxy);                                                  // 289\n      }                                                                                                    // 290\n      this._listLengthDep.depend();                                                                        // 291\n      this._listValueDep.depend();                                                                         // 292\n      return rtn;                                                                                          // 293\n    };                                                                                                     // 294\n  });                                                                                                      // 295\n                                                                                                           // 296\n  ReactiveArray.wrap = function(arr) {                                                                     // 297\n    var obj;                                                                                               // 298\n    obj = new ReactiveArray;                                                                               // 299\n    obj._list = _.toArray(arr);                                                                            // 300\n    obj._syncIndexProxies(true);                                                                           // 301\n    return obj;                                                                                            // 302\n  };                                                                                                       // 303\n                                                                                                           // 304\n  EJSON.addType('reactive-array', function(jsonObj) {                                                      // 305\n    return ReactiveArray.wrap(jsonObj);                                                                    // 306\n  });                                                                                                      // 307\n                                                                                                           // 308\n}).call(this);                                                                                             // 309\n                                                                                                           // 310\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                         //\n// packages/mrt:reactive-extra/lib/reactive-list.js                                                        //\n//                                                                                                         //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                           //\n// Generated by CoffeeScript 1.7.1                                                                         // 1\n(function() {                                                                                              // 2\n  var LiveHandler,                                                                                         // 3\n    __hasProp = {}.hasOwnProperty,                                                                         // 4\n    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n                                                                                                           // 6\n  this.ReactiveList = (function(_super) {                                                                  // 7\n    __extends(ReactiveList, _super);                                                                       // 8\n                                                                                                           // 9\n    function ReactiveList() {                                                                              // 10\n      this._definePrivateProperty('_handlers', []);                                                        // 11\n      ReactiveList.__super__.constructor.apply(this, arguments);                                           // 12\n    }                                                                                                      // 13\n                                                                                                           // 14\n    ReactiveList.prototype.observe = function(callbacks) {                                                 // 15\n      var handle, i, _i, _ref;                                                                             // 16\n      handle = new LiveHandler(callbacks);                                                                 // 17\n      this._handlers.push(handle);                                                                         // 18\n      for (i = _i = 0, _ref = this._list.length; _i < _ref; i = _i += 1) {                                 // 19\n        this._trigger('added', this._list[i], i);                                                          // 20\n      }                                                                                                    // 21\n      return handle;                                                                                       // 22\n    };                                                                                                     // 23\n                                                                                                           // 24\n    ReactiveList.prototype.pop = function() {                                                              // 25\n      var rtn;                                                                                             // 26\n      rtn = ReactiveList.__super__.pop.apply(this, arguments);                                             // 27\n      this._trigger('removed', rtn, this._list.length);                                                    // 28\n      return rtn;                                                                                          // 29\n    };                                                                                                     // 30\n                                                                                                           // 31\n    ReactiveList.prototype.push = function() {                                                             // 32\n      var i, orgLength, rtn, _i, _ref;                                                                     // 33\n      orgLength = this._list.length;                                                                       // 34\n      rtn = ReactiveList.__super__.push.apply(this, arguments);                                            // 35\n      for (i = _i = orgLength, _ref = this._list.length; _i < _ref; i = _i += 1) {                         // 36\n        this._trigger('added', this._list[i], i);                                                          // 37\n      }                                                                                                    // 38\n      return rtn;                                                                                          // 39\n    };                                                                                                     // 40\n                                                                                                           // 41\n    ReactiveList.prototype.shift = function() {                                                            // 42\n      var rtn;                                                                                             // 43\n      rtn = ReactiveList.__super__.shift.apply(this, arguments);                                           // 44\n      this._trigger('removed', rtn, 0);                                                                    // 45\n      return rtn;                                                                                          // 46\n    };                                                                                                     // 47\n                                                                                                           // 48\n    ReactiveList.prototype.unshift = function() {                                                          // 49\n      var i, orgLength, rtn, _i, _ref;                                                                     // 50\n      orgLength = this._list.length;                                                                       // 51\n      rtn = ReactiveList.__super__.unshift.apply(this, arguments);                                         // 52\n      for (i = _i = 0, _ref = this._list.length - orgLength; _i < _ref; i = _i += 1) {                     // 53\n        this._trigger('added', this._list[i], i);                                                          // 54\n      }                                                                                                    // 55\n      return rtn;                                                                                          // 56\n    };                                                                                                     // 57\n                                                                                                           // 58\n    ReactiveList.prototype.splice = function() {                                                           // 59\n      var addAmount, changedAmount, i, idx, orgList, rmAmount, rtn, _i, _j, _k, _l, _ref, _ref1;           // 60\n      orgList = this._list.slice();                                                                        // 61\n      rtn = ReactiveList.__super__.splice.apply(this, arguments);                                          // 62\n      idx = arguments[0];                                                                                  // 63\n      if (idx < 0) {                                                                                       // 64\n        idx = orgList.length + idx;                                                                        // 65\n      }                                                                                                    // 66\n      rmAmount = arguments.length > 1 ? arguments[1] : orgList.length - idx;                               // 67\n      if (arguments.length > 2) {                                                                          // 68\n        addAmount = arguments.length - 2;                                                                  // 69\n        if (rmAmount > 0) {                                                                                // 70\n          changedAmount = rmAmount > addAmount ? addAmount : rmAmount;                                     // 71\n          for (i = _i = 0; _i < changedAmount; i = _i += 1) {                                              // 72\n            this._trigger('changed', this._list[idx], orgList[idx], idx);                                  // 73\n            idx++;                                                                                         // 74\n          }                                                                                                // 75\n          addAmount = addAmount - changedAmount;                                                           // 76\n          rmAmount = rmAmount - changedAmount;                                                             // 77\n        }                                                                                                  // 78\n        if ((rmAmount - addAmount) > 0) {                                                                  // 79\n          for (i = _j = 0, _ref = rmAmount - addAmount; _j < _ref; i = _j += 1) {                          // 80\n            this._trigger('removed', orgList[idx + i], idx + i);                                           // 81\n          }                                                                                                // 82\n        } else if ((rmAmount - addAmount) < 0) {                                                           // 83\n          for (i = _k = 0, _ref1 = addAmount - rmAmount; _k < _ref1; i = _k += 1) {                        // 84\n            this._trigger('added', this._list[idx + i], idx + i);                                          // 85\n          }                                                                                                // 86\n        }                                                                                                  // 87\n      } else if (rmAmount > 0) {                                                                           // 88\n        for (i = _l = 0; _l < rmAmount; i = _l += 1) {                                                     // 89\n          this._trigger('removed', orgList[idx + i], idx + i);                                             // 90\n        }                                                                                                  // 91\n      }                                                                                                    // 92\n      return rtn;                                                                                          // 93\n    };                                                                                                     // 94\n                                                                                                           // 95\n    ReactiveList.prototype.reverse = function() {                                                          // 96\n      var array, length;                                                                                   // 97\n      ReactiveList.__super__.reverse.apply(this, arguments);                                               // 98\n      array = this._list;                                                                                  // 99\n      length = this._list.length;                                                                          // 100\n      for (left = 0, right = length - 1; left < right; left += 1, right -= 1) {                            // 101\n      if (right === left) { continue; }                                                                    // 102\n      this._trigger('movedTo', array[left], right, left);                                                  // 103\n      this._trigger('movedTo', array[right], left+1, right);                                               // 104\n    };                                                                                                     // 105\n      return this;                                                                                         // 106\n    };                                                                                                     // 107\n                                                                                                           // 108\n    ReactiveList.prototype.sort = function() {                                                             // 109\n      var currentPosition, finalPosition, lastMove, length, move, moves, org, skip, _i, _len;              // 110\n      org = this._list.slice();                                                                            // 111\n      ReactiveList.__super__.sort.apply(this, arguments);                                                  // 112\n      if (!this._hasActiveTrigger('movedTo')) {                                                            // 113\n        return this;                                                                                       // 114\n      }                                                                                                    // 115\n      length = this._list.length;                                                                          // 116\n      moves = [];                                                                                          // 117\n      currentPosition = 0;                                                                                 // 118\n      while (currentPosition < length) {                                                                   // 119\n        finalPosition = this._list.indexOf(org[currentPosition]);                                          // 120\n        if (currentPosition + 1 === finalPosition) {                                                       // 121\n          while (org[currentPosition + 1] === this._list[finalPosition + 1]) {                             // 122\n            finalPosition++;                                                                               // 123\n            currentPosition++;                                                                             // 124\n          }                                                                                                // 125\n          if (org[currentPosition] === this._list[finalPosition]) {                                        // 126\n            finalPosition++;                                                                               // 127\n            currentPosition++;                                                                             // 128\n          }                                                                                                // 129\n          finalPosition = this._list.indexOf(org[currentPosition]);                                        // 130\n        }                                                                                                  // 131\n        if (org[currentPosition] === org[currentPosition + 1]) {                                           // 132\n          while (org[currentPosition - 1] === this._list[finalPosition]) {                                 // 133\n            finalPosition++;                                                                               // 134\n          }                                                                                                // 135\n          if (org[currentPosition] === this._list[finalPosition]) {                                        // 136\n            finalPosition++;                                                                               // 137\n          }                                                                                                // 138\n          finalPosition = this._list.indexOf(org[currentPosition], finalPosition);                         // 139\n        }                                                                                                  // 140\n        move = {                                                                                           // 141\n          from: currentPosition,                                                                           // 142\n          to: finalPosition                                                                                // 143\n        };                                                                                                 // 144\n        skip = finalPosition === -1 || lastMove && lastMove.to === move.to && lastMove.from === move.from; // 145\n        if (!skip && finalPosition !== currentPosition) {                                                  // 146\n          moves.push(move);                                                                                // 147\n          lastMove = move;                                                                                 // 148\n          org.splice(move.to, 0, (org.splice(move.from, 1))[0]);                                           // 149\n          if (finalPosition < currentPosition) {                                                           // 150\n            currentPosition = finalPosition;                                                               // 151\n          } else {                                                                                         // 152\n            currentPosition--;                                                                             // 153\n          }                                                                                                // 154\n        }                                                                                                  // 155\n        currentPosition++;                                                                                 // 156\n      }                                                                                                    // 157\n      for (_i = 0, _len = moves.length; _i < _len; _i++) {                                                 // 158\n        move = moves[_i];                                                                                  // 159\n        this._trigger('movedTo', this._list[move.to], move.from, move.to);                                 // 160\n      }                                                                                                    // 161\n      return this;                                                                                         // 162\n    };                                                                                                     // 163\n                                                                                                           // 164\n    ReactiveList.prototype.typeName = function() {                                                         // 165\n      return 'reactive-list';                                                                              // 166\n    };                                                                                                     // 167\n                                                                                                           // 168\n    ReactiveList.prototype.equals = function(obj) {                                                        // 169\n      return (obj != null) && obj instanceof ReactiveList && _.isEqual(obj._list, this._list);             // 170\n    };                                                                                                     // 171\n                                                                                                           // 172\n    ReactiveList.prototype._trigger = function(evt) {                                                      // 173\n      var args, evtArgs, evtAt, evtAtArgs, handler, i, self, trigger, _ref;                                // 174\n      self = this;                                                                                         // 175\n      args = _.toArray(arguments).slice(1);                                                                // 176\n      if (evt === 'movedTo') {                                                                             // 177\n        trigger = function(callbacks) {                                                                    // 178\n          if (evt in callbacks) {                                                                          // 179\n            return callbacks[evt].apply(self, args);                                                       // 180\n          }                                                                                                // 181\n        };                                                                                                 // 182\n      } else {                                                                                             // 183\n        evtArgs = args.slice(0, -1);                                                                       // 184\n        evtAt = evt + 'At';                                                                                // 185\n        evtAtArgs = args;                                                                                  // 186\n        trigger = function(callbacks) {                                                                    // 187\n          if (evt in callbacks) {                                                                          // 188\n            callbacks[evt].apply(self, evtArgs);                                                           // 189\n          }                                                                                                // 190\n          if (evtAt in callbacks) {                                                                        // 191\n            return callbacks[evtAt].apply(self, evtAtArgs);                                                // 192\n          }                                                                                                // 193\n        };                                                                                                 // 194\n      }                                                                                                    // 195\n      _ref = this._handlers;                                                                               // 196\n      for (i in _ref) {                                                                                    // 197\n        handler = _ref[i];                                                                                 // 198\n        if (!(i in this._handlers)) {                                                                      // 199\n          continue;                                                                                        // 200\n        }                                                                                                  // 201\n        if (handler.stopped) {                                                                             // 202\n          delete this._handlers[i];                                                                        // 203\n          continue;                                                                                        // 204\n        }                                                                                                  // 205\n        trigger(handler.callbacks);                                                                        // 206\n      }                                                                                                    // 207\n    };                                                                                                     // 208\n                                                                                                           // 209\n    ReactiveList.prototype._hasActiveTrigger = function(evt) {                                             // 210\n      return _.any(this._handlers, function(handler) {                                                     // 211\n        return !handler.stopped && evt in handler.callbacks;                                               // 212\n      });                                                                                                  // 213\n    };                                                                                                     // 214\n                                                                                                           // 215\n    ReactiveList.prototype._indexSet = function(idx, val) {                                                // 216\n      var org, rtn;                                                                                        // 217\n      rtn = val;                                                                                           // 218\n      if (this._list[idx] !== val) {                                                                       // 219\n        org = list[idx];                                                                                   // 220\n        rtn = ReactiveList.__super__._indexSet.apply(this, arguments);                                     // 221\n        this._trigger('changed', this._list[idx], org, idx);                                               // 222\n      }                                                                                                    // 223\n      return rtn;                                                                                          // 224\n    };                                                                                                     // 225\n                                                                                                           // 226\n    return ReactiveList;                                                                                   // 227\n                                                                                                           // 228\n  })(ReactiveArray);                                                                                       // 229\n                                                                                                           // 230\n  ReactiveList.wrap = function(arr) {                                                                      // 231\n    var obj;                                                                                               // 232\n    obj = new ReactiveList;                                                                                // 233\n    obj._list = _.toArray(arr);                                                                            // 234\n    obj._syncIndexProxies(true);                                                                           // 235\n    return obj;                                                                                            // 236\n  };                                                                                                       // 237\n                                                                                                           // 238\n  EJSON.addType('reactive-list', function(jsonObj) {                                                       // 239\n    return ReactiveList.wrap(jsonObj);                                                                     // 240\n  });                                                                                                      // 241\n                                                                                                           // 242\n  LiveHandler = (function() {                                                                              // 243\n    function LiveHandler(callbacks) {                                                                      // 244\n      var self;                                                                                            // 245\n      self = this;                                                                                         // 246\n      this.stopped = false;                                                                                // 247\n      this.callbacks = callbacks;                                                                          // 248\n      if (Deps.active) {                                                                                   // 249\n        Deps.onInvalidate(function() {                                                                     // 250\n          return self.stop();                                                                              // 251\n        });                                                                                                // 252\n      }                                                                                                    // 253\n    }                                                                                                      // 254\n                                                                                                           // 255\n    LiveHandler.prototype.stop = function() {                                                              // 256\n      return this.stopped = true;                                                                          // 257\n    };                                                                                                     // 258\n                                                                                                           // 259\n    return LiveHandler;                                                                                    // 260\n                                                                                                           // 261\n  })();                                                                                                    // 262\n                                                                                                           // 263\n}).call(this);                                                                                             // 264\n                                                                                                           // 265\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['mrt:reactive-extra'] = {};\n\n})();\n","servePath":"/packages/mrt_reactive-extra.js"}]