{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"./problem.js","imported":["Problems","ProblemTests"],"specifiers":[{"kind":"named","imported":"Problems","local":"Problems"},{"kind":"named","imported":"ProblemTests","local":"ProblemTests"}]},{"source":"./utility.js","imported":[],"specifiers":[]}],"exports":{"exported":["Submissions","SubmissionResults"],"specifiers":[{"kind":"local","local":"Submissions","exported":"Submissions"},{"kind":"local","local":"SubmissionResults","exported":"SubmissionResults"}]}}},"options":{"filename":"imports/api/submission.js","filenameRelative":"imports/api/submission.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"useNativeAsyncAwait":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"imports/api/submission.js.map","sourceFileName":"imports/api/submission.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"submission"},"ignored":false,"code":"module.export({\n\tSubmissions: () => Submissions,\n\tSubmissionResults: () => SubmissionResults\n});\nlet Problems, ProblemTests;\nmodule.watch(require(\"./problem.js\"), {\n\tProblems(v) {\n\t\tProblems = v;\n\t},\n\n\tProblemTests(v) {\n\t\tProblemTests = v;\n\t}\n\n}, 0);\nmodule.watch(require(\"./utility.js\"));\nconst Submissions = new Mongo.Collection('Submissions');\nconst SubmissionResults = new Mongo.Collection('SubmissionResults');\n\nif (Meteor.isServer) {\n\tMeteor.publish('Submissions.findAllByFilter', function (problemId, studentId) {\n\t\tconst filter = {\n\t\t\t$or: [{\n\t\t\t\tproblemId: problemId\n\t\t\t}, {\n\t\t\t\tstudentId,\n\t\t\t\tstudentId\n\t\t\t}]\n\t\t};\n\t\tconst option = {\n\t\t\tfields: {\n\t\t\t\t_id: 1,\n\t\t\t\tproblemId: 1,\n\t\t\t\tstudentId: 1,\n\t\t\t\tcreatedAt: 1,\n\t\t\t\tresult: 1,\n\t\t\t\tisExam: 1\n\t\t\t}\n\t\t};\n\t\treturn Submissions.find(filter, option);\n\t});\n\tMeteor.publish('Submissions.findOne', function (id) {\n\t\tconst filter = {\n\t\t\t_id: id\n\t\t};\n\t\tconst option = {};\n\n\t\tif (!Meteor.isAdmin() && !Meteor.isOwner(Meteor.getValue(Submissions, id, 'studentId'))) {\n\t\t\toption.fields = {\n\t\t\t\tcode: 0\n\t\t\t};\n\t\t}\n\n\t\treturn Submissions.find(filter, option);\n\t});\n\tMeteor.publish('SubmissionResults.findAllBySubmission', function (submissionId) {\n\t\tconst filter = {\n\t\t\tsubmissionId: submissionId\n\t\t};\n\t\tconst option = {};\n\t\treturn SubmissionResults.find(filter, option);\n\t});\n}\n\nMeteor.methods({\n\t'Submissions.insert'(problemId, studentId, lang, code) {\n\t\tif (!Meteor.isAdmin() && (!Meteor.isOwner(studentId) || !Meteor.getValue(Problems, problemId, 'isPublic'))) return;\n\t\tconst submissionId = Submissions.insert({\n\t\t\tproblemId: problemId,\n\t\t\tstudentId: studentId,\n\t\t\tcreatedAt: new Date().getTime(),\n\t\t\tresult: {\n\t\t\t\tstatus: 'Pending'\n\t\t\t},\n\t\t\tlang: lang,\n\t\t\tcode: code,\n\t\t\tisExam: Meteor.getValue(Problems, problemId, 'isExam')\n\t\t});\n\n\t\tif (Meteor.isServer) {\n\t\t\tMeteor.call('Submissions.createDir', submissionId);\n\t\t}\n\t},\n\n\t'Submissions.remove'(filter) {\n\t\tif (!Meteor.isAdmin()) return;\n\n\t\tif (Meteor.isServer) {\n\t\t\tSubmissions.find(filter).forEach(submission => {\n\t\t\t\tMeteor.call('SubmissionResults.remove', {\n\t\t\t\t\tsubmissionId: submission._id\n\t\t\t\t});\n\t\t\t\tMeteor.call('Submissions.removeDir', submission._id);\n\t\t\t});\n\t\t}\n\n\t\tSubmissions.remove(filter);\n\t},\n\n\t'Submissions.update'(id, option) {\n\t\tif (!Meteor.isAdmin()) return;\n\t\tSubmissions.update({\n\t\t\t_id: id\n\t\t}, {\n\t\t\t$set: option\n\t\t});\n\n\t\tif (Meteor.isServer) {\n\t\t\tMeteor.call('SubmissionResults.remove', {\n\t\t\t\tsubmissionId: id\n\t\t\t});\n\t\t\tMeteor.call('Submissions.createDir', id);\n\t\t}\n\t}\n\n});","map":{"version":3,"sources":["imports/api/submission.js"],"names":["module","export","Submissions","SubmissionResults","Problems","ProblemTests","watch","require","v","Mongo","Collection","Meteor","isServer","publish","problemId","studentId","filter","$or","option","fields","_id","createdAt","result","isExam","find","id","isAdmin","isOwner","getValue","code","submissionId","methods","lang","insert","Date","getTime","status","call","forEach","submission","remove","update","$set"],"mappings":"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","file":"imports/api/submission.js.map","sourcesContent":["import { Problems, ProblemTests } from './problem.js';\r\nimport './utility.js';\r\n\r\nexport const Submissions = new Mongo.Collection('Submissions');\r\nexport const SubmissionResults = new Mongo.Collection('SubmissionResults');\r\n\r\nif (Meteor.isServer) {\r\n\tMeteor.publish('Submissions.findAllByFilter', function(problemId, studentId) {\r\n\t\tconst filter = { $or: [{ problemId: problemId }, { studentId, studentId }]};\r\n\t\tconst option = { fields: { _id: 1, problemId: 1, studentId: 1, createdAt: 1, result: 1, isExam: 1 }};\r\n\r\n\t\treturn Submissions.find(filter, option);\r\n\t});\r\n\tMeteor.publish('Submissions.findOne', function(id) {\r\n\t\tconst filter = { _id: id };\r\n\t\tconst option = {};\r\n\r\n\t\tif (!Meteor.isAdmin() && !Meteor.isOwner(Meteor.getValue(Submissions, id, 'studentId'))) {\r\n\t\t\toption.fields = { code: 0 };\r\n\t\t}\r\n\t\treturn Submissions.find(filter, option);\r\n\t});\r\n\tMeteor.publish('SubmissionResults.findAllBySubmission', function(submissionId) {\r\n\t\tconst filter = { submissionId: submissionId };\r\n\t\tconst option = {};\r\n\r\n\t\treturn SubmissionResults.find(filter, option);\r\n\t});\r\n}\r\n\r\nMeteor.methods({\r\n\t'Submissions.insert'(problemId, studentId, lang, code) {\r\n\t\tif (!Meteor.isAdmin() && (!Meteor.isOwner(studentId) || !Meteor.getValue(Problems, problemId, 'isPublic'))) return;\r\n\t\t\r\n\t\tconst submissionId = Submissions.insert({\r\n\t\t\tproblemId: problemId,\r\n\t\t\tstudentId: studentId,\r\n\t\t\tcreatedAt: new Date().getTime(),\r\n\t\t\tresult: { status: 'Pending' },\r\n\t\t\tlang: lang,\r\n\t\t\tcode: code,\r\n\t\t\tisExam: Meteor.getValue(Problems, problemId, 'isExam')\r\n\t\t});\r\n\t\tif (Meteor.isServer) {\r\n\t\t\tMeteor.call('Submissions.createDir', submissionId);\r\n\t\t}\r\n\t},\r\n\t'Submissions.remove'(filter) {\r\n\t\tif (!Meteor.isAdmin()) return;\r\n\r\n\t\tif (Meteor.isServer) {\r\n\t\t\tSubmissions.find(filter).forEach((submission) => {\r\n\t\t\t\tMeteor.call('SubmissionResults.remove', { submissionId: submission._id });\r\n\t\t\t\tMeteor.call('Submissions.removeDir', submission._id);\r\n\t\t\t});\r\n\t\t}\r\n\t\tSubmissions.remove(filter);\r\n\t},\r\n\t'Submissions.update'(id, option) {\r\n\t\tif (!Meteor.isAdmin()) return;\r\n\r\n\t\tSubmissions.update({ _id: id }, { $set: option });\r\n\r\n\t\tif (Meteor.isServer) {\r\n\t\t\tMeteor.call('SubmissionResults.remove', { submissionId: id });\r\n\t\t\tMeteor.call('Submissions.createDir', id);\r\n\t\t}\r\n\t}\r\n});"]},"hash":"71301ef175e5f4b35cc153f478df3c6e9660d6c5"}
