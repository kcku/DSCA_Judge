{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"./submission.js","imported":["Submissions","SubmissionResults"],"specifiers":[{"kind":"named","imported":"Submissions","local":"Submissions"},{"kind":"named","imported":"SubmissionResults","local":"SubmissionResults"}]},{"source":"./problem.js","imported":["ProblemTests"],"specifiers":[{"kind":"named","imported":"ProblemTests","local":"ProblemTests"}]},{"source":"child_process","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"ps"}]},{"source":"fs","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"fs"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"imports/api/_submission.js","filenameRelative":"imports/api/_submission.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"imports/api/_submission.js.map","sourceFileName":"imports/api/_submission.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"_submission"},"ignored":false,"code":"var Submissions = void 0,\n    SubmissionResults = void 0;\nmodule.watch(require(\"./submission.js\"), {\n\tSubmissions: function (v) {\n\t\tSubmissions = v;\n\t},\n\tSubmissionResults: function (v) {\n\t\tSubmissionResults = v;\n\t}\n}, 0);\nvar ProblemTests = void 0;\nmodule.watch(require(\"./problem.js\"), {\n\tProblemTests: function (v) {\n\t\tProblemTests = v;\n\t}\n}, 1);\nvar ps = void 0;\nmodule.watch(require(\"child_process\"), {\n\t\"default\": function (v) {\n\t\tps = v;\n\t}\n}, 2);\nvar fs = void 0;\nmodule.watch(require(\"fs\"), {\n\t\"default\": function (v) {\n\t\tfs = v;\n\t}\n}, 3);\nMeteor.methods({\n\t'Submissions.createDir': function (id) {\n\t\tSubmissions.update({\n\t\t\t_id: id\n\t\t}, {\n\t\t\t$set: {\n\t\t\t\tstatus: 'Initializing'\n\t\t\t}\n\t\t});\n\t\tvar submission = Submissions.findOne({\n\t\t\t_id: id\n\t\t});\n\t\tvar dirpath = Meteor.dataPath + id;\n\t\tvar filepath = Meteor.dataPath + id + '/code.' + submission.lang;\n\t\tvar execpath = Meteor.dataPath + id + '/exec';\n\t\tMeteor.wrapAsync(fs.mkdir)(dirpath);\n\t\tMeteor.wrapAsync(fs.writeFile)(filepath, submission.code);\n\t\tSubmissions.update({\n\t\t\t_id: id\n\t\t}, {\n\t\t\t$set: {\n\t\t\t\tstatus: 'Compiling'\n\t\t\t}\n\t\t});\n\t\tvar compile = null;\n\n\t\tif (submission.lang == 'c') {\n\t\t\tcompile = Meteor.wrapAsync(ps.exec)('gcc ' + filepath + ' -o' + execpath + ' -O2 -std=c99 -lm');\n\t\t} else if (submission.lang == 'cpp') {\n\t\t\tcompile = Meteor.wrapAsync(ps.exec)('g++ ' + filepath + ' -o' + execpath + ' -O2 -std=c++11');\n\t\t} else {\n\t\t\tSubmissions.update({\n\t\t\t\t_id: id\n\t\t\t}, {\n\t\t\t\t$set: {\n\t\t\t\t\tstatus: 'Language Error'\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\n\t\tif (compile) {\n\t\t\tSubmissions.update({\n\t\t\t\t_id: id\n\t\t\t}, {\n\t\t\t\t$set: {\n\t\t\t\t\tstatus: 'Compile Error',\n\t\t\t\t\terror: compile\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\n\t\tSubmissions.update({\n\t\t\t_id: id\n\t\t}, {\n\t\t\t$set: {\n\t\t\t\tstatus: 'Running'\n\t\t\t}\n\t\t});\n\t\tProblemTests.find({\n\t\t\tproblemId: submission.problemId\n\t\t}).forEach(function (problemTest) {\n\t\t\tMeteor.call('SubmissionResults.insert', problemTest._id, id);\n\t\t});\n\t\tSubmissions.update({\n\t\t\t_id: id\n\t\t}, {\n\t\t\t$set: {\n\t\t\t\tstatus: 'Finished'\n\t\t\t}\n\t\t});\n\t},\n\t'Submissions.removeDir': function (id) {\n\t\tvar dirpath = Meteor.dataPath + id;\n\t\tMeteor.wrapAsync(ps.exec)('rm -rf ' + dirpath);\n\t},\n\t'SubmissionResults.createDir': function (id) {\n\t\tSubmissionResults.update({\n\t\t\t_id: id\n\t\t}, {\n\t\t\t$set: {\n\t\t\t\tstatus: 'Initializing'\n\t\t\t}\n\t\t});\n\t\tvar submissionResult = SubmissionResults.findOne({\n\t\t\t_id: id\n\t\t});\n\t\tvar problemTest = ProblemTests.findOne({\n\t\t\t_id: submissionResult.problemTestId\n\t\t}, {\n\t\t\tfields: {\n\t\t\t\ttimeLimit: 1,\n\t\t\t\tmemoryLimit: 1\n\t\t\t}\n\t\t});\n\t\tvar execpath = Meteor.dataPath + submissionResult.submissionId + '/exec';\n\t\tvar inpath = Meteor.dataPath + submissionResult.problemTestId + '/input';\n\t\tvar anspath = Meteor.dataPath + submissionResult.problemTestId + '/output';\n\t\tvar dirpath = Meteor.dataPath + id;\n\t\tvar outpath = Meteor.dataPath + id + '/output';\n\t\tvar respath = Meteor.dataPath + id + '/result';\n\t\tvar execcmd = Meteor.rootPath + 'sandbox/runner ' + problemTest.timeLimit + ' ' + problemTest.memoryLimit + ' ' + execpath + ' < ' + inpath + ' > ' + outpath + ' 2>' + respath;\n\t\tMeteor.wrapAsync(fs.mkdir)(dirpath);\n\t\tSubmissionResults.update({\n\t\t\t_id: id\n\t\t}, {\n\t\t\t$set: {\n\t\t\t\tstatus: 'Running'\n\t\t\t}\n\t\t});\n\t\tMeteor.wrapAsync(ps.exec)(execcmd, {\n\t\t\tstdio: 'inherit'\n\t\t});\n\t\tSubmissionResults.update({\n\t\t\t_id: id\n\t\t}, {\n\t\t\t$set: {\n\t\t\t\tstatus: 'Judging'\n\t\t\t}\n\t\t});\n\t\tvar result = JSON.parse(Meteor.wrapAsync(fs.readFile)(respath));\n\n\t\tif (result.status == 'OK') {\n\t\t\tvar diff = Meteor.wrapAsync(ps.spawn)('diff', ['-w', outpath, anspath]);\n\t\t\tresult.status = diff.status ? 'Wrong Answer' : 'Accepted';\n\t\t}\n\n\t\tSubmissionResults.update({\n\t\t\t_id: id\n\t\t}, {\n\t\t\t$set: result\n\t\t});\n\t},\n\t'SubmissionResults.removeDir': function (id) {\n\t\tvar dirpath = Meteor.dataPath + id;\n\t\tMeteor.wrapAsync(ps.exec)('rm -rf ' + dirpath);\n\t}\n});","map":{"version":3,"sources":["imports/api/_submission.js"],"names":["Submissions","SubmissionResults","module","watch","require","v","ProblemTests","ps","fs","Meteor","methods","id","update","_id","$set","status","submission","findOne","dirpath","dataPath","filepath","lang","execpath","wrapAsync","mkdir","writeFile","code","compile","exec","error","find","problemId","forEach","problemTest","call","submissionResult","problemTestId","fields","timeLimit","memoryLimit","submissionId","inpath","anspath","outpath","respath","execcmd","rootPath","stdio","result","JSON","parse","readFile","diff","spawn"],"mappings":"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","file":"imports/api/_submission.js.map","sourcesContent":["import { Submissions, SubmissionResults } from './submission.js';\nimport { ProblemTests } from './problem.js';\nimport ps from 'child_process';\nimport fs from 'fs';\n\nMeteor.methods({\n\t'Submissions.createDir'(id) {\n\t\tSubmissions.update({ _id: id }, { $set: { status: 'Initializing' }});\n\t\t\n\t\tconst submission = Submissions.findOne({ _id: id });\n\t\tconst dirpath  = Meteor.dataPath+id;\n\t\tconst filepath = Meteor.dataPath+id+'/code.'+submission.lang;\n\t\tconst execpath = Meteor.dataPath+id+'/exec';\n\t\t\n\t\tMeteor.wrapAsync(fs.mkdir)(dirpath);\n\t\tMeteor.wrapAsync(fs.writeFile)(filepath, submission.code);\n\t\t\n\t\tSubmissions.update({ _id: id }, { $set: { status: 'Compiling' }});\n\n\t\tlet compile = null;\n\t\t\n\t\tif (submission.lang == 'c') {\n\t\t\tcompile = Meteor.wrapAsync(ps.exec)('gcc '+filepath+' -o'+execpath+' -O2 -std=c99 -lm');\n\t\t}\n\t\telse if (submission.lang == 'cpp') {\n\t\t\tcompile = Meteor.wrapAsync(ps.exec)('g++ '+filepath+' -o'+execpath+' -O2 -std=c++11');\n\t\t}\n\t\telse {\n\t\t\tSubmissions.update({ _id: id }, { $set: { status: 'Language Error' }});\n\t\t\treturn;\n\t\t}\n\t\tif (compile) {\n\t\t\tSubmissions.update({ _id: id }, { $set: { status: 'Compile Error', error: compile }});\n\t\t\treturn;\n\t\t}\n\t\tSubmissions.update({ _id: id }, { $set: { status: 'Running' }});\n\n\t\tProblemTests.find({ problemId: submission.problemId }).forEach((problemTest) => {\n\t\t\tMeteor.call('SubmissionResults.insert', problemTest._id, id);\n\t\t});\n\t\tSubmissions.update({ _id: id }, { $set: { status: 'Finished' }});\n\t},\n\t'Submissions.removeDir'(id) {\n\t\tconst dirpath = Meteor.dataPath+id;\n\t\tMeteor.wrapAsync(ps.exec)('rm -rf '+dirpath);\n\t},\n\t'SubmissionResults.createDir'(id) {\n\t\tSubmissionResults.update({ _id: id }, { $set: { status: 'Initializing' }});\n\n\t\tconst submissionResult = SubmissionResults.findOne({ _id: id });\n\t\tconst problemTest = ProblemTests.findOne({ _id: submissionResult.problemTestId }, { fields: { timeLimit: 1, memoryLimit: 1 }});\n\t\tconst execpath = Meteor.dataPath+submissionResult.submissionId+'/exec';\n\t\tconst inpath  = Meteor.dataPath+submissionResult.problemTestId+'/input';\n\t\tconst anspath = Meteor.dataPath+submissionResult.problemTestId+'/output';\n\t\tconst dirpath = Meteor.dataPath+id;\n\t\tconst outpath = Meteor.dataPath+id+'/output';\n\t\tconst respath = Meteor.dataPath+id+'/result';\n\t\tconst execcmd = Meteor.rootPath+'sandbox/runner '+problemTest.timeLimit+' '+problemTest.memoryLimit+' '+execpath+' < '+inpath+' > '+outpath+' 2>'+respath;\n\n\t\tMeteor.wrapAsync(fs.mkdir)(dirpath);\n\n\t\tSubmissionResults.update({ _id: id }, { $set: { status: 'Running' }});\n\n\t\tMeteor.wrapAsync(ps.exec)(execcmd, { stdio: 'inherit' });\n\n\t\tSubmissionResults.update({ _id: id }, { $set: { status: 'Judging' }});\n\n\t\tconst result = JSON.parse(Meteor.wrapAsync(fs.readFile)(respath));\n\t\t\n\t\tif (result.status == 'OK') {\n\t\t\tconst diff = Meteor.wrapAsync(ps.spawn)('diff', ['-w', outpath, anspath]);\n            result.status = diff.status ? 'Wrong Answer' : 'Accepted';\n\t\t}\n\t\tSubmissionResults.update({ _id: id }, { $set: result });\n\t},\n\t'SubmissionResults.removeDir'(id) {\n\t\tconst dirpath = Meteor.dataPath+id;\n\t\tMeteor.wrapAsync(ps.exec)('rm -rf '+dirpath);\n\t},\n});"]},"hash":"6a5841951603e8c5b119fec8c9798da16820f016"}
