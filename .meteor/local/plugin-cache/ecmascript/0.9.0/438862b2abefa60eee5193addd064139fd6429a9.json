{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"./submission.js","imported":["Submissions","SubmissionResults"],"specifiers":[{"kind":"named","imported":"Submissions","local":"Submissions"},{"kind":"named","imported":"SubmissionResults","local":"SubmissionResults"}]},{"source":"./problem.js","imported":["ProblemTests"],"specifiers":[{"kind":"named","imported":"ProblemTests","local":"ProblemTests"}]},{"source":"child_process","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"ps"}]},{"source":"fs","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"fs"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"imports/api/_submission.js","filenameRelative":"imports/api/_submission.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"imports/api/_submission.js.map","sourceFileName":"imports/api/_submission.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"_submission"},"ignored":false,"code":"var Submissions = void 0,\n    SubmissionResults = void 0;\nmodule.watch(require(\"./submission.js\"), {\n\tSubmissions: function (v) {\n\t\tSubmissions = v;\n\t},\n\tSubmissionResults: function (v) {\n\t\tSubmissionResults = v;\n\t}\n}, 0);\nvar ProblemTests = void 0;\nmodule.watch(require(\"./problem.js\"), {\n\tProblemTests: function (v) {\n\t\tProblemTests = v;\n\t}\n}, 1);\nvar ps = void 0;\nmodule.watch(require(\"child_process\"), {\n\t\"default\": function (v) {\n\t\tps = v;\n\t}\n}, 2);\nvar fs = void 0;\nmodule.watch(require(\"fs\"), {\n\t\"default\": function (v) {\n\t\tfs = v;\n\t}\n}, 3);\nMeteor.methods({\n\t'Submissions.createDir': function (id) {\n\t\tSubmissions.update({\n\t\t\t_id: id\n\t\t}, {\n\t\t\t$set: {\n\t\t\t\tstatus: 'Initializing'\n\t\t\t}\n\t\t});\n\t\tvar submission = Submissions.findOne({\n\t\t\t_id: id\n\t\t});\n\t\tvar dirpath = Meteor.dataPath + id;\n\t\tvar filepath = Meteor.dataPath + id + '/code.' + submission.lang;\n\t\tvar execpath = Meteor.dataPath + id + '/exec';\n\t\tMeteor.wrapAsync(ps.exec)('mkdir -p ' + dirpath);\n\t\tMeteor.wrapAsync(fs.writeFile)(filepath, submission.code);\n\t\tSubmissions.update({\n\t\t\t_id: id\n\t\t}, {\n\t\t\t$set: {\n\t\t\t\tresult: {\n\t\t\t\t\tstatus: 'Compiling'\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\ttry {\n\t\t\tif (submission.lang == 'c') {\n\t\t\t\tMeteor.wrapAsync(ps.exec)('gcc ' + filepath + ' -o' + execpath + ' -O2 -std=c99 -lm');\n\t\t\t} else if (submission.lang == 'cpp') {\n\t\t\t\tMeteor.wrapAsync(ps.exec)('g++ ' + filepath + ' -o' + execpath + ' -O2 -std=c++11');\n\t\t\t} else {\n\t\t\t\tSubmissions.update({\n\t\t\t\t\t_id: id\n\t\t\t\t}, {\n\t\t\t\t\t$set: {\n\t\t\t\t\t\tresult: {\n\t\t\t\t\t\t\tstatus: 'Language Error'\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tSubmissions.update({\n\t\t\t\t_id: id\n\t\t\t}, {\n\t\t\t\t$set: {\n\t\t\t\t\tresult: {\n\t\t\t\t\t\tstatus: 'Compile Error'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\n\t\tSubmissions.update({\n\t\t\t_id: id\n\t\t}, {\n\t\t\t$set: {\n\t\t\t\tresult: {\n\t\t\t\t\tstatus: 'Running'\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tvar filter = {\n\t\t\tproblemId: submission.problemId\n\t\t};\n\t\tif (!submission.isExam) filter.isPublic = true;\n\t\tProblemTests.find(filter).forEach(function (problemTest) {\n\t\t\tMeteor.call('SubmissionResults.insert', problemTest._id, id);\n\t\t});\n\t\tMeteor.call('Submissions.getResult', id);\n\t},\n\t'Submissions.removeDir': function (id) {\n\t\tvar dirpath = Meteor.dataPath + id;\n\t\tMeteor.wrapAsync(ps.exec)('rm -rf ' + dirpath);\n\t},\n\t'Submissions.getResult': function (id) {\n\t\tvar result = {\n\t\t\tstatus: null,\n\t\t\tscore: 0\n\t\t};\n\t\tSubmissionResults.find({\n\t\t\tsubmissionId: id\n\t\t}).forEach(function (submissionResult) {\n\t\t\tresult.score += Number(Meteor.getValue(ProblemTests, submissionResult.problemTestId, 'score'));\n\t\t\tif (submissionResult.status != 'Accepted' || result.status == null) result.status = submissionResult.status;\n\t\t});\n\t\tSubmissions.update({\n\t\t\t_id: id\n\t\t}, {\n\t\t\t$set: {\n\t\t\t\tresult: result\n\t\t\t}\n\t\t});\n\t},\n\t'SubmissionResults.createDir': function (id) {\n\t\tSubmissionResults.update({\n\t\t\t_id: id\n\t\t}, {\n\t\t\t$set: {\n\t\t\t\tstatus: 'Initializing'\n\t\t\t}\n\t\t});\n\t\tvar submissionResult = SubmissionResults.findOne({\n\t\t\t_id: id\n\t\t});\n\t\tvar problemTest = ProblemTests.findOne({\n\t\t\t_id: submissionResult.problemTestId\n\t\t}, {\n\t\t\tfields: {\n\t\t\t\ttimeLimit: 1,\n\t\t\t\tmemoryLimit: 1\n\t\t\t}\n\t\t});\n\t\tvar execpath = Meteor.dataPath + submissionResult.submissionId + '/exec';\n\t\tvar inpath = Meteor.dataPath + submissionResult.problemTestId + '/input';\n\t\tvar anspath = Meteor.dataPath + submissionResult.problemTestId + '/output';\n\t\tvar dirpath = Meteor.dataPath + id;\n\t\tvar outpath = Meteor.dataPath + id + '/output';\n\t\tvar respath = Meteor.dataPath + id + '/result';\n\t\tvar execcmd = Meteor.rootPath + 'sandbox/runner ' + problemTest.timeLimit + ' ' + problemTest.memoryLimit + ' ' + execpath + ' < ' + inpath + ' > ' + outpath + ' 2>' + respath;\n\t\tMeteor.wrapAsync(ps.exec)('mkdir -p ' + dirpath);\n\t\tSubmissionResults.update({\n\t\t\t_id: id\n\t\t}, {\n\t\t\t$set: {\n\t\t\t\tstatus: 'Running'\n\t\t\t}\n\t\t});\n\t\tMeteor.wrapAsync(ps.exec)(execcmd, {\n\t\t\tstdio: 'inherit'\n\t\t});\n\t\tSubmissionResults.update({\n\t\t\t_id: id\n\t\t}, {\n\t\t\t$set: {\n\t\t\t\tstatus: 'Judging'\n\t\t\t}\n\t\t});\n\t\tvar result = JSON.parse(Meteor.wrapAsync(fs.readFile)(respath));\n\n\t\tif (result.status == 'OK') {\n\t\t\ttry {\n\t\t\t\tMeteor.wrapAsync(ps.exec)('diff -w ' + outpath + ' ' + anspath);\n\t\t\t\tresult.status = 'Accepted';\n\t\t\t} catch (e) {\n\t\t\t\tresult.status = 'Wrong Answer';\n\t\t\t}\n\t\t}\n\n\t\tSubmissionResults.update({\n\t\t\t_id: id\n\t\t}, {\n\t\t\t$set: result\n\t\t});\n\t},\n\t'SubmissionResults.removeDir': function (id) {\n\t\tvar dirpath = Meteor.dataPath + id;\n\t\tMeteor.wrapAsync(ps.exec)('rm -rf ' + dirpath);\n\t},\n\t'SubmissionResults.insert': function (problemTestId, submissionId) {\n\t\tvar submissionResultId = SubmissionResults.insert({\n\t\t\tproblemTestId: problemTestId,\n\t\t\tsubmissionId: submissionId,\n\t\t\ttimeUsed: null,\n\t\t\tmemoryUsed: null,\n\t\t\tstatus: 'Pending'\n\t\t});\n\t\tMeteor.call('SubmissionResults.createDir', submissionResultId);\n\t},\n\t'SubmissionResults.remove': function (filter) {\n\t\tSubmissionResults.find(filter).forEach(function (submissionResult) {\n\t\t\tMeteor.call('SubmissionResults.removeDir', submissionResult._id);\n\t\t});\n\t\tSubmissionResults.remove(filter);\n\t}\n});","map":{"version":3,"sources":["imports/api/_submission.js"],"names":["Submissions","SubmissionResults","module","watch","require","v","ProblemTests","ps","fs","Meteor","methods","id","update","_id","$set","status","submission","findOne","dirpath","dataPath","filepath","lang","execpath","wrapAsync","exec","writeFile","code","result","e","filter","problemId","isExam","isPublic","find","forEach","problemTest","call","score","submissionId","submissionResult","Number","getValue","problemTestId","fields","timeLimit","memoryLimit","inpath","anspath","outpath","respath","execcmd","rootPath","stdio","JSON","parse","readFile","submissionResultId","insert","timeUsed","memoryUsed","remove"],"mappings":"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","file":"imports/api/_submission.js.map","sourcesContent":["import { Submissions, SubmissionResults } from './submission.js';\nimport { ProblemTests } from './problem.js';\nimport ps from 'child_process';\nimport fs from 'fs';\n\nMeteor.methods({\n\t'Submissions.createDir'(id) {\n\t\tSubmissions.update({ _id: id }, { $set: { status: 'Initializing' }});\n\t\t\n\t\tconst submission = Submissions.findOne({ _id: id });\n\t\tconst dirpath  = Meteor.dataPath+id;\n\t\tconst filepath = Meteor.dataPath+id+'/code.'+submission.lang;\n\t\tconst execpath = Meteor.dataPath+id+'/exec';\n\t\t\n\t\tMeteor.wrapAsync(ps.exec)('mkdir -p '+dirpath);\n\t\tMeteor.wrapAsync(fs.writeFile)(filepath, submission.code);\n\t\t\n\t\tSubmissions.update({ _id: id }, { $set: { result: { status: 'Compiling' }}});\n\n\t\ttry{\n\t\t\tif (submission.lang == 'c') {\n\t\t\t\tMeteor.wrapAsync(ps.exec)('gcc '+filepath+' -o'+execpath+' -O2 -std=c99 -lm');\n\t\t\t}\n\t\t\telse if (submission.lang == 'cpp') {\n\t\t\t\tMeteor.wrapAsync(ps.exec)('g++ '+filepath+' -o'+execpath+' -O2 -std=c++11');\n\t\t\t} else {\n\t\t\t\tSubmissions.update({ _id: id }, { $set: { result: { status: 'Language Error' }}});\n\t\t\t\treturn;\n\t\t\t}\n\t\t} catch(e) {\n\t\t\tSubmissions.update({ _id: id }, { $set: { result: { status: 'Compile Error' }}});\n\t\t\treturn;\n\t\t}\n\t\tSubmissions.update({ _id: id }, { $set: { result: { status: 'Running' }}});\n\n\t\tconst filter = { problemId: submission.problemId };\n\t\tif (!submission.isExam) filter.isPublic = true;\n\n\t\tProblemTests.find(filter).forEach((problemTest) => {\n\t\t\tMeteor.call('SubmissionResults.insert', problemTest._id, id);\n\t\t})\n\t\tMeteor.call('Submissions.getResult', id);\n\t},\n\t'Submissions.removeDir'(id) {\n\t\tconst dirpath = Meteor.dataPath+id;\n\t\tMeteor.wrapAsync(ps.exec)('rm -rf '+dirpath);\n\t},\n\t'Submissions.getResult'(id) {\n\t\tconst result = { status: null, score: 0\t};\n\n\t\tSubmissionResults.find({ submissionId: id }).forEach((submissionResult) => {\n\t\t\tresult.score += Number(Meteor.getValue(ProblemTests, submissionResult.problemTestId, 'score'));\n\t\t\t\n\t\t\tif (submissionResult.status != 'Accepted' || result.status == null)\n\t\t\t\tresult.status = submissionResult.status;\n\t\t});\n\t\tSubmissions.update({ _id: id }, { $set: { result: result }});\n\t},\n\t'SubmissionResults.createDir'(id) {\n\t\tSubmissionResults.update({ _id: id }, { $set: { status: 'Initializing' }});\n\n\t\tconst submissionResult = SubmissionResults.findOne({ _id: id });\n\t\tconst problemTest = ProblemTests.findOne({ _id: submissionResult.problemTestId }, { fields: { timeLimit: 1, memoryLimit: 1 }});\n\t\tconst execpath = Meteor.dataPath+submissionResult.submissionId+'/exec';\n\t\tconst inpath  = Meteor.dataPath+submissionResult.problemTestId+'/input';\n\t\tconst anspath = Meteor.dataPath+submissionResult.problemTestId+'/output';\n\t\tconst dirpath = Meteor.dataPath+id;\n\t\tconst outpath = Meteor.dataPath+id+'/output';\n\t\tconst respath = Meteor.dataPath+id+'/result';\n\t\tconst execcmd = Meteor.rootPath+'sandbox/runner '+problemTest.timeLimit+' '+problemTest.memoryLimit+' '+execpath+' < '+inpath+' > '+outpath+' 2>'+respath;\n\n\t\tMeteor.wrapAsync(ps.exec)('mkdir -p '+dirpath);\n\n\t\tSubmissionResults.update({ _id: id }, { $set: { status: 'Running' }});\n\n\t\tMeteor.wrapAsync(ps.exec)(execcmd, { stdio: 'inherit' });\n\n\t\tSubmissionResults.update({ _id: id }, { $set: { status: 'Judging' }});\n\n\t\tconst result = JSON.parse(Meteor.wrapAsync(fs.readFile)(respath));\n\t\t\n\t\tif (result.status == 'OK') {\n\t\t\ttry {\n\t\t\t\tMeteor.wrapAsync(ps.exec)('diff -w '+outpath+' '+anspath);\n\t\t\t\tresult.status = 'Accepted';\n\t\t\t} catch(e) {\n\t\t\t\tresult.status = 'Wrong Answer';\n\t\t\t}\n\t\t}\n\t\tSubmissionResults.update({ _id: id }, { $set: result });\n\t},\n\t'SubmissionResults.removeDir'(id) {\n\t\tconst dirpath = Meteor.dataPath+id;\n\t\tMeteor.wrapAsync(ps.exec)('rm -rf '+dirpath);\n\t},\n\t'SubmissionResults.insert'(problemTestId, submissionId) {\n\t\tconst submissionResultId = SubmissionResults.insert({\n\t\t\tproblemTestId: problemTestId,\n\t\t\tsubmissionId: submissionId,\n\t\t\ttimeUsed: null,\n\t\t\tmemoryUsed: null,\n\t\t\tstatus: 'Pending'\n\t\t});\n\t\tMeteor.call('SubmissionResults.createDir', submissionResultId);\n\t},\n\t'SubmissionResults.remove'(filter) {\n\t\tSubmissionResults.find(filter).forEach((submissionResult) => {\n\t\t\tMeteor.call('SubmissionResults.removeDir', submissionResult._id);\n\t\t});\n\t\tSubmissionResults.remove(filter);\n\t}\n});"]},"hash":"438862b2abefa60eee5193addd064139fd6429a9"}
