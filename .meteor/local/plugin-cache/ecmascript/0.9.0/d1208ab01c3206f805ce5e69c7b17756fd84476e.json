{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"./problem.js","imported":["Problems","ProblemTests"],"specifiers":[{"kind":"named","imported":"Problems","local":"Problems"},{"kind":"named","imported":"ProblemTests","local":"ProblemTests"}]},{"source":"./utility.js","imported":[],"specifiers":[]}],"exports":{"exported":["Submissions","SubmissionResults"],"specifiers":[{"kind":"local","local":"Submissions","exported":"Submissions"},{"kind":"local","local":"SubmissionResults","exported":"SubmissionResults"}]}}},"options":{"filename":"imports/api/submission.js","filenameRelative":"imports/api/submission.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"imports/api/submission.js.map","sourceFileName":"imports/api/submission.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"submission"},"ignored":false,"code":"module.export({\n\tSubmissions: function () {\n\t\treturn Submissions;\n\t},\n\tSubmissionResults: function () {\n\t\treturn SubmissionResults;\n\t}\n});\nvar Problems = void 0,\n    ProblemTests = void 0;\nmodule.watch(require(\"./problem.js\"), {\n\tProblems: function (v) {\n\t\tProblems = v;\n\t},\n\tProblemTests: function (v) {\n\t\tProblemTests = v;\n\t}\n}, 0);\nmodule.watch(require(\"./utility.js\"));\nvar Submissions = new Mongo.Collection('Submissions');\nvar SubmissionResults = new Mongo.Collection('SubmissionResults');\n\nif (Meteor.isServer) {\n\tMeteor.publish('Submissions.findAllByFilter', function (filter) {\n\t\tconsole.log(filter);\n\t\tvar option = {\n\t\t\tfields: {\n\t\t\t\t_id: 1,\n\t\t\t\tproblemId: 1,\n\t\t\t\tstudentId: 1,\n\t\t\t\tcreatedAt: 1,\n\t\t\t\tstatus: 1,\n\t\t\t\tisExam: 1\n\t\t\t}\n\t\t};\n\t\tconsole.log(Submissions.find(filter, option).count());\n\t\treturn Submissions.find(filter, option);\n\t});\n\tMeteor.publish('Submissions.findOne', function (id) {\n\t\tvar filter = {\n\t\t\t_id: id\n\t\t};\n\t\tvar option = {};\n\n\t\tif (!Meteor.isAdmin() && !Meteor.isOwner(Meteor.getValue(Submissions, id, 'studentId'))) {\n\t\t\toption.fields = {\n\t\t\t\tcode: 0\n\t\t\t};\n\t\t}\n\n\t\treturn Submissions.find(filter, option);\n\t});\n\tMeteor.publish('SubmissionResults.findAllBySubmission', function (submissionId) {\n\t\tvar filter = {\n\t\t\tsubmissionId: submissionId\n\t\t};\n\t\tvar option = {};\n\n\t\tif (!Meteor.getValue(Submissions, submissionId, 'isExam')) {\n\t\t\tvar problemId = Meteor.getValue(Submissions, submissionId, 'problemId');\n\t\t\tfilter.problemTestId = {\n\t\t\t\t$in: []\n\t\t\t};\n\t\t\tProblemTests.find({\n\t\t\t\tproblemId: problemId,\n\t\t\t\tisPublic: 1\n\t\t\t}).forEach(function (problemTest) {\n\t\t\t\tfilter.problemTestId.$in.push(problemTest._id);\n\t\t\t});\n\t\t}\n\n\t\treturn SubmissionResults.find(filter, option);\n\t});\n}\n\nMeteor.methods({\n\t'Submissions.insert': function (problemId, studentId, lang, code) {\n\t\tif (!Meteor.isOwner(studentId) || !Meteor.getValue(Problems, problemId, '_id')) return;\n\t\tvar submissionId = Submissions.insert({\n\t\t\tproblemId: problemId,\n\t\t\tstudentId: studentId,\n\t\t\tcreatedAt: new Date().getTime(),\n\t\t\tstatus: 'Pending',\n\t\t\tlang: lang,\n\t\t\tcode: code,\n\t\t\tisExam: Meteor.getValue(Problems, problemId, 'isExam')\n\t\t});\n\n\t\tif (Meteor.isServer) {\n\t\t\tMeteor.call('Submissions.createDir', submissionId);\n\t\t}\n\t},\n\t'Submissions.remove': function (filter) {\n\t\tif (!Meteor.isAdmin()) return;\n\t\tSubmissions.find(filter).forEach(function (submission) {\n\t\t\tMeteor.call('SubmissionResults.remove', {\n\t\t\t\tsubmissionId: submission._id\n\t\t\t});\n\n\t\t\tif (Meteor.isServer) {\n\t\t\t\tMeteor.call('Submissions.removeDir', submission._id);\n\t\t\t}\n\t\t});\n\t\tSubmissions.remove(filter);\n\t},\n\t'Submissions.update': function (id, option) {\n\t\tif (!Meteor.isAdmin()) return;\n\t\tSubmissions.update({\n\t\t\t_id: id\n\t\t}, {\n\t\t\t$set: option\n\t\t});\n\n\t\tif (Meteor.isServer) {\n\t\t\tif (option.lang || option.code) Meteor.call('Submissions.createDir', id);\n\t\t}\n\t},\n\t'SubmissionResults.insert': function (problemTestId, submissionId) {\n\t\t//if (!Meteor.isAdmin()) return;\n\t\tvar submissionResultId = SubmissionResults.insert({\n\t\t\tproblemTestId: problemTestId,\n\t\t\tsubmissionId: submissionId,\n\t\t\ttimeUsed: null,\n\t\t\tmemoryUsed: null,\n\t\t\tstatus: 'Pending'\n\t\t});\n\n\t\tif (Meteor.isServer) {\n\t\t\tMeteor.call('SubmissionResults.createDir', submissionResultId);\n\t\t}\n\t},\n\t'SubmissionResults.remove': function (filter) {\n\t\tif (!Meteor.isAdmin()) return;\n\t\tSubmissionResults.find(filter).forEach(function (submissionResult) {\n\t\t\tif (Meteor.isServer) {\n\t\t\t\tMeteor.call('SubmissionResults.removeDir', submissionResult._id);\n\t\t\t}\n\t\t});\n\t\tSubmissionResults.remove(filter);\n\t},\n\t'SubmissionResults.update': function (id) {\n\t\tif (!Meteor.isAdmin()) return;\n\n\t\tif (Meteor.isServer) {\n\t\t\tMeteor.call('SubmissionResults.createDir', id);\n\t\t}\n\t}\n});","map":{"version":3,"sources":["imports/api/submission.js"],"names":["module","export","Submissions","SubmissionResults","Problems","ProblemTests","watch","require","v","Mongo","Collection","Meteor","isServer","publish","filter","console","log","option","fields","_id","problemId","studentId","createdAt","status","isExam","find","count","id","isAdmin","isOwner","getValue","code","submissionId","problemTestId","$in","isPublic","forEach","problemTest","push","methods","lang","insert","Date","getTime","call","submission","remove","update","$set","submissionResultId","timeUsed","memoryUsed","submissionResult"],"mappings":"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","file":"imports/api/submission.js.map","sourcesContent":["import { Problems, ProblemTests } from './problem.js';\r\nimport './utility.js';\r\n\r\nexport const Submissions = new Mongo.Collection('Submissions');\r\nexport const SubmissionResults = new Mongo.Collection('SubmissionResults');\r\n\r\nif (Meteor.isServer) {\r\n\tMeteor.publish('Submissions.findAllByFilter', function(filter) {\r\n\t\tconsole.log(filter);\r\n\t\tconst option = { fields: { _id: 1, problemId: 1, studentId: 1, createdAt: 1, status: 1, isExam: 1 }};\r\n\t\tconsole.log(Submissions.find(filter, option).count());\r\n\t\treturn Submissions.find(filter, option);\r\n\t});\r\n\tMeteor.publish('Submissions.findOne', function(id) {\r\n\t\tconst filter = { _id: id };\r\n\t\tconst option = {};\r\n\r\n\t\tif (!Meteor.isAdmin() && !Meteor.isOwner(Meteor.getValue(Submissions, id, 'studentId'))) {\r\n\t\t\toption.fields = { code: 0 };\r\n\t\t}\r\n\t\treturn Submissions.find(filter, option);\r\n\t});\r\n\tMeteor.publish('SubmissionResults.findAllBySubmission', function(submissionId) {\r\n\t\tconst filter = { submissionId: submissionId };\r\n\t\tconst option = {};\r\n\r\n\t\tif (!Meteor.getValue(Submissions, submissionId, 'isExam')) {\r\n\t\t\tconst problemId = Meteor.getValue(Submissions, submissionId, 'problemId');\r\n\t\t\tfilter.problemTestId = { $in: [] };\r\n\t\t\t\r\n\t\t\tProblemTests.find({ problemId: problemId, isPublic: 1 }).forEach((problemTest) => {\r\n\t\t\t\tfilter.problemTestId.$in.push(problemTest._id);\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn SubmissionResults.find(filter, option);\r\n\t});\r\n}\r\n\r\nMeteor.methods({\r\n\t'Submissions.insert'(problemId, studentId, lang, code) {\r\n\t\tif (!Meteor.isOwner(studentId) || !Meteor.getValue(Problems, problemId, '_id')) return;\r\n\t\t\r\n\t\tconst submissionId = Submissions.insert({\r\n\t\t\tproblemId: problemId,\r\n\t\t\tstudentId: studentId,\r\n\t\t\tcreatedAt: new Date().getTime(),\r\n\t\t\tstatus: 'Pending',\r\n\t\t\tlang: lang,\r\n\t\t\tcode: code,\r\n\t\t\tisExam: Meteor.getValue(Problems, problemId, 'isExam')\r\n\t\t});\r\n\t\tif (Meteor.isServer) {\r\n\t\t\tMeteor.call('Submissions.createDir', submissionId);\r\n\t\t}\r\n\t},\r\n\t'Submissions.remove'(filter) {\r\n\t\tif (!Meteor.isAdmin()) return;\r\n\r\n\t\tSubmissions.find(filter).forEach((submission) => {\r\n\t\t\tMeteor.call('SubmissionResults.remove', { submissionId: submission._id });\r\n\r\n\t\t\tif (Meteor.isServer) {\r\n\t\t\t\tMeteor.call('Submissions.removeDir', submission._id);\r\n\t\t\t}\r\n\t\t});\r\n\t\tSubmissions.remove(filter);\r\n\t},\r\n\t'Submissions.update'(id, option) {\r\n\t\tif (!Meteor.isAdmin()) return;\r\n\t\t\r\n\t\tSubmissions.update({ _id: id }, { $set: option });\r\n\r\n\t\tif (Meteor.isServer) {\r\n\t\t\tif (option.lang || option.code)\r\n\t\t\t\tMeteor.call('Submissions.createDir', id);\r\n\t\t}\r\n\t},\r\n\t'SubmissionResults.insert'(problemTestId, submissionId) {\r\n\t\t//if (!Meteor.isAdmin()) return;\r\n\r\n\t\tconst submissionResultId = SubmissionResults.insert({\r\n\t\t\tproblemTestId: problemTestId,\r\n\t\t\tsubmissionId: submissionId,\r\n\t\t\ttimeUsed: null,\r\n\t\t\tmemoryUsed: null,\r\n\t\t\tstatus: 'Pending'\r\n\t\t});\r\n\t\tif (Meteor.isServer) {\r\n\t\t\tMeteor.call('SubmissionResults.createDir', submissionResultId);\r\n\t\t}\r\n\t},\r\n\t'SubmissionResults.remove'(filter) {\r\n\t\tif (!Meteor.isAdmin()) return;\r\n\r\n\t\tSubmissionResults.find(filter).forEach((submissionResult) => {\r\n\t\t\tif (Meteor.isServer) {\r\n\t\t\t\tMeteor.call('SubmissionResults.removeDir', submissionResult._id);\r\n\t\t\t}\r\n\t\t});\r\n\t\tSubmissionResults.remove(filter);\r\n\t},\r\n\t'SubmissionResults.update'(id) {\r\n\t\tif (!Meteor.isAdmin()) return;\r\n\r\n\t\tif (Meteor.isServer) {\r\n\t\t\tMeteor.call('SubmissionResults.createDir', id);\r\n\t\t}\r\n\t}\r\n});"]},"hash":"d1208ab01c3206f805ce5e69c7b17756fd84476e"}
