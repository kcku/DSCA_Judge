{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/random","imported":["Random"],"specifiers":[{"kind":"named","imported":"Random","local":"Random"}]},{"source":"./utility.js","imported":[],"specifiers":[]}],"exports":{"exported":["Students"],"specifiers":[{"kind":"local","local":"Students","exported":"Students"}]}}},"options":{"filename":"imports/api/student.js","filenameRelative":"imports/api/student.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"imports/api/student.js.map","sourceFileName":"imports/api/student.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"student"},"ignored":false,"code":"module.export({\n\tStudents: function () {\n\t\treturn Students;\n\t}\n});\nvar Random = void 0;\nmodule.watch(require(\"meteor/random\"), {\n\tRandom: function (v) {\n\t\tRandom = v;\n\t}\n}, 0);\nmodule.watch(require(\"./utility.js\"));\nvar Students = Meteor.users;\n\nif (Meteor.isServer) {\n\tMeteor.publish('Students.findAll', function () {\n\t\tvar filter = {};\n\t\tvar option = {\n\t\t\tfields: {\n\t\t\t\t_id: 1,\n\t\t\t\tusername: 1,\n\t\t\t\tisAdmin: 1\n\t\t\t}\n\t\t};\n\t\treturn Students.find(filter, option);\n\t});\n\tMeteor.publish('Students.findOne', function (id) {\n\t\tvar filter = {\n\t\t\t_id: id\n\t\t};\n\t\tvar option = {\n\t\t\tfields: {\n\t\t\t\t_id: 1,\n\t\t\t\tusername: 1,\n\t\t\t\tfullname: 1,\n\t\t\t\temails: 1,\n\t\t\t\tyear: 1,\n\t\t\t\tisAdmin: 1\n\t\t\t}\n\t\t};\n\t\treturn Students.find(filter, option);\n\t});\n}\n\nMeteor.methods({\n\t'Students.insert': function () {\n\t\tif (!Meteor.isAdmin()) return;\n\t\tAccounts.createUser({\n\t\t\tusername: 'Sample Username',\n\t\t\tfullname: 'Sample Fullname',\n\t\t\tpassword: Random.id(),\n\t\t\temail: 'dsca@inrg.csie.ntu.edu.tw',\n\t\t\tyear: new Date().getFullYear(),\n\t\t\tisAdmin: false\n\t\t});\n\t},\n\t'Students.remove': function (filter) {\n\t\tif (!Meteor.isAdmin()) return;\n\t\tStudents.find(filter).forEach(function (student) {\n\t\t\tMeteor.call('Submissions.remove', {\n\t\t\t\tstudentId: student._id\n\t\t\t});\n\t\t});\n\t\tStudents.remove(filter);\n\t},\n\t'Students.update': function (id, option) {\n\t\tif (!Meteor.isAdmin() || Meteor.isClient) return;\n\n\t\tif (option.username) {\n\t\t\tAccounts.setUsername(id, option.username);\n\t\t\tdelete option.username;\n\t\t}\n\n\t\tif (option.password) {\n\t\t\tAccounts.setPassword(id, option.password);\n\t\t\tdelete option.password;\n\t\t}\n\n\t\tif (option.email) {\n\t\t\tStudents.update({\n\t\t\t\t_id: id\n\t\t\t}, {\n\t\t\t\t$set: {\n\t\t\t\t\temails: []\n\t\t\t\t}\n\t\t\t});\n\t\t\tAccounts.addEmail(id, option.email);\n\t\t\tdelete option.email;\n\t\t}\n\n\t\tif (!_.isEmpty(option)) {\n\t\t\tStudents.update({\n\t\t\t\t_id: id\n\t\t\t}, {\n\t\t\t\t$set: option\n\t\t\t});\n\t\t}\n\t},\n\t'Students.changePassword': function (oldPassword, newPassword) {\n\t\tif (Meteor.isClient) return;\n\t\tAccounts.changePassword(oldPassword, newPassword);\n\t}\n});","map":{"version":3,"sources":["imports/api/student.js"],"names":["module","export","Students","Random","watch","require","v","Meteor","users","isServer","publish","filter","option","fields","_id","username","isAdmin","find","id","fullname","emails","year","methods","Accounts","createUser","password","email","Date","getFullYear","forEach","student","call","studentId","remove","isClient","setUsername","setPassword","update","$set","addEmail","_","isEmpty","oldPassword","newPassword","changePassword"],"mappings":"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","file":"imports/api/student.js.map","sourcesContent":["import { Random } from 'meteor/random';\nimport './utility.js';\n\nexport const Students = Meteor.users;\n\nif (Meteor.isServer) {\n\tMeteor.publish('Students.findAll', function() {\n\t\tlet filter = {};\n\t\tlet option = { fields: { _id: 1, username: 1, isAdmin: 1 }};\n\n\t\treturn Students.find(filter, option);\n\t});\n\tMeteor.publish('Students.findOne', function(id) {\n\t\tlet filter = { _id: id };\n\t\tlet option = { fields: { _id: 1, username: 1, fullname: 1, emails: 1, year: 1, isAdmin: 1 }};\n\n\t\treturn Students.find(filter, option);\n\t});\n}\n\nMeteor.methods({\n\t'Students.insert'() {\n\t\tif (!Meteor.isAdmin()) return;\n\n\t\tAccounts.createUser({\n\t\t\tusername: 'Sample Username',\n\t\t\tfullname: 'Sample Fullname',\n\t\t\tpassword: Random.id(),\n\t\t\temail: 'dsca@inrg.csie.ntu.edu.tw',\t\n\t\t\tyear: new Date().getFullYear(),\n\t\t\tisAdmin: false\n\t\t});\n\t},\n\t'Students.remove'(filter) {\n\t\tif (!Meteor.isAdmin()) return;\n\n\t\tStudents.find(filter).forEach((student) => {\n\t\t\tMeteor.call('Submissions.remove', { studentId: student._id });\n\t\t});\n\t\tStudents.remove(filter);\n\t},\n\t'Students.update'(id, option) {\n\t\tif (!Meteor.isAdmin() || Meteor.isClient) return;\n\n\t\tif (option.username) {\n\t\t\tAccounts.setUsername(id, option.username);\n\t\t\tdelete option.username;\n\t\t}\n\t\tif (option.password) {\n\t\t\tAccounts.setPassword(id, option.password);\n\t\t\tdelete option.password;\n\t\t}\n\t\tif (option.email) {\n\t\t\tStudents.update({ _id: id }, { $set: { emails: [] }});\n\t\t\tAccounts.addEmail(id, option.email);\n\t\t\tdelete option.email;\n\t\t}\n\t\tif (!_.isEmpty(option)) {\n\t\t\tStudents.update({ _id: id }, { $set: option });\n\t\t}\n\t},\n\t'Students.changePassword'(oldPassword, newPassword) {\n\t\tif (Meteor.isClient) return;\n\n\t\tAccounts.changePassword(oldPassword, newPassword);\n\t}\n});"]},"hash":"e166af0696f5247c55f8e15df991cfe1681f827b"}
