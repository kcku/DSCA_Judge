{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"./utility.js","imported":[],"specifiers":[]}],"exports":{"exported":["Problems","ProblemTests"],"specifiers":[{"kind":"local","local":"Problems","exported":"Problems"},{"kind":"local","local":"ProblemTests","exported":"ProblemTests"}]}}},"options":{"filename":"imports/api/problem.js","filenameRelative":"imports/api/problem.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"imports/api/problem.js.map","sourceFileName":"imports/api/problem.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"problem"},"ignored":false,"code":"module.export({\n\tProblems: function () {\n\t\treturn Problems;\n\t},\n\tProblemTests: function () {\n\t\treturn ProblemTests;\n\t}\n});\nmodule.watch(require(\"./utility.js\"));\nvar Problems = new Mongo.Collection('Problems');\nvar ProblemTests = new Mongo.Collection('ProblemTests');\n\nif (Meteor.isServer) {\n\tMeteor.publish('Problems.findAll', function () {\n\t\tvar filter = {};\n\t\tvar option = {\n\t\t\tfields: {\n\t\t\t\t_id: 1,\n\t\t\t\ttitle: 1,\n\t\t\t\tisExam: 1,\n\t\t\t\tisPublic: 1\n\t\t\t}\n\t\t};\n\n\t\tif (!Meteor.isAdmin()) {\n\t\t\tfilter.isPublic = true;\n\t\t}\n\n\t\treturn Problems.find(filter, option);\n\t});\n\tMeteor.publish('Problems.findOne', function (id) {\n\t\tvar filter = {\n\t\t\t_id: id\n\t\t};\n\t\tvar option = {};\n\n\t\tif (!Meteor.isAdmin()) {\n\t\t\tfilter.isPublic = true;\n\t\t}\n\n\t\treturn Problems.find(filter, option);\n\t});\n\tMeteor.publish('ProblemTests.findAllByProblem', function (problemId) {\n\t\tvar filter = {\n\t\t\tproblemId: problemId\n\t\t};\n\t\tvar option = {};\n\n\t\tif (!Meteor.isAdmin()) {\n\t\t\tif (!Meteor.getValue(Problems, problemId, 'isPublic')) {\n\t\t\t\tfilter.problemId = null;\n\t\t\t}\n\n\t\t\tfilter.isPublic = true;\n\t\t}\n\n\t\treturn ProblemTests.find(filter, option);\n\t});\n}\n\nMeteor.methods({\n\t'Problems.insert': function () {\n\t\tif (!Meteor.isAdmin()) return;\n\t\tProblems.insert({\n\t\t\ttitle: 'Sample Title',\n\t\t\tdescription: 'Sample Description',\n\t\t\tinputFormat: 'Sample Input Format',\n\t\t\toutputFormat: 'Sample Output Format',\n\t\t\thint: 'Sample Hint',\n\t\t\tisExam: false,\n\t\t\tisPublic: false\n\t\t});\n\t},\n\t'Problems.remove': function (filter) {\n\t\tif (!Meteor.isAdmin()) return;\n\t\tProblems.find(filter).forEach(function (problem) {\n\t\t\tMeteor.call('ProblemTests.remove', {\n\t\t\t\tproblemId: problem._id\n\t\t\t});\n\t\t\tMeteor.call('Submissions.remove', {\n\t\t\t\tproblemId: problem._id\n\t\t\t});\n\t\t});\n\t\tProblems.remove(filter);\n\t},\n\t'Problems.update': function (id, option) {\n\t\tif (!Meteor.isAdmin()) return;\n\t\tProblems.update({\n\t\t\t_id: id\n\t\t}, {\n\t\t\t$set: option\n\t\t});\n\t},\n\t'ProblemTests.insert': function (problemId) {\n\t\tif (!Meteor.isAdmin()) return;\n\t\tvar problemTestId = ProblemTests.insert({\n\t\t\tproblemId: problemId,\n\t\t\tinput: 'Sample Input',\n\t\t\toutput: 'Sample Output',\n\t\t\ttimeLimit: 1000,\n\t\t\tmemoryLimit: 64000,\n\t\t\tscore: 5,\n\t\t\tisPublic: false\n\t\t});\n\n\t\tif (Meteor.isServer) {\n\t\t\tMeteor.call('ProblemTests.createDir', problemTestId);\n\t\t}\n\t},\n\t'ProblemTests.remove': function (filter) {\n\t\tif (!Meteor.isAdmin()) return;\n\t\tProblemTests.find(filter).forEach(function (problemTest) {\n\t\t\tMeteor.call('SubmissionResults.remove', {\n\t\t\t\tproblemTestId: problemTest._id\n\t\t\t});\n\n\t\t\tif (Meteor.isServer) {\n\t\t\t\tMeteor.call('ProblemTests.removeDir', problemTest._id);\n\t\t\t}\n\t\t});\n\t\tProblemTests.remove(filter);\n\t},\n\t'ProblemTests.update': function (id, option) {\n\t\tif (!Meteor.isAdmin()) return;\n\t\tProblemTests.update({\n\t\t\t_id: id\n\t\t}, {\n\t\t\t$set: option\n\t\t});\n\n\t\tif (Meteor.isServer) {\n\t\t\tif (option.input) Meteor.call('ProblemTests.writeFile', id, 'input', option.input);\n\t\t\tif (option.output) Meteor.call('ProblemTests.writeFile', id, 'output', option.output);\n\t\t}\n\t}\n});","map":{"version":3,"sources":["imports/api/problem.js"],"names":["module","export","Problems","ProblemTests","watch","require","Mongo","Collection","Meteor","isServer","publish","filter","option","fields","_id","title","isExam","isPublic","isAdmin","find","id","problemId","getValue","methods","insert","description","inputFormat","outputFormat","hint","forEach","problem","call","remove","update","$set","problemTestId","input","output","timeLimit","memoryLimit","score","problemTest"],"mappings":"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","file":"imports/api/problem.js.map","sourcesContent":["import './utility.js';\r\n\r\nexport const Problems = new Mongo.Collection('Problems');\r\nexport const ProblemTests = new Mongo.Collection('ProblemTests');\r\n\r\nif (Meteor.isServer) {\r\n\tMeteor.publish('Problems.findAll', function() {\r\n\t\tconst filter = {};\r\n\t\tconst option = { fields: { _id: 1, title: 1, isExam: 1, isPublic: 1 }};\r\n\r\n\t\tif (!Meteor.isAdmin()) {\r\n\t\t\tfilter.isPublic = true;\r\n\t\t}\r\n\t\treturn Problems.find(filter, option);\r\n\t});\r\n\tMeteor.publish('Problems.findOne', function(id) {\r\n\t\tconst filter = { _id: id };\r\n\t\tconst option = {};\r\n\r\n\t\tif (!Meteor.isAdmin()) {\r\n\t\t\tfilter.isPublic = true;\r\n\t\t}\r\n\t\treturn Problems.find(filter, option);\r\n\t});\r\n\tMeteor.publish('ProblemTests.findAllByProblem', function(problemId) {\r\n\t\tconst filter = { problemId: problemId };\r\n\t\tconst option = {};\r\n\r\n\t\tif (!Meteor.isAdmin()) {\r\n\t\t\tif (!Meteor.getValue(Problems, problemId, 'isPublic')) {\r\n\t\t\t\tfilter.problemId = null;\r\n\t\t\t}\r\n\t\t\tfilter.isPublic = true;\r\n\t\t}\r\n\t\treturn ProblemTests.find(filter, option);\r\n\t});\r\n}\r\n\r\nMeteor.methods({\r\n\t'Problems.insert'() {\r\n\t\tif (!Meteor.isAdmin()) return;\r\n\r\n\t\tProblems.insert({\r\n\t\t\ttitle: 'Sample Title',\r\n\t\t\tdescription: 'Sample Description',\r\n\t\t\tinputFormat: 'Sample Input Format',\r\n\t\t\toutputFormat: 'Sample Output Format',\r\n\t\t\thint: 'Sample Hint',\r\n\t\t\tisExam: false,\r\n\t\t\tisPublic: false\r\n\t\t});\r\n\t},\r\n\t'Problems.remove'(filter) {\r\n\t\tif (!Meteor.isAdmin()) return;\r\n\r\n\t\tProblems.find(filter).forEach((problem) => {\r\n\t\t\tMeteor.call('ProblemTests.remove', { problemId: problem._id });\r\n\t\t\tMeteor.call('Submissions.remove', { problemId: problem._id });\t\r\n\t\t});\r\n\t\tProblems.remove(filter);\r\n\t},\r\n\t'Problems.update'(id, option) {\r\n\t\tif (!Meteor.isAdmin()) return;\r\n\r\n\t\tProblems.update({ _id: id }, { $set: option });\r\n\t},\r\n\t'ProblemTests.insert'(problemId) {\r\n\t\tif (!Meteor.isAdmin()) return;\r\n\r\n\t\tconst problemTestId = ProblemTests.insert({\r\n\t\t\tproblemId: problemId,\r\n\t\t\tinput: 'Sample Input',\r\n\t\t\toutput: 'Sample Output',\r\n\t\t\ttimeLimit: 1000,\r\n\t\t\tmemoryLimit: 64000,\r\n\t\t\tscore: 5,\r\n\t\t\tisPublic: false\r\n\t\t});\r\n\t\tif (Meteor.isServer) {\r\n\t\t\tMeteor.call('ProblemTests.createDir', problemTestId);\r\n\t\t}\r\n\t},\r\n\t'ProblemTests.remove'(filter) {\r\n\t\tif (!Meteor.isAdmin()) return;\r\n\r\n\t\tProblemTests.find(filter).forEach((problemTest) => {\r\n\t\t\tMeteor.call('SubmissionResults.remove', { problemTestId: problemTest._id });\r\n\r\n\t\t\tif (Meteor.isServer) {\r\n\t\t\t\tMeteor.call('ProblemTests.removeDir', problemTest._id);\r\n\t\t\t}\r\n\t\t});\r\n\t\tProblemTests.remove(filter);\r\n\t},\r\n\t'ProblemTests.update'(id, option) {\r\n\t\tif (!Meteor.isAdmin()) return;\r\n\r\n\t\tProblemTests.update({ _id: id }, { $set: option });\r\n\r\n\t\tif (Meteor.isServer) {\r\n\t\t\tif (option.input) Meteor.call('ProblemTests.writeFile', id, 'input', option.input);\r\n\t\t\tif (option.output) Meteor.call('ProblemTests.writeFile', id, 'output', option.output);\r\n\t\t}\r\n\t}\r\n});"]},"hash":"e2daf53bdd17923167dc016c42739387fedb6187"}
