{"metadata":{"usedHelpers":["extends","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"fs","imported":["readFile"],"specifiers":[{"kind":"named","imported":"readFile","local":"readFile"}]},{"source":"./template-web.browser","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"WebBrowserTemplate"}]},{"source":"./template-web.cordova","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"WebCordovaTemplate"}]}],"exports":{"exported":["Boilerplate"],"specifiers":[{"kind":"local","local":"Boilerplate","exported":"Boilerplate"}]}}},"options":{"filename":"packages/boilerplate-generator/generator.js","filenameRelative":"packages/boilerplate-generator/generator.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"useNativeAsyncAwait":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/boilerplate-generator/generator.js.map","sourceFileName":"packages/boilerplate-generator/generator.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"generator"},"ignored":false,"code":"var _extends2 = require(\"babel-runtime/helpers/extends\");\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nmodule.export({\n  Boilerplate: () => Boilerplate\n});\nlet readFile;\nmodule.watch(require(\"fs\"), {\n  readFile(v) {\n    readFile = v;\n  }\n\n}, 0);\nlet WebBrowserTemplate;\nmodule.watch(require(\"./template-web.browser\"), {\n  default(v) {\n    WebBrowserTemplate = v;\n  }\n\n}, 1);\nlet WebCordovaTemplate;\nmodule.watch(require(\"./template-web.cordova\"), {\n  default(v) {\n    WebCordovaTemplate = v;\n  }\n\n}, 2);\n\n// Copied from webapp_server\nconst readUtf8FileSync = filename => Meteor.wrapAsync(readFile)(filename, 'utf8');\n\nclass Boilerplate {\n  constructor(arch, manifest, options = {}) {\n    this.template = _getTemplate(arch);\n    this.baseData = null;\n\n    this._generateBoilerplateFromManifest(manifest, options);\n  } // The 'extraData' argument can be used to extend 'self.baseData'. Its\n  // purpose is to allow you to specify data that you might not know at\n  // the time that you construct the Boilerplate object. (e.g. it is used\n  // by 'webapp' to specify data that is only known at request-time).\n\n\n  toHTML(extraData) {\n    if (!this.baseData || !this.template) {\n      throw new Error('Boilerplate did not instantiate correctly.');\n    }\n\n    return \"<!DOCTYPE html>\\n\" + this.template((0, _extends3.default)({}, this.baseData, extraData));\n  } // XXX Exported to allow client-side only changes to rebuild the boilerplate\n  // without requiring a full server restart.\n  // Produces an HTML string with given manifest and boilerplateSource.\n  // Optionally takes urlMapper in case urls from manifest need to be prefixed\n  // or rewritten.\n  // Optionally takes pathMapper for resolving relative file system paths.\n  // Optionally allows to override fields of the data context.\n\n\n  _generateBoilerplateFromManifest(manifest, {\n    urlMapper = _.identity,\n    pathMapper = _.identity,\n    baseDataExtension,\n    inline\n  } = {}) {\n    const boilerplateBaseData = (0, _extends3.default)({\n      css: [],\n      js: [],\n      head: '',\n      body: '',\n      meteorManifest: JSON.stringify(manifest)\n    }, baseDataExtension);\n\n    _.each(manifest, item => {\n      const urlPath = urlMapper(item.url);\n      const itemObj = {\n        url: urlPath\n      };\n\n      if (inline) {\n        itemObj.scriptContent = readUtf8FileSync(pathMapper(item.path));\n        itemObj.inline = true;\n      }\n\n      if (item.type === 'css' && item.where === 'client') {\n        boilerplateBaseData.css.push(itemObj);\n      }\n\n      if (item.type === 'js' && item.where === 'client' && // Dynamic JS modules should not be loaded eagerly in the\n      // initial HTML of the app.\n      !item.path.startsWith('dynamic/')) {\n        boilerplateBaseData.js.push(itemObj);\n      }\n\n      if (item.type === 'head') {\n        boilerplateBaseData.head = readUtf8FileSync(pathMapper(item.path));\n      }\n\n      if (item.type === 'body') {\n        boilerplateBaseData.body = readUtf8FileSync(pathMapper(item.path));\n      }\n    });\n\n    this.baseData = boilerplateBaseData;\n  }\n\n}\n\n; // Returns a template function that, when called, produces the boilerplate\n// html as a string.\n\nconst _getTemplate = arch => {\n  if (arch === 'web.browser') {\n    return WebBrowserTemplate;\n  } else if (arch === 'web.cordova') {\n    return WebCordovaTemplate;\n  } else {\n    throw new Error('Unsupported arch: ' + arch);\n  }\n};","map":{"version":3,"sources":["packages/boilerplate-generator/generator.js"],"names":["module","export","Boilerplate","readFile","watch","require","v","WebBrowserTemplate","default","WebCordovaTemplate","readUtf8FileSync","filename","Meteor","wrapAsync","constructor","arch","manifest","options","template","_getTemplate","baseData","_generateBoilerplateFromManifest","toHTML","extraData","Error","urlMapper","_","identity","pathMapper","baseDataExtension","inline","boilerplateBaseData","css","js","head","body","meteorManifest","JSON","stringify","each","item","urlPath","url","itemObj","scriptContent","path","type","where","push","startsWith"],"mappings":"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","file":"packages/boilerplate-generator/generator.js.map","sourcesContent":["import { readFile } from 'fs';\n\nimport WebBrowserTemplate from './template-web.browser';\nimport WebCordovaTemplate from './template-web.cordova';\n\n// Copied from webapp_server\nconst readUtf8FileSync = filename => Meteor.wrapAsync(readFile)(filename, 'utf8');\n\nexport class Boilerplate {\n  constructor(arch, manifest, options = {}) {\n    this.template = _getTemplate(arch);\n    this.baseData = null;\n\n    this._generateBoilerplateFromManifest(\n      manifest,\n      options\n    );\n  }\n\n  // The 'extraData' argument can be used to extend 'self.baseData'. Its\n  // purpose is to allow you to specify data that you might not know at\n  // the time that you construct the Boilerplate object. (e.g. it is used\n  // by 'webapp' to specify data that is only known at request-time).\n  toHTML(extraData) {\n    if (!this.baseData || !this.template) {\n      throw new Error('Boilerplate did not instantiate correctly.');\n    }\n\n    return  \"<!DOCTYPE html>\\n\" +\n      this.template({ ...this.baseData, ...extraData });\n  }\n\n  // XXX Exported to allow client-side only changes to rebuild the boilerplate\n  // without requiring a full server restart.\n  // Produces an HTML string with given manifest and boilerplateSource.\n  // Optionally takes urlMapper in case urls from manifest need to be prefixed\n  // or rewritten.\n  // Optionally takes pathMapper for resolving relative file system paths.\n  // Optionally allows to override fields of the data context.\n  _generateBoilerplateFromManifest(manifest, {\n    urlMapper = _.identity,\n    pathMapper = _.identity,\n    baseDataExtension,\n    inline,\n  } = {}) {\n\n    const boilerplateBaseData = {\n      css: [],\n      js: [],\n      head: '',\n      body: '',\n      meteorManifest: JSON.stringify(manifest),\n      ...baseDataExtension,\n    };\n\n    _.each(manifest, item => {\n      const urlPath = urlMapper(item.url);\n      const itemObj = { url: urlPath };\n\n      if (inline) {\n        itemObj.scriptContent = readUtf8FileSync(\n          pathMapper(item.path));\n        itemObj.inline = true;\n      }\n\n      if (item.type === 'css' && item.where === 'client') {\n        boilerplateBaseData.css.push(itemObj);\n      }\n\n      if (item.type === 'js' && item.where === 'client' &&\n        // Dynamic JS modules should not be loaded eagerly in the\n        // initial HTML of the app.\n        !item.path.startsWith('dynamic/')) {\n        boilerplateBaseData.js.push(itemObj);\n      }\n\n      if (item.type === 'head') {\n        boilerplateBaseData.head =\n          readUtf8FileSync(pathMapper(item.path));\n      }\n\n      if (item.type === 'body') {\n        boilerplateBaseData.body =\n          readUtf8FileSync(pathMapper(item.path));\n      }\n    });\n\n    this.baseData = boilerplateBaseData;\n  }\n};\n\n// Returns a template function that, when called, produces the boilerplate\n// html as a string.\nconst _getTemplate = arch => {\n  if (arch === 'web.browser') {\n    return WebBrowserTemplate;\n  } else if (arch === 'web.cordova') {\n    return WebCordovaTemplate;\n  } else {\n    throw new Error('Unsupported arch: ' + arch);\n  }\n};\n"]},"hash":"3035a99dc07c266cc94df3c56237c18b67d04ec7"}
