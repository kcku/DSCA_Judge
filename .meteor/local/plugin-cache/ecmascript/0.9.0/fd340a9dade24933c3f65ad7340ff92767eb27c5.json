{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"/imports/api/problem.js","imported":["ProblemTests"],"specifiers":[{"kind":"named","imported":"ProblemTests","local":"ProblemTests"}]},{"source":"./test.html","imported":[],"specifiers":[]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"imports/ui/problem/test.js","filenameRelative":"imports/ui/problem/test.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"useNativeAsyncAwait":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"imports/ui/problem/test.js.map","sourceFileName":"imports/ui/problem/test.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"test"},"ignored":false,"code":"let ProblemTests;\nmodule.watch(require(\"/imports/api/problem.js\"), {\n\tProblemTests(v) {\n\t\tProblemTests = v;\n\t}\n\n}, 0);\nmodule.watch(require(\"./test.html\"));\nTemplate.problem_test.onCreated(function () {\n\tthis.autorun(() => this.subscribe('ProblemTests.findAllByProblem', this.data.currentProblemId.get()));\n\tthis.currentProblemTestId = new ReactiveVar(null);\n});\nTemplate.problem_test.onRendered(function () {\n\tthis.$('[class*=edit]').hide();\n});\nTemplate.problem_test.helpers({\n\tproblemTestList() {\n\t\treturn ProblemTests.find({\n\t\t\tproblemId: this.currentProblemId.get()\n\t\t}, {\n\t\t\tfields: {\n\t\t\t\t_id: 1,\n\t\t\t\tisPublic: 1\n\t\t\t}\n\t\t});\n\t},\n\n\tcurrentProblemTest() {\n\t\tconst problemTest = ProblemTests.findOne({\n\t\t\t_id: Template.instance().currentProblemTestId.get()\n\t\t});\n\n\t\tif (problemTest == undefined) {\n\t\t\tTemplate.instance().currentProblemTestId.set(null);\n\t\t}\n\n\t\treturn problemTest;\n\t},\n\n\tisCurrentProblemTest(id) {\n\t\treturn id == Template.instance().currentProblemTestId.get();\n\t}\n\n});\nTemplate.problem_test.events({\n\t'click .insert-btn'() {\n\t\tMeteor.call('ProblemTests.insert', this.currentProblemId.get());\n\t},\n\n\t'click .remove-btn'(event) {\n\t\tconst id = event.currentTarget.parentElement.dataset.id;\n\t\tMeteor.call('ProblemTests.remove', {\n\t\t\t_id: id\n\t\t});\n\t},\n\n\t'click .get-btn'(event, instance) {\n\t\tconst id = event.currentTarget.dataset.id;\n\t\tinstance.currentProblemTestId.set(id);\n\t},\n\n\t'blur [class*=edit]'(event, instance) {\n\t\tconst target = event.currentTarget;\n\t\tconst toggle = target.dataset.toggle;\n\t\tconst field = target.name;\n\t\tconst value = target.value;\n\t\tinstance.$(target).hide();\n\t\tinstance.$(toggle).show();\n\t\tMeteor.call('ProblemTests.update', instance.currentProblemTestId.get(), {\n\t\t\t[field]: value\n\t\t});\n\t},\n\n\t'click [class*=view]'(event, instance) {\n\t\tif (!Meteor.isAdmin()) return;\n\t\tconst target = event.currentTarget;\n\t\tconst toggle = target.dataset.toggle;\n\t\tinstance.$(target).hide();\n\t\tinstance.$(toggle).show().focus();\n\t},\n\n\t'click [type=checkbox]'(event, instance) {\n\t\tconst target = event.currentTarget;\n\t\tconst field = target.name;\n\t\tconst value = target.checked;\n\t\tMeteor.call('ProblemTests.update', instance.currentProblemTestId.get(), {\n\t\t\t[field]: value\n\t\t});\n\t}\n\n});","map":{"version":3,"sources":["imports/ui/problem/test.js"],"names":["ProblemTests","module","watch","require","v","Template","problem_test","onCreated","autorun","subscribe","data","currentProblemId","get","currentProblemTestId","ReactiveVar","onRendered","$","hide","helpers","problemTestList","find","problemId","fields","_id","isPublic","currentProblemTest","problemTest","findOne","instance","undefined","set","isCurrentProblemTest","id","events","Meteor","call","event","currentTarget","parentElement","dataset","target","toggle","field","name","value","show","isAdmin","focus","checked"],"mappings":"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","file":"imports/ui/problem/test.js.map","sourcesContent":["import { ProblemTests } from '/imports/api/problem.js';\r\nimport './test.html';\r\n\r\nTemplate.problem_test.onCreated(function() {\r\n\tthis.autorun(() => this.subscribe('ProblemTests.findAllByProblem', this.data.currentProblemId.get()));\r\n\tthis.currentProblemTestId = new ReactiveVar(null);\r\n});\r\n\r\nTemplate.problem_test.onRendered(function() {\r\n\tthis.$('[class*=edit]').hide();\r\n});\r\n\r\nTemplate.problem_test.helpers({\r\n\tproblemTestList() {\r\n\t\treturn ProblemTests.find({ problemId: this.currentProblemId.get() }, { fields: { _id: 1, isPublic: 1 }});\r\n\t},\r\n\tcurrentProblemTest() {\r\n\t\tconst problemTest = ProblemTests.findOne({ _id: Template.instance().currentProblemTestId.get() });\r\n\t\t\r\n\t\tif (problemTest == undefined) {\r\n\t\t\tTemplate.instance().currentProblemTestId.set(null);\r\n\t\t}\r\n\t\treturn problemTest;\r\n\t},\r\n\tisCurrentProblemTest(id) {\r\n\t\treturn id == Template.instance().currentProblemTestId.get();\r\n\t}\r\n});\r\n\r\nTemplate.problem_test.events({\r\n\t'click .insert-btn'() {\r\n\t\tMeteor.call('ProblemTests.insert', this.currentProblemId.get());\r\n\t},\r\n\t'click .remove-btn'(event) {\r\n\t\tconst id = event.currentTarget.parentElement.dataset.id;\r\n\t\tMeteor.call('ProblemTests.remove', { _id: id });\r\n\t},\r\n\t'click .get-btn'(event, instance) {\r\n\t\tconst id = event.currentTarget.dataset.id;\r\n\t\tinstance.currentProblemTestId.set(id);\r\n\t},\r\n\t'blur [class*=edit]'(event, instance) {\r\n\t\tconst target = event.currentTarget;\r\n\t\tconst toggle = target.dataset.toggle;\r\n\t\tconst field = target.name;\r\n\t\tconst value = target.value;\r\n\r\n\t\tinstance.$(target).hide();\r\n\t\tinstance.$(toggle).show();\r\n\t\t\r\n\t\tMeteor.call('ProblemTests.update', instance.currentProblemTestId.get(), { [field]: value });\r\n\t},\r\n\t'click [class*=view]'(event, instance) {\r\n\t\tif (!Meteor.isAdmin()) return;\r\n\t\t\r\n\t\tconst target = event.currentTarget;\r\n\t\tconst toggle = target.dataset.toggle;\r\n\r\n\t\tinstance.$(target).hide();\r\n\t\tinstance.$(toggle).show().focus();\r\n\t},\r\n\t'click [type=checkbox]'(event, instance) {\r\n\t\tconst target = event.currentTarget;\r\n\t\tconst field = target.name;\r\n\t\tconst value = target.checked;\r\n\r\n\t\tMeteor.call('ProblemTests.update', instance.currentProblemTestId.get(), { [field]: value });\r\n\t}\r\n});"]},"hash":"fd340a9dade24933c3f65ad7340ff92767eb27c5"}
